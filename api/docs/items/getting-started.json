{"slug":"getting-started","filename":"01_getting-started","title":"Getting started","date":{"RE_PRIVATE_NONE":true},"draft":false,"meta":{"title":"Getting started","slug":"getting-started"},"body":"<h2>Installation</h2>\n<pre><code class=\"language-console\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> yarn add rescript-pages bs-css-emotion reason-react rescript-asyncdata</span>\n</code></pre>\n<p>Add them to your <code>bsconfig.json</code> dependencies:</p>\n<pre><code class=\"language-diff\"> &quot;bs-dependencies&quot;: [\n<span class=\"hljs-addition\">+  &quot;rescript-pages&quot;,</span>\n<span class=\"hljs-addition\">+  &quot;bs-css-emotion&quot;,</span>\n<span class=\"hljs-addition\">+  &quot;reason-react&quot;,</span>\n<span class=\"hljs-addition\">+  &quot;rescript-asyncdata&quot;</span>\n ]\n</code></pre>\n<h2>Contents</h2>\n<p>Create a directory for your contents, let's say <code>contents</code>. In this directory, you can create collection by adding directories:</p>\n<pre><code>contents\n|_ blog\n|_ pages\n</code></pre>\n<p>There, you have two collections, <code>blog</code> &amp; <code>pages</code>. You can add markdown files in them.</p>\n<p>The posts will be sorted by filename, but you can specify custom slugs.</p>\n<h2>Configuration</h2>\n<p>You'll need to create a React component with the following signature:</p>\n<pre><code class=\"language-reason\">@react.component\n<span class=\"hljs-keyword\">let</span> make = (~url: <span class=\"hljs-module-identifier\">ReasonReact</span>.<span class=\"hljs-module-identifier\">Router</span>.url, ~config: <span class=\"hljs-module-identifier\">Pages</span>.config) =&gt; <span class=\"hljs-module-identifier\">React</span>.element\n</code></pre>\n<p>And then expose your application:</p>\n<pre><code class=\"language-js\"><span class=\"hljs-comment\">/* This function takes the data store and returns an array of URLs to pre-render */</span>\n<span class=\"hljs-keyword\">let</span> getUrlsToPrerender = <span class=\"hljs-function\">(<span class=\"hljs-params\">{Pages.getAll: getAll}</span>) =&gt;</span>\n  <span class=\"hljs-built_in\">Array</span>.concatMany([[<span class=\"hljs-string\">&quot;/&quot;</span>], getAll(<span class=\"hljs-string\">&quot;docs&quot;</span>)-&gt;<span class=\"hljs-built_in\">Array</span>.map(<span class=\"hljs-function\"><span class=\"hljs-params\">slug</span> =&gt;</span> <span class=\"hljs-string\">`/docs/<span class=\"hljs-subst\">${slug}</span>`</span>), [<span class=\"hljs-string\">&quot;404.html&quot;</span>]])\n\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">default</span> = Pages.make(\n  make, <span class=\"hljs-comment\">/* Your root React component */</span>\n  {\n    <span class=\"hljs-attr\">siteTitle</span>: <span class=\"hljs-string\">&quot;bloodyowl&quot;</span>, <span class=\"hljs-comment\">/* Default title */</span>\n    <span class=\"hljs-attr\">siteDescription</span>: <span class=\"hljs-string\">&quot;My site&quot;</span>, <span class=\"hljs-comment\">/* Default description */</span>\n    <span class=\"hljs-attr\">mode</span>: SPA, <span class=\"hljs-comment\">/* SPA (with JS) or Static (without JS) */</span>\n    <span class=\"hljs-attr\">distDirectory</span>: <span class=\"hljs-string\">&quot;dist&quot;</span>, <span class=\"hljs-comment\">/* Where to write the built file */</span>\n    <span class=\"hljs-attr\">baseUrl</span>: <span class=\"hljs-string\">&quot;https://bloodyowl.io&quot;</span>, <span class=\"hljs-comment\">/* Where the website lives */</span>\n    <span class=\"hljs-attr\">staticsDirectory</span>: Some(<span class=\"hljs-string\">&quot;public&quot;</span>), <span class=\"hljs-comment\">/* Assets to copy to the `distDirectory` root */</span>\n    <span class=\"hljs-attr\">paginateBy</span>: <span class=\"hljs-number\">2</span>,  <span class=\"hljs-comment\">/* Page size */</span>\n    <span class=\"hljs-attr\">variants</span>: [\n      {\n        <span class=\"hljs-attr\">subdirectory</span>: None,  <span class=\"hljs-comment\">/* Where to write in `distDirectory` */</span>\n        <span class=\"hljs-attr\">localeFile</span>: None, <span class=\"hljs-comment\">/* JSON file containing locales */</span>\n        <span class=\"hljs-attr\">contentDirectory</span>: <span class=\"hljs-string\">&quot;contents&quot;</span>, <span class=\"hljs-comment\">/* Where to find markdown contents */</span>\n        <span class=\"hljs-attr\">getUrlsToPrerender</span>: getUrlsToPrerender,\n      },\n    ],\n  },\n)\n</code></pre>\n"}
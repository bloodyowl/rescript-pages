{"slug":"consuming-content","filename":"02_consuming-content","title":"Consuming content","date":{"RE_PRIVATE_NONE":true},"draft":false,"meta":{"title":"Consuming content","slug":"consuming-content"},"body":"<p>You have two hooks available to fetch content:</p>\n<h2>Items</h2>\n<pre><code class=\"hljs language-rescript\"><span class=\"hljs-module-identifier\">Pages</span>.useItem(<span class=\"hljs-string\">&quot;collection&quot;</span>, ~id<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&quot;itemId&quot;</span>)\n</code></pre>\n<p>Items have the following type:</p>\n<pre><code class=\"hljs language-rescript\"><span class=\"hljs-keyword\">type</span> item <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">{</span>\n  slug: string,\n  filename: string,\n  title: string,\n  date: option&lt;string&gt;,\n  draft: bool,\n  meta: <span class=\"hljs-module-identifier\">Js</span>.<span class=\"hljs-module-identifier\">Dict</span>.t&lt;<span class=\"hljs-module-identifier\">Js</span>.<span class=\"hljs-module-identifier\">Json</span>.t&gt;,\n  body: string,\n<span class=\"hljs-literal\">}</span>\n</code></pre>\n<h2>Collections</h2>\n<pre><code class=\"hljs language-rescript\"><span class=\"hljs-module-identifier\">Pages</span>.useCollection(<span class=\"hljs-string\">&quot;collection&quot;</span>)\n</code></pre>\n<p>By default, <code>useCollection</code> returns <strong>all</strong> items, but it paginates once you provide a <code>page</code> param.</p>\n<pre><code class=\"hljs language-rescript\"><span class=\"hljs-module-identifier\">Pages</span>.useCollection(<span class=\"hljs-string\">&quot;collection&quot;</span>, ~page<span class=\"hljs-operator\">=</span><span class=\"hljs-number\">1</span>)\n</code></pre>\n<p>By default, all collections are sorted alphabetically on the filename by descending order (which is the most common for blogs, where you want the latest content first), but you can change that with the <code>direction</code> param:</p>\n<pre><code class=\"hljs language-rescript\"><span class=\"hljs-module-identifier\">Pages</span>.useCollection(<span class=\"hljs-string\">&quot;collection&quot;</span>, ~page<span class=\"hljs-operator\">=</span><span class=\"hljs-number\">1</span>, ~direction<span class=\"hljs-operator\">=</span><span class=\"hljs-constructor\">#asc</span>)\n</code></pre>\n<p>Collections have the following type:</p>\n<pre><code class=\"hljs language-rescript\"><span class=\"hljs-keyword\">type</span> listItem <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">{</span>\n  slug: string,\n  filename: string,\n  title: string,\n  date: option&lt;string&gt;,\n  draft: bool,\n  meta: <span class=\"hljs-module-identifier\">Js</span>.<span class=\"hljs-module-identifier\">Dict</span>.t&lt;<span class=\"hljs-module-identifier\">Js</span>.<span class=\"hljs-module-identifier\">Json</span>.t&gt;,\n  summary: string,\n<span class=\"hljs-literal\">}</span>\n\n<span class=\"hljs-keyword\">type</span> paginated <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">{</span>\n  hasPreviousPage: bool,\n  hasNextPage: bool,\n  items: array&lt;listItem&gt;,\n<span class=\"hljs-literal\">}</span>\n</code></pre>\n<h2>AsyncData</h2>\n<p>As the server fetch is asynchronous, the two hooks return <a href=\"https://github.com/bloodyowl/rescript-asyncdata\">AsyncData</a> values:</p>\n<pre><code class=\"hljs language-rescript\"><span class=\"hljs-keyword\">switch</span> blocks <span class=\"hljs-literal\">{</span>\n| <span class=\"hljs-constructor\">NotAsked</span>\n| <span class=\"hljs-constructor\">Loading</span> <span class=\"hljs-function\">=&gt;</span> <span class=\"hljs-string\">&quot;Loading&quot;</span><span class=\"hljs-operator\">-&gt;</span><span class=\"hljs-module-identifier\">React</span>.string\n| <span class=\"hljs-constructor\">Done</span>(<span class=\"hljs-constructor\">Error</span>(_)) <span class=\"hljs-function\">=&gt;</span> <span class=\"hljs-string\">&quot;Error&quot;</span><span class=\"hljs-operator\">-&gt;</span><span class=\"hljs-module-identifier\">React</span>.string\n| <span class=\"hljs-constructor\">Done</span>(<span class=\"hljs-constructor\">Ok</span>(value)) <span class=\"hljs-function\">=&gt;</span> <span class=\"hljs-comment\">/* Do something with `value` */</span>\n<span class=\"hljs-literal\">}</span>\n</code></pre>\n<p>To help you reprensenting those states, <code>Pages</code> provides:</p>\n<ul>\n<li><code>&lt;ActivityIndicator /&gt;</code></li>\n<li><code>&lt;ErrorIndicator /&gt;</code></li>\n</ul>\n"}
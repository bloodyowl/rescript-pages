{"hasPreviousPage":false,"hasNextPage":false,"totalCount":6,"items":[{"slug":"06_i18n","filename":"06_i18n","title":"Internationalization","date":{"RE_PRIVATE_NONE":true},"draft":false,"meta":{"title":"Internationalization"},"summary":"<p>A ReScript Pages config contains <code>variants</code>. Each variant can specify its content source, destination path and locales. You simply provide the dictionnary.</p>\n<pre><code class=\"hljs language-rescript\"><span class=\"hljs-module-identifier\">Pages</span>.t(<span class=\"hljs-string\">&quot;Hello&quot;</span>)\n<span class=\"hljs-comment\">/* &quot;Hello&quot; in english */</span>\n<span class=\"hljs-comment\">/* &quot;Bonjour&quot; in french */</span>\n</code></pre>\n"},{"slug":"05_rss-sitemap","filename":"05_rss-sitemap","title":"Great SEO","date":{"RE_PRIVATE_NONE":true},"draft":false,"meta":{"title":"Great SEO"},"summary":"<p>ReScript Pages automatically generates a sitemap, and RSS feeds are created for each collection.</p>\n<pre><code class=\"hljs language-rescript\">&lt;<span class=\"hljs-module-identifier\">Pages</span>.<span class=\"hljs-constructor\">Head</span>&gt;\n  &lt;title&gt;\n    <span class=\"hljs-literal\">{</span>post.title<span class=\"hljs-operator\">-&gt;</span><span class=\"hljs-module-identifier\">React</span>.string<span class=\"hljs-literal\">}</span>\n  &lt;/title&gt;\n&lt;/<span class=\"hljs-module-identifier\">Pages</span>.<span class=\"hljs-constructor\">Head</span>&gt;\n</code></pre>\n"},{"slug":"04_pagination","filename":"04_pagination","title":"Pagination","date":{"RE_PRIVATE_NONE":true},"draft":false,"meta":{"title":"Pagination"},"summary":"<p>You define the page size in your config, the generator creates the correct paginated pages &amp; API endpoints.</p>\n<pre><code class=\"hljs language-rescript\"><span class=\"hljs-module-identifier\">Pages</span>.useCollection(\n  collection,\n  ~page<span class=\"hljs-operator\">=</span><span class=\"hljs-number\">1</span>,\n  ~direction<span class=\"hljs-operator\">=</span><span class=\"hljs-constructor\">#asc</span>\n)\n</code></pre>\n"},{"slug":"03_simple-api","filename":"03_simple-api","title":"Simple API","date":{"RE_PRIVATE_NONE":true},"draft":false,"meta":{"title":"Simple API"},"summary":"<p><strong>You only need two hooks</strong> to access the data from your markdown files. At build time, the system knows what you read from your components.</p>\n<pre><code class=\"hljs language-rescript\"><span class=\"hljs-comment\">/* items */</span>\n<span class=\"hljs-module-identifier\">Pages</span>.useItem(collection, ~id)\n<span class=\"hljs-comment\">/* collections */</span>\n<span class=\"hljs-module-identifier\">Pages</span>.useCollection(collection)\n</code></pre>\n"},{"slug":"02_over-engineered","filename":"02_over-engineered","title":"React-powered","date":{"RE_PRIVATE_NONE":true},"draft":false,"meta":{"title":"React-powered"},"summary":"<p>When the client boots, there's <strong>no subsequent page reload</strong>, it only fetches the missing data to navigate to the next page (but it works without JS!).</p>\n<pre><code class=\"hljs language-rescript\"><span class=\"hljs-attribute\">@react.component</span>\n<span class=\"hljs-keyword\">let</span> make <span class=\"hljs-operator\">=</span> (~url, ~config) <span class=\"hljs-function\">=&gt;</span> <span class=\"hljs-literal\">{</span>\n  <span class=\"hljs-comment\">/* your app */</span>\n<span class=\"hljs-literal\">}</span>\n</code></pre>\n"},{"slug":"01_markdown","filename":"01_markdown","title":"Markdown-based","date":{"RE_PRIVATE_NONE":true},"draft":false,"meta":{"title":"Markdown-based"},"summary":"<p>Just write markdown files in directories! The directories become <strong>collections</strong>, the markdown files <strong>items</strong>.</p>\n<pre><code class=\"hljs language-md\">---\ntitle: My post\n<span class=\"hljs-section\">date: 2020-11-20\n---</span>\n\nHello!\n</code></pre>\n"}]}
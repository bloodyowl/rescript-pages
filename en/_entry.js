module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/en";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./example/App.bs.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./example/App.bs.js":
/*!***************************!*\
  !*** ./example/App.bs.js ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Generated by ReScript, PLEASE EDIT WITH CARE


var CssJs = __webpack_require__(/*! bs-css-emotion/src/CssJs.bs.js */ "./node_modules/bs-css-emotion/src/CssJs.bs.js");
var Curry = __webpack_require__(/*! bs-platform/lib/js/curry.js */ "./node_modules/bs-platform/lib/js/curry.js");
var Pages = __webpack_require__(/*! ../src/Pages.bs.js */ "./src/Pages.bs.js");
var React = __webpack_require__(/*! react */ "react");
var Belt_Int = __webpack_require__(/*! bs-platform/lib/js/belt_Int.js */ "./node_modules/bs-platform/lib/js/belt_Int.js");
var Belt_Array = __webpack_require__(/*! bs-platform/lib/js/belt_Array.js */ "./node_modules/bs-platform/lib/js/belt_Array.js");
var Belt_Option = __webpack_require__(/*! bs-platform/lib/js/belt_Option.js */ "./node_modules/bs-platform/lib/js/belt_Option.js");

CssJs.$$global("body", [
      CssJs.margin(CssJs.zero),
      CssJs.padding(CssJs.zero),
      CssJs.fontFamilies([
            {
              NAME: "custom",
              VAL: "-apple-system"
            },
            {
              NAME: "custom",
              VAL: "BlinkMacSystemFont"
            },
            {
              NAME: "custom",
              VAL: "SF Pro Display"
            },
            {
              NAME: "custom",
              VAL: "Segoe UI"
            },
            {
              NAME: "custom",
              VAL: "Roboto"
            },
            {
              NAME: "custom",
              VAL: "Oxygen"
            },
            {
              NAME: "custom",
              VAL: "Ubuntu"
            },
            {
              NAME: "custom",
              VAL: "Cantarell"
            },
            {
              NAME: "custom",
              VAL: "Fira Sans"
            },
            {
              NAME: "custom",
              VAL: "Droid Sans"
            },
            {
              NAME: "custom",
              VAL: "Helvetica Neue"
            },
            "sansSerif"
          ])
    ]);

var Styles = {};

var container = CssJs.style([
      CssJs.width(CssJs.pct(100.0)),
      CssJs.maxWidth(CssJs.px(1000)),
      CssJs.marginLeft(CssJs.auto),
      CssJs.marginRight(CssJs.auto)
    ]);

var Styles$1 = {
  container: container
};

function App$WidthContainer(Props) {
  var children = Props.children;
  return React.createElement("div", {
              className: container
            }, children);
}

var WidthContainer = {
  Styles: Styles$1,
  make: App$WidthContainer
};

var container$1 = CssJs.style([CssJs.padding(CssJs.px(20))]);

var title = CssJs.style([
      CssJs.fontSize(CssJs.px(18)),
      CssJs.fontWeight(CssJs.normal)
    ]);

var text = CssJs.style([
      CssJs.fontSize(CssJs.px(14)),
      CssJs.fontWeight(CssJs.normal)
    ]);

var Styles$2 = {
  container: container$1,
  title: title,
  text: text
};

function App$FeatureBlock(Props) {
  var title$1 = Props.title;
  var text$1 = Props.text;
  return React.createElement("div", {
              className: container$1
            }, React.createElement("h2", {
                  className: title
                }, title$1), React.createElement("div", {
                  className: text,
                  dangerouslySetInnerHTML: {
                    __html: text$1
                  }
                }));
}

var FeatureBlock = {
  Styles: Styles$2,
  make: App$FeatureBlock
};

var blocks = CssJs.style([
      CssJs.display(CssJs.flexBox),
      CssJs.flexDirection(CssJs.row),
      CssJs.flexWrap(CssJs.wrap)
    ]);

var block = CssJs.style([CssJs.width(CssJs.pct(33.333))]);

var Styles$3 = {
  blocks: blocks,
  block: block
};

function App$Home(Props) {
  var blocks$1 = Pages.useCollection(undefined, "asc", "features");
  var tmp;
  if (typeof blocks$1 === "number") {
    tmp = null;
  } else {
    var match = blocks$1._0;
    tmp = match.TAG ? null : Belt_Array.map(match._0.items, (function (block$1) {
              return React.createElement("div", {
                          key: block$1.slug,
                          className: block
                        }, React.createElement(App$FeatureBlock, {
                              title: block$1.title,
                              text: block$1.summary
                            }));
            }));
  }
  return React.createElement("div", undefined, React.createElement(App$WidthContainer, {
                  children: React.createElement("div", {
                        className: blocks
                      }, tmp)
                }), React.createElement(Pages.Link.make, {
                  href: "/post/foo",
                  children: "View my super post >"
                }), React.createElement("br", undefined), React.createElement(Pages.Link.make, {
                  href: "/posts",
                  children: "View post list >"
                }));
}

var Home = {
  Styles: Styles$3,
  make: App$Home
};

function App$PostList(Props) {
  var pageOpt = Props.page;
  var page = pageOpt !== undefined ? pageOpt : 1;
  var posts = Pages.useCollection(page, undefined, "posts");
  var tmp;
  if (typeof posts === "number") {
    tmp = "Loading...";
  } else {
    var match = posts._0;
    if (match.TAG) {
      tmp = "Error";
    } else {
      var match$1 = match._0;
      tmp = React.createElement(React.Fragment, undefined, React.createElement("h1", undefined, React.createElement(Pages.Head.make, {
                    children: React.createElement("title", undefined, "Posts, page " + String(page) + " - my website")
                  })), React.createElement("ul", undefined, Belt_Array.map(match$1.items, (function (item) {
                      return React.createElement("li", {
                                  key: item.slug
                                }, React.createElement(Pages.Link.make, {
                                      href: "/post/" + item.slug,
                                      children: item.title
                                    }));
                    }))), match$1.hasPreviousPage ? React.createElement(Pages.Link.make, {
                  href: "/posts/" + String(page - 1 | 0),
                  children: "Previous page"
                }) : null, match$1.hasNextPage ? React.createElement(Pages.Link.make, {
                  href: "/posts/" + String(page + 1 | 0),
                  children: "Next page"
                }) : null);
    }
  }
  return React.createElement(React.Fragment, undefined, tmp);
}

var PostList = {
  make: App$PostList
};

function App$Page(Props) {
  var page = Props.page;
  Pages.useItem("pages", page);
  return React.createElement("div", undefined);
}

var Page = {
  make: App$Page
};

function App$Post(Props) {
  var post = Props.post;
  var post$1 = Pages.useItem("posts", post);
  var tmp;
  if (typeof post$1 === "number") {
    tmp = "Loading...";
  } else {
    var post$2 = post$1._0;
    if (post$2.TAG) {
      tmp = "Error";
    } else {
      var post$3 = post$2._0;
      tmp = React.createElement(React.Fragment, undefined, React.createElement("h1", undefined, React.createElement(Pages.Head.make, {
                    children: null
                  }, React.createElement("title", undefined, post$3.title + " - my website"), React.createElement("meta", {
                        name: "description",
                        value: post$3.title
                      })), post$3.title), "Contents:", React.createElement("div", {
                dangerouslySetInnerHTML: {
                  __html: post$3.body
                }
              }));
    }
  }
  return React.createElement("div", undefined, React.createElement(Pages.Link.make, {
                  href: "/",
                  children: "< Go back to the homepage"
                }), tmp);
}

var Post = {
  make: App$Post
};

var titleLink = CssJs.style([
      CssJs.color(CssJs.currentColor),
      CssJs.textDecoration(CssJs.none)
    ]);

var header = CssJs.style([
      CssJs.textAlign(CssJs.center),
      CssJs.padding(CssJs.px(40)),
      CssJs.paddingTop(CssJs.px(150)),
      CssJs.paddingBottom(CssJs.px(150)),
      CssJs.margin(CssJs.zero),
      CssJs.color(CssJs.hex("fff")),
      CssJs.backgroundColor(CssJs.hex("0A296A"))
    ]);

var title$1 = CssJs.style([CssJs.fontSize(CssJs.px(50))]);

var Styles$4 = {
  titleLink: titleLink,
  header: header,
  title: title$1
};

function App$Header(Props) {
  return React.createElement("div", {
              className: header
            }, React.createElement(Pages.Link.make, {
                  href: "/",
                  className: titleLink,
                  children: React.createElement("h1", {
                        className: title$1
                      }, "ReScript Pages")
                }));
}

var Header = {
  Styles: Styles$4,
  make: App$Header
};

function App$App(Props) {
  var param = Props.url;
  var path = param.path;
  var tmp;
  var exit = 0;
  if (path) {
    var page = path.hd;
    var exit$1 = 0;
    switch (page) {
      case "404.html" :
          if (path.tl) {
            exit = 1;
          } else {
            tmp = React.createElement("div", undefined, "Page not found...");
          }
          break;
      case "post" :
          var match = path.tl;
          if (match) {
            if (match.tl) {
              exit = 1;
            } else {
              tmp = React.createElement(App$Post, {
                    post: match.hd
                  });
            }
          } else {
            exit$1 = 2;
          }
          break;
      case "posts" :
          var match$1 = path.tl;
          if (match$1) {
            if (match$1.tl) {
              exit = 1;
            } else {
              tmp = React.createElement(App$PostList, {
                    page: Belt_Option.getWithDefault(Belt_Int.fromString(match$1.hd), 1)
                  });
            }
          } else {
            tmp = React.createElement(App$PostList, {});
          }
          break;
      default:
        exit$1 = 2;
    }
    if (exit$1 === 2) {
      if (path.tl) {
        exit = 1;
      } else {
        tmp = React.createElement(App$Page, {
              page: page
            });
      }
    }
    
  } else {
    tmp = React.createElement(App$Home, {});
  }
  if (exit === 1) {
    tmp = React.createElement("div", undefined, "Page not found...");
  }
  return React.createElement("div", undefined, React.createElement(Pages.Head.make, {
                  children: React.createElement("style", undefined, "html { font-family: sans-serif }")
                }), React.createElement(App$Header, {}), tmp);
}

var App = {
  make: App$App
};

function getUrlsToPrerender(param) {
  var getAll = param.getAll;
  return Belt_Array.concatMany([
              ["/"],
              Belt_Array.map(Curry._1(getAll, "pages"), (function (slug) {
                      return "/" + slug;
                    })),
              Belt_Array.map(Curry._1(getAll, "posts"), (function (slug) {
                      return "/post/" + slug;
                    })),
              ["/posts"],
              Belt_Array.map(Curry._1(param.getPages, "posts"), (function (page) {
                      return "/posts/" + String(page);
                    })),
              ["404.html"]
            ]);
}

var $$default = Pages.make(App$App, {
      siteTitle: "bloodyowl",
      siteDescription: "My site",
      distDirectory: "dist",
      baseUrl: "https://bloodyowl.io",
      staticsDirectory: "public",
      paginateBy: 2,
      variants: [
        {
          subdirectory: undefined,
          localeFile: undefined,
          contentDirectory: "contents",
          getUrlsToPrerender: getUrlsToPrerender
        },
        {
          subdirectory: "en",
          localeFile: undefined,
          contentDirectory: "contents",
          getUrlsToPrerender: getUrlsToPrerender
        }
      ]
    });

exports.Styles = Styles;
exports.WidthContainer = WidthContainer;
exports.FeatureBlock = FeatureBlock;
exports.Home = Home;
exports.PostList = PostList;
exports.Page = Page;
exports.Post = Post;
exports.Header = Header;
exports.App = App;
exports.getUrlsToPrerender = getUrlsToPrerender;
exports.$$default = $$default;
exports.default = $$default;
exports.__esModule = true;
/*  Not a pure module */


/***/ }),

/***/ "./node_modules/@emotion/cache/dist/cache.esm.js":
/*!*******************************************************!*\
  !*** ./node_modules/@emotion/cache/dist/cache.esm.js ***!
  \*******************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _emotion_sheet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @emotion/sheet */ "./node_modules/@emotion/sheet/dist/sheet.esm.js");
/* harmony import */ var _emotion_stylis__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @emotion/stylis */ "./node_modules/@emotion/stylis/dist/stylis.esm.js");
/* harmony import */ var _emotion_weak_memoize__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @emotion/weak-memoize */ "./node_modules/@emotion/weak-memoize/dist/weak-memoize.esm.js");




// https://github.com/thysultan/stylis.js/tree/master/plugins/rule-sheet
// inlined to avoid umd wrapper and peerDep warnings/installing stylis
// since we use stylis after closure compiler
var delimiter = '/*|*/';
var needle = delimiter + '}';

function toSheet(block) {
  if (block) {
    Sheet.current.insert(block + '}');
  }
}

var Sheet = {
  current: null
};
var ruleSheet = function ruleSheet(context, content, selectors, parents, line, column, length, ns, depth, at) {
  switch (context) {
    // property
    case 1:
      {
        switch (content.charCodeAt(0)) {
          case 64:
            {
              // @import
              Sheet.current.insert(content + ';');
              return '';
            }
          // charcode for l

          case 108:
            {
              // charcode for b
              // this ignores label
              if (content.charCodeAt(2) === 98) {
                return '';
              }
            }
        }

        break;
      }
    // selector

    case 2:
      {
        if (ns === 0) return content + delimiter;
        break;
      }
    // at-rule

    case 3:
      {
        switch (ns) {
          // @font-face, @page
          case 102:
          case 112:
            {
              Sheet.current.insert(selectors[0] + content);
              return '';
            }

          default:
            {
              return content + (at === 0 ? delimiter : '');
            }
        }
      }

    case -2:
      {
        content.split(needle).forEach(toSheet);
      }
  }
};
var removeLabel = function removeLabel(context, content) {
  if (context === 1 && // charcode for l
  content.charCodeAt(0) === 108 && // charcode for b
  content.charCodeAt(2) === 98 // this ignores label
  ) {
      return '';
    }
};

var isBrowser = typeof document !== 'undefined';
var rootServerStylisCache = {};
var getServerStylisCache = isBrowser ? undefined : Object(_emotion_weak_memoize__WEBPACK_IMPORTED_MODULE_2__["default"])(function () {
  var getCache = Object(_emotion_weak_memoize__WEBPACK_IMPORTED_MODULE_2__["default"])(function () {
    return {};
  });
  var prefixTrueCache = {};
  var prefixFalseCache = {};
  return function (prefix) {
    if (prefix === undefined || prefix === true) {
      return prefixTrueCache;
    }

    if (prefix === false) {
      return prefixFalseCache;
    }

    return getCache(prefix);
  };
});

var createCache = function createCache(options) {
  if (options === undefined) options = {};
  var key = options.key || 'css';
  var stylisOptions;

  if (options.prefix !== undefined) {
    stylisOptions = {
      prefix: options.prefix
    };
  }

  var stylis = new _emotion_stylis__WEBPACK_IMPORTED_MODULE_1__["default"](stylisOptions);

  if (true) {
    // $FlowFixMe
    if (/[^a-z-]/.test(key)) {
      throw new Error("Emotion key must only contain lower case alphabetical characters and - but \"" + key + "\" was passed");
    }
  }

  var inserted = {}; // $FlowFixMe

  var container;

  if (isBrowser) {
    container = options.container || document.head;
    var nodes = document.querySelectorAll("style[data-emotion-" + key + "]");
    Array.prototype.forEach.call(nodes, function (node) {
      var attrib = node.getAttribute("data-emotion-" + key); // $FlowFixMe

      attrib.split(' ').forEach(function (id) {
        inserted[id] = true;
      });

      if (node.parentNode !== container) {
        container.appendChild(node);
      }
    });
  }

  var _insert;

  if (isBrowser) {
    stylis.use(options.stylisPlugins)(ruleSheet);

    _insert = function insert(selector, serialized, sheet, shouldCache) {
      var name = serialized.name;
      Sheet.current = sheet;

      if ( true && serialized.map !== undefined) {
        var map = serialized.map;
        Sheet.current = {
          insert: function insert(rule) {
            sheet.insert(rule + map);
          }
        };
      }

      stylis(selector, serialized.styles);

      if (shouldCache) {
        cache.inserted[name] = true;
      }
    };
  } else {
    stylis.use(removeLabel);
    var serverStylisCache = rootServerStylisCache;

    if (options.stylisPlugins || options.prefix !== undefined) {
      stylis.use(options.stylisPlugins); // $FlowFixMe

      serverStylisCache = getServerStylisCache(options.stylisPlugins || rootServerStylisCache)(options.prefix);
    }

    var getRules = function getRules(selector, serialized) {
      var name = serialized.name;

      if (serverStylisCache[name] === undefined) {
        serverStylisCache[name] = stylis(selector, serialized.styles);
      }

      return serverStylisCache[name];
    };

    _insert = function _insert(selector, serialized, sheet, shouldCache) {
      var name = serialized.name;
      var rules = getRules(selector, serialized);

      if (cache.compat === undefined) {
        // in regular mode, we don't set the styles on the inserted cache
        // since we don't need to and that would be wasting memory
        // we return them so that they are rendered in a style tag
        if (shouldCache) {
          cache.inserted[name] = true;
        }

        if ( // using === development instead of !== production
        // because if people do ssr in tests, the source maps showing up would be annoying
         true && serialized.map !== undefined) {
          return rules + serialized.map;
        }

        return rules;
      } else {
        // in compat mode, we put the styles on the inserted cache so
        // that emotion-server can pull out the styles
        // except when we don't want to cache it which was in Global but now
        // is nowhere but we don't want to do a major right now
        // and just in case we're going to leave the case here
        // it's also not affecting client side bundle size
        // so it's really not a big deal
        if (shouldCache) {
          cache.inserted[name] = rules;
        } else {
          return rules;
        }
      }
    };
  }

  if (true) {
    // https://esbench.com/bench/5bf7371a4cd7e6009ef61d0a
    var commentStart = /\/\*/g;
    var commentEnd = /\*\//g;
    stylis.use(function (context, content) {
      switch (context) {
        case -1:
          {
            while (commentStart.test(content)) {
              commentEnd.lastIndex = commentStart.lastIndex;

              if (commentEnd.test(content)) {
                commentStart.lastIndex = commentEnd.lastIndex;
                continue;
              }

              throw new Error('Your styles have an unterminated comment ("/*" without corresponding "*/").');
            }

            commentStart.lastIndex = 0;
            break;
          }
      }
    });
    stylis.use(function (context, content, selectors) {
      switch (context) {
        case -1:
          {
            var flag = 'emotion-disable-server-rendering-unsafe-selector-warning-please-do-not-use-this-the-warning-exists-for-a-reason';
            var unsafePseudoClasses = content.match(/(:first|:nth|:nth-last)-child/g);

            if (unsafePseudoClasses && cache.compat !== true) {
              unsafePseudoClasses.forEach(function (unsafePseudoClass) {
                var ignoreRegExp = new RegExp(unsafePseudoClass + ".*\\/\\* " + flag + " \\*\\/");
                var ignore = ignoreRegExp.test(content);

                if (unsafePseudoClass && !ignore) {
                  console.error("The pseudo class \"" + unsafePseudoClass + "\" is potentially unsafe when doing server-side rendering. Try changing it to \"" + unsafePseudoClass.split('-child')[0] + "-of-type\".");
                }
              });
            }

            break;
          }
      }
    });
  }

  var cache = {
    key: key,
    sheet: new _emotion_sheet__WEBPACK_IMPORTED_MODULE_0__["StyleSheet"]({
      key: key,
      container: container,
      nonce: options.nonce,
      speedy: options.speedy
    }),
    nonce: options.nonce,
    inserted: inserted,
    registered: {},
    insert: _insert
  };
  return cache;
};

/* harmony default export */ __webpack_exports__["default"] = (createCache);


/***/ }),

/***/ "./node_modules/@emotion/hash/dist/hash.esm.js":
/*!*****************************************************!*\
  !*** ./node_modules/@emotion/hash/dist/hash.esm.js ***!
  \*****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* eslint-disable */
// Inspired by https://github.com/garycourt/murmurhash-js
// Ported from https://github.com/aappleby/smhasher/blob/61a0530f28277f2e850bfc39600ce61d02b518de/src/MurmurHash2.cpp#L37-L86
function murmur2(str) {
  // 'm' and 'r' are mixing constants generated offline.
  // They're not really 'magic', they just happen to work well.
  // const m = 0x5bd1e995;
  // const r = 24;
  // Initialize the hash
  var h = 0; // Mix 4 bytes at a time into the hash

  var k,
      i = 0,
      len = str.length;

  for (; len >= 4; ++i, len -= 4) {
    k = str.charCodeAt(i) & 0xff | (str.charCodeAt(++i) & 0xff) << 8 | (str.charCodeAt(++i) & 0xff) << 16 | (str.charCodeAt(++i) & 0xff) << 24;
    k =
    /* Math.imul(k, m): */
    (k & 0xffff) * 0x5bd1e995 + ((k >>> 16) * 0xe995 << 16);
    k ^=
    /* k >>> r: */
    k >>> 24;
    h =
    /* Math.imul(k, m): */
    (k & 0xffff) * 0x5bd1e995 + ((k >>> 16) * 0xe995 << 16) ^
    /* Math.imul(h, m): */
    (h & 0xffff) * 0x5bd1e995 + ((h >>> 16) * 0xe995 << 16);
  } // Handle the last few bytes of the input array


  switch (len) {
    case 3:
      h ^= (str.charCodeAt(i + 2) & 0xff) << 16;

    case 2:
      h ^= (str.charCodeAt(i + 1) & 0xff) << 8;

    case 1:
      h ^= str.charCodeAt(i) & 0xff;
      h =
      /* Math.imul(h, m): */
      (h & 0xffff) * 0x5bd1e995 + ((h >>> 16) * 0xe995 << 16);
  } // Do a few final mixes of the hash to ensure the last few
  // bytes are well-incorporated.


  h ^= h >>> 13;
  h =
  /* Math.imul(h, m): */
  (h & 0xffff) * 0x5bd1e995 + ((h >>> 16) * 0xe995 << 16);
  return ((h ^ h >>> 15) >>> 0).toString(36);
}

/* harmony default export */ __webpack_exports__["default"] = (murmur2);


/***/ }),

/***/ "./node_modules/@emotion/memoize/dist/memoize.esm.js":
/*!***********************************************************!*\
  !*** ./node_modules/@emotion/memoize/dist/memoize.esm.js ***!
  \***********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
function memoize(fn) {
  var cache = {};
  return function (arg) {
    if (cache[arg] === undefined) cache[arg] = fn(arg);
    return cache[arg];
  };
}

/* harmony default export */ __webpack_exports__["default"] = (memoize);


/***/ }),

/***/ "./node_modules/@emotion/serialize/dist/serialize.esm.js":
/*!***************************************************************!*\
  !*** ./node_modules/@emotion/serialize/dist/serialize.esm.js ***!
  \***************************************************************/
/*! exports provided: serializeStyles */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "serializeStyles", function() { return serializeStyles; });
/* harmony import */ var _emotion_hash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @emotion/hash */ "./node_modules/@emotion/hash/dist/hash.esm.js");
/* harmony import */ var _emotion_unitless__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @emotion/unitless */ "./node_modules/@emotion/unitless/dist/unitless.esm.js");
/* harmony import */ var _emotion_memoize__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @emotion/memoize */ "./node_modules/@emotion/memoize/dist/memoize.esm.js");




var ILLEGAL_ESCAPE_SEQUENCE_ERROR = "You have illegal escape sequence in your template literal, most likely inside content's property value.\nBecause you write your CSS inside a JavaScript string you actually have to do double escaping, so for example \"content: '\\00d7';\" should become \"content: '\\\\00d7';\".\nYou can read more about this here:\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#ES2018_revision_of_illegal_escape_sequences";
var UNDEFINED_AS_OBJECT_KEY_ERROR = "You have passed in falsy value as style object's key (can happen when in example you pass unexported component as computed key).";
var hyphenateRegex = /[A-Z]|^ms/g;
var animationRegex = /_EMO_([^_]+?)_([^]*?)_EMO_/g;

var isCustomProperty = function isCustomProperty(property) {
  return property.charCodeAt(1) === 45;
};

var isProcessableValue = function isProcessableValue(value) {
  return value != null && typeof value !== 'boolean';
};

var processStyleName = Object(_emotion_memoize__WEBPACK_IMPORTED_MODULE_2__["default"])(function (styleName) {
  return isCustomProperty(styleName) ? styleName : styleName.replace(hyphenateRegex, '-$&').toLowerCase();
});

var processStyleValue = function processStyleValue(key, value) {
  switch (key) {
    case 'animation':
    case 'animationName':
      {
        if (typeof value === 'string') {
          return value.replace(animationRegex, function (match, p1, p2) {
            cursor = {
              name: p1,
              styles: p2,
              next: cursor
            };
            return p1;
          });
        }
      }
  }

  if (_emotion_unitless__WEBPACK_IMPORTED_MODULE_1__["default"][key] !== 1 && !isCustomProperty(key) && typeof value === 'number' && value !== 0) {
    return value + 'px';
  }

  return value;
};

if (true) {
  var contentValuePattern = /(attr|calc|counters?|url)\(/;
  var contentValues = ['normal', 'none', 'counter', 'open-quote', 'close-quote', 'no-open-quote', 'no-close-quote', 'initial', 'inherit', 'unset'];
  var oldProcessStyleValue = processStyleValue;
  var msPattern = /^-ms-/;
  var hyphenPattern = /-(.)/g;
  var hyphenatedCache = {};

  processStyleValue = function processStyleValue(key, value) {
    if (key === 'content') {
      if (typeof value !== 'string' || contentValues.indexOf(value) === -1 && !contentValuePattern.test(value) && (value.charAt(0) !== value.charAt(value.length - 1) || value.charAt(0) !== '"' && value.charAt(0) !== "'")) {
        console.error("You seem to be using a value for 'content' without quotes, try replacing it with `content: '\"" + value + "\"'`");
      }
    }

    var processed = oldProcessStyleValue(key, value);

    if (processed !== '' && !isCustomProperty(key) && key.indexOf('-') !== -1 && hyphenatedCache[key] === undefined) {
      hyphenatedCache[key] = true;
      console.error("Using kebab-case for css properties in objects is not supported. Did you mean " + key.replace(msPattern, 'ms-').replace(hyphenPattern, function (str, _char) {
        return _char.toUpperCase();
      }) + "?");
    }

    return processed;
  };
}

var shouldWarnAboutInterpolatingClassNameFromCss = true;

function handleInterpolation(mergedProps, registered, interpolation, couldBeSelectorInterpolation) {
  if (interpolation == null) {
    return '';
  }

  if (interpolation.__emotion_styles !== undefined) {
    if ( true && interpolation.toString() === 'NO_COMPONENT_SELECTOR') {
      throw new Error('Component selectors can only be used in conjunction with babel-plugin-emotion.');
    }

    return interpolation;
  }

  switch (typeof interpolation) {
    case 'boolean':
      {
        return '';
      }

    case 'object':
      {
        if (interpolation.anim === 1) {
          cursor = {
            name: interpolation.name,
            styles: interpolation.styles,
            next: cursor
          };
          return interpolation.name;
        }

        if (interpolation.styles !== undefined) {
          var next = interpolation.next;

          if (next !== undefined) {
            // not the most efficient thing ever but this is a pretty rare case
            // and there will be very few iterations of this generally
            while (next !== undefined) {
              cursor = {
                name: next.name,
                styles: next.styles,
                next: cursor
              };
              next = next.next;
            }
          }

          var styles = interpolation.styles + ";";

          if ( true && interpolation.map !== undefined) {
            styles += interpolation.map;
          }

          return styles;
        }

        return createStringFromObject(mergedProps, registered, interpolation);
      }

    case 'function':
      {
        if (mergedProps !== undefined) {
          var previousCursor = cursor;
          var result = interpolation(mergedProps);
          cursor = previousCursor;
          return handleInterpolation(mergedProps, registered, result, couldBeSelectorInterpolation);
        } else if (true) {
          console.error('Functions that are interpolated in css calls will be stringified.\n' + 'If you want to have a css call based on props, create a function that returns a css call like this\n' + 'let dynamicStyle = (props) => css`color: ${props.color}`\n' + 'It can be called directly with props or interpolated in a styled call like this\n' + "let SomeComponent = styled('div')`${dynamicStyle}`");
        }

        break;
      }

    case 'string':
      if (true) {
        var matched = [];
        var replaced = interpolation.replace(animationRegex, function (match, p1, p2) {
          var fakeVarName = "animation" + matched.length;
          matched.push("const " + fakeVarName + " = keyframes`" + p2.replace(/^@keyframes animation-\w+/, '') + "`");
          return "${" + fakeVarName + "}";
        });

        if (matched.length) {
          console.error('`keyframes` output got interpolated into plain string, please wrap it with `css`.\n\n' + 'Instead of doing this:\n\n' + [].concat(matched, ["`" + replaced + "`"]).join('\n') + '\n\nYou should wrap it with `css` like this:\n\n' + ("css`" + replaced + "`"));
        }
      }

      break;
  } // finalize string values (regular strings and functions interpolated into css calls)


  if (registered == null) {
    return interpolation;
  }

  var cached = registered[interpolation];

  if ( true && couldBeSelectorInterpolation && shouldWarnAboutInterpolatingClassNameFromCss && cached !== undefined) {
    console.error('Interpolating a className from css`` is not recommended and will cause problems with composition.\n' + 'Interpolating a className from css`` will be completely unsupported in a future major version of Emotion');
    shouldWarnAboutInterpolatingClassNameFromCss = false;
  }

  return cached !== undefined && !couldBeSelectorInterpolation ? cached : interpolation;
}

function createStringFromObject(mergedProps, registered, obj) {
  var string = '';

  if (Array.isArray(obj)) {
    for (var i = 0; i < obj.length; i++) {
      string += handleInterpolation(mergedProps, registered, obj[i], false);
    }
  } else {
    for (var _key in obj) {
      var value = obj[_key];

      if (typeof value !== 'object') {
        if (registered != null && registered[value] !== undefined) {
          string += _key + "{" + registered[value] + "}";
        } else if (isProcessableValue(value)) {
          string += processStyleName(_key) + ":" + processStyleValue(_key, value) + ";";
        }
      } else {
        if (_key === 'NO_COMPONENT_SELECTOR' && "development" !== 'production') {
          throw new Error('Component selectors can only be used in conjunction with babel-plugin-emotion.');
        }

        if (Array.isArray(value) && typeof value[0] === 'string' && (registered == null || registered[value[0]] === undefined)) {
          for (var _i = 0; _i < value.length; _i++) {
            if (isProcessableValue(value[_i])) {
              string += processStyleName(_key) + ":" + processStyleValue(_key, value[_i]) + ";";
            }
          }
        } else {
          var interpolated = handleInterpolation(mergedProps, registered, value, false);

          switch (_key) {
            case 'animation':
            case 'animationName':
              {
                string += processStyleName(_key) + ":" + interpolated + ";";
                break;
              }

            default:
              {
                if ( true && _key === 'undefined') {
                  console.error(UNDEFINED_AS_OBJECT_KEY_ERROR);
                }

                string += _key + "{" + interpolated + "}";
              }
          }
        }
      }
    }
  }

  return string;
}

var labelPattern = /label:\s*([^\s;\n{]+)\s*;/g;
var sourceMapPattern;

if (true) {
  sourceMapPattern = /\/\*#\ssourceMappingURL=data:application\/json;\S+\s+\*\//;
} // this is the cursor for keyframes
// keyframes are stored on the SerializedStyles object as a linked list


var cursor;
var serializeStyles = function serializeStyles(args, registered, mergedProps) {
  if (args.length === 1 && typeof args[0] === 'object' && args[0] !== null && args[0].styles !== undefined) {
    return args[0];
  }

  var stringMode = true;
  var styles = '';
  cursor = undefined;
  var strings = args[0];

  if (strings == null || strings.raw === undefined) {
    stringMode = false;
    styles += handleInterpolation(mergedProps, registered, strings, false);
  } else {
    if ( true && strings[0] === undefined) {
      console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);
    }

    styles += strings[0];
  } // we start at 1 since we've already handled the first arg


  for (var i = 1; i < args.length; i++) {
    styles += handleInterpolation(mergedProps, registered, args[i], styles.charCodeAt(styles.length - 1) === 46);

    if (stringMode) {
      if ( true && strings[i] === undefined) {
        console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);
      }

      styles += strings[i];
    }
  }

  var sourceMap;

  if (true) {
    styles = styles.replace(sourceMapPattern, function (match) {
      sourceMap = match;
      return '';
    });
  } // using a global regex with .exec is stateful so lastIndex has to be reset each time


  labelPattern.lastIndex = 0;
  var identifierName = '';
  var match; // https://esbench.com/bench/5b809c2cf2949800a0f61fb5

  while ((match = labelPattern.exec(styles)) !== null) {
    identifierName += '-' + // $FlowFixMe we know it's not null
    match[1];
  }

  var name = Object(_emotion_hash__WEBPACK_IMPORTED_MODULE_0__["default"])(styles) + identifierName;

  if (true) {
    // $FlowFixMe SerializedStyles type doesn't have toString property (and we don't want to add it)
    return {
      name: name,
      styles: styles,
      map: sourceMap,
      next: cursor,
      toString: function toString() {
        return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
      }
    };
  }

  return {
    name: name,
    styles: styles,
    next: cursor
  };
};




/***/ }),

/***/ "./node_modules/@emotion/sheet/dist/sheet.esm.js":
/*!*******************************************************!*\
  !*** ./node_modules/@emotion/sheet/dist/sheet.esm.js ***!
  \*******************************************************/
/*! exports provided: StyleSheet */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StyleSheet", function() { return StyleSheet; });
/*

Based off glamor's StyleSheet, thanks Sunil ❤️

high performance StyleSheet for css-in-js systems

- uses multiple style tags behind the scenes for millions of rules
- uses `insertRule` for appending in production for *much* faster performance

// usage

import { StyleSheet } from '@emotion/sheet'

let styleSheet = new StyleSheet({ key: '', container: document.head })

styleSheet.insert('#box { border: 1px solid red; }')
- appends a css rule into the stylesheet

styleSheet.flush()
- empties the stylesheet of all its contents

*/
// $FlowFixMe
function sheetForTag(tag) {
  if (tag.sheet) {
    // $FlowFixMe
    return tag.sheet;
  } // this weirdness brought to you by firefox

  /* istanbul ignore next */


  for (var i = 0; i < document.styleSheets.length; i++) {
    if (document.styleSheets[i].ownerNode === tag) {
      // $FlowFixMe
      return document.styleSheets[i];
    }
  }
}

function createStyleElement(options) {
  var tag = document.createElement('style');
  tag.setAttribute('data-emotion', options.key);

  if (options.nonce !== undefined) {
    tag.setAttribute('nonce', options.nonce);
  }

  tag.appendChild(document.createTextNode(''));
  return tag;
}

var StyleSheet =
/*#__PURE__*/
function () {
  function StyleSheet(options) {
    this.isSpeedy = options.speedy === undefined ? "development" === 'production' : options.speedy;
    this.tags = [];
    this.ctr = 0;
    this.nonce = options.nonce; // key is the value of the data-emotion attribute, it's used to identify different sheets

    this.key = options.key;
    this.container = options.container;
    this.before = null;
  }

  var _proto = StyleSheet.prototype;

  _proto.insert = function insert(rule) {
    // the max length is how many rules we have per style tag, it's 65000 in speedy mode
    // it's 1 in dev because we insert source maps that map a single rule to a location
    // and you can only have one source map per style tag
    if (this.ctr % (this.isSpeedy ? 65000 : 1) === 0) {
      var _tag = createStyleElement(this);

      var before;

      if (this.tags.length === 0) {
        before = this.before;
      } else {
        before = this.tags[this.tags.length - 1].nextSibling;
      }

      this.container.insertBefore(_tag, before);
      this.tags.push(_tag);
    }

    var tag = this.tags[this.tags.length - 1];

    if (this.isSpeedy) {
      var sheet = sheetForTag(tag);

      try {
        // this is a really hot path
        // we check the second character first because having "i"
        // as the second character will happen less often than
        // having "@" as the first character
        var isImportRule = rule.charCodeAt(1) === 105 && rule.charCodeAt(0) === 64; // this is the ultrafast version, works across browsers
        // the big drawback is that the css won't be editable in devtools

        sheet.insertRule(rule, // we need to insert @import rules before anything else
        // otherwise there will be an error
        // technically this means that the @import rules will
        // _usually_(not always since there could be multiple style tags)
        // be the first ones in prod and generally later in dev
        // this shouldn't really matter in the real world though
        // @import is generally only used for font faces from google fonts and etc.
        // so while this could be technically correct then it would be slower and larger
        // for a tiny bit of correctness that won't matter in the real world
        isImportRule ? 0 : sheet.cssRules.length);
      } catch (e) {
        if (true) {
          console.warn("There was a problem inserting the following rule: \"" + rule + "\"", e);
        }
      }
    } else {
      tag.appendChild(document.createTextNode(rule));
    }

    this.ctr++;
  };

  _proto.flush = function flush() {
    // $FlowFixMe
    this.tags.forEach(function (tag) {
      return tag.parentNode.removeChild(tag);
    });
    this.tags = [];
    this.ctr = 0;
  };

  return StyleSheet;
}();




/***/ }),

/***/ "./node_modules/@emotion/stylis/dist/stylis.esm.js":
/*!*********************************************************!*\
  !*** ./node_modules/@emotion/stylis/dist/stylis.esm.js ***!
  \*********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
function stylis_min (W) {
  function M(d, c, e, h, a) {
    for (var m = 0, b = 0, v = 0, n = 0, q, g, x = 0, K = 0, k, u = k = q = 0, l = 0, r = 0, I = 0, t = 0, B = e.length, J = B - 1, y, f = '', p = '', F = '', G = '', C; l < B;) {
      g = e.charCodeAt(l);
      l === J && 0 !== b + n + v + m && (0 !== b && (g = 47 === b ? 10 : 47), n = v = m = 0, B++, J++);

      if (0 === b + n + v + m) {
        if (l === J && (0 < r && (f = f.replace(N, '')), 0 < f.trim().length)) {
          switch (g) {
            case 32:
            case 9:
            case 59:
            case 13:
            case 10:
              break;

            default:
              f += e.charAt(l);
          }

          g = 59;
        }

        switch (g) {
          case 123:
            f = f.trim();
            q = f.charCodeAt(0);
            k = 1;

            for (t = ++l; l < B;) {
              switch (g = e.charCodeAt(l)) {
                case 123:
                  k++;
                  break;

                case 125:
                  k--;
                  break;

                case 47:
                  switch (g = e.charCodeAt(l + 1)) {
                    case 42:
                    case 47:
                      a: {
                        for (u = l + 1; u < J; ++u) {
                          switch (e.charCodeAt(u)) {
                            case 47:
                              if (42 === g && 42 === e.charCodeAt(u - 1) && l + 2 !== u) {
                                l = u + 1;
                                break a;
                              }

                              break;

                            case 10:
                              if (47 === g) {
                                l = u + 1;
                                break a;
                              }

                          }
                        }

                        l = u;
                      }

                  }

                  break;

                case 91:
                  g++;

                case 40:
                  g++;

                case 34:
                case 39:
                  for (; l++ < J && e.charCodeAt(l) !== g;) {
                  }

              }

              if (0 === k) break;
              l++;
            }

            k = e.substring(t, l);
            0 === q && (q = (f = f.replace(ca, '').trim()).charCodeAt(0));

            switch (q) {
              case 64:
                0 < r && (f = f.replace(N, ''));
                g = f.charCodeAt(1);

                switch (g) {
                  case 100:
                  case 109:
                  case 115:
                  case 45:
                    r = c;
                    break;

                  default:
                    r = O;
                }

                k = M(c, r, k, g, a + 1);
                t = k.length;
                0 < A && (r = X(O, f, I), C = H(3, k, r, c, D, z, t, g, a, h), f = r.join(''), void 0 !== C && 0 === (t = (k = C.trim()).length) && (g = 0, k = ''));
                if (0 < t) switch (g) {
                  case 115:
                    f = f.replace(da, ea);

                  case 100:
                  case 109:
                  case 45:
                    k = f + '{' + k + '}';
                    break;

                  case 107:
                    f = f.replace(fa, '$1 $2');
                    k = f + '{' + k + '}';
                    k = 1 === w || 2 === w && L('@' + k, 3) ? '@-webkit-' + k + '@' + k : '@' + k;
                    break;

                  default:
                    k = f + k, 112 === h && (k = (p += k, ''));
                } else k = '';
                break;

              default:
                k = M(c, X(c, f, I), k, h, a + 1);
            }

            F += k;
            k = I = r = u = q = 0;
            f = '';
            g = e.charCodeAt(++l);
            break;

          case 125:
          case 59:
            f = (0 < r ? f.replace(N, '') : f).trim();
            if (1 < (t = f.length)) switch (0 === u && (q = f.charCodeAt(0), 45 === q || 96 < q && 123 > q) && (t = (f = f.replace(' ', ':')).length), 0 < A && void 0 !== (C = H(1, f, c, d, D, z, p.length, h, a, h)) && 0 === (t = (f = C.trim()).length) && (f = '\x00\x00'), q = f.charCodeAt(0), g = f.charCodeAt(1), q) {
              case 0:
                break;

              case 64:
                if (105 === g || 99 === g) {
                  G += f + e.charAt(l);
                  break;
                }

              default:
                58 !== f.charCodeAt(t - 1) && (p += P(f, q, g, f.charCodeAt(2)));
            }
            I = r = u = q = 0;
            f = '';
            g = e.charCodeAt(++l);
        }
      }

      switch (g) {
        case 13:
        case 10:
          47 === b ? b = 0 : 0 === 1 + q && 107 !== h && 0 < f.length && (r = 1, f += '\x00');
          0 < A * Y && H(0, f, c, d, D, z, p.length, h, a, h);
          z = 1;
          D++;
          break;

        case 59:
        case 125:
          if (0 === b + n + v + m) {
            z++;
            break;
          }

        default:
          z++;
          y = e.charAt(l);

          switch (g) {
            case 9:
            case 32:
              if (0 === n + m + b) switch (x) {
                case 44:
                case 58:
                case 9:
                case 32:
                  y = '';
                  break;

                default:
                  32 !== g && (y = ' ');
              }
              break;

            case 0:
              y = '\\0';
              break;

            case 12:
              y = '\\f';
              break;

            case 11:
              y = '\\v';
              break;

            case 38:
              0 === n + b + m && (r = I = 1, y = '\f' + y);
              break;

            case 108:
              if (0 === n + b + m + E && 0 < u) switch (l - u) {
                case 2:
                  112 === x && 58 === e.charCodeAt(l - 3) && (E = x);

                case 8:
                  111 === K && (E = K);
              }
              break;

            case 58:
              0 === n + b + m && (u = l);
              break;

            case 44:
              0 === b + v + n + m && (r = 1, y += '\r');
              break;

            case 34:
            case 39:
              0 === b && (n = n === g ? 0 : 0 === n ? g : n);
              break;

            case 91:
              0 === n + b + v && m++;
              break;

            case 93:
              0 === n + b + v && m--;
              break;

            case 41:
              0 === n + b + m && v--;
              break;

            case 40:
              if (0 === n + b + m) {
                if (0 === q) switch (2 * x + 3 * K) {
                  case 533:
                    break;

                  default:
                    q = 1;
                }
                v++;
              }

              break;

            case 64:
              0 === b + v + n + m + u + k && (k = 1);
              break;

            case 42:
            case 47:
              if (!(0 < n + m + v)) switch (b) {
                case 0:
                  switch (2 * g + 3 * e.charCodeAt(l + 1)) {
                    case 235:
                      b = 47;
                      break;

                    case 220:
                      t = l, b = 42;
                  }

                  break;

                case 42:
                  47 === g && 42 === x && t + 2 !== l && (33 === e.charCodeAt(t + 2) && (p += e.substring(t, l + 1)), y = '', b = 0);
              }
          }

          0 === b && (f += y);
      }

      K = x;
      x = g;
      l++;
    }

    t = p.length;

    if (0 < t) {
      r = c;
      if (0 < A && (C = H(2, p, r, d, D, z, t, h, a, h), void 0 !== C && 0 === (p = C).length)) return G + p + F;
      p = r.join(',') + '{' + p + '}';

      if (0 !== w * E) {
        2 !== w || L(p, 2) || (E = 0);

        switch (E) {
          case 111:
            p = p.replace(ha, ':-moz-$1') + p;
            break;

          case 112:
            p = p.replace(Q, '::-webkit-input-$1') + p.replace(Q, '::-moz-$1') + p.replace(Q, ':-ms-input-$1') + p;
        }

        E = 0;
      }
    }

    return G + p + F;
  }

  function X(d, c, e) {
    var h = c.trim().split(ia);
    c = h;
    var a = h.length,
        m = d.length;

    switch (m) {
      case 0:
      case 1:
        var b = 0;

        for (d = 0 === m ? '' : d[0] + ' '; b < a; ++b) {
          c[b] = Z(d, c[b], e).trim();
        }

        break;

      default:
        var v = b = 0;

        for (c = []; b < a; ++b) {
          for (var n = 0; n < m; ++n) {
            c[v++] = Z(d[n] + ' ', h[b], e).trim();
          }
        }

    }

    return c;
  }

  function Z(d, c, e) {
    var h = c.charCodeAt(0);
    33 > h && (h = (c = c.trim()).charCodeAt(0));

    switch (h) {
      case 38:
        return c.replace(F, '$1' + d.trim());

      case 58:
        return d.trim() + c.replace(F, '$1' + d.trim());

      default:
        if (0 < 1 * e && 0 < c.indexOf('\f')) return c.replace(F, (58 === d.charCodeAt(0) ? '' : '$1') + d.trim());
    }

    return d + c;
  }

  function P(d, c, e, h) {
    var a = d + ';',
        m = 2 * c + 3 * e + 4 * h;

    if (944 === m) {
      d = a.indexOf(':', 9) + 1;
      var b = a.substring(d, a.length - 1).trim();
      b = a.substring(0, d).trim() + b + ';';
      return 1 === w || 2 === w && L(b, 1) ? '-webkit-' + b + b : b;
    }

    if (0 === w || 2 === w && !L(a, 1)) return a;

    switch (m) {
      case 1015:
        return 97 === a.charCodeAt(10) ? '-webkit-' + a + a : a;

      case 951:
        return 116 === a.charCodeAt(3) ? '-webkit-' + a + a : a;

      case 963:
        return 110 === a.charCodeAt(5) ? '-webkit-' + a + a : a;

      case 1009:
        if (100 !== a.charCodeAt(4)) break;

      case 969:
      case 942:
        return '-webkit-' + a + a;

      case 978:
        return '-webkit-' + a + '-moz-' + a + a;

      case 1019:
      case 983:
        return '-webkit-' + a + '-moz-' + a + '-ms-' + a + a;

      case 883:
        if (45 === a.charCodeAt(8)) return '-webkit-' + a + a;
        if (0 < a.indexOf('image-set(', 11)) return a.replace(ja, '$1-webkit-$2') + a;
        break;

      case 932:
        if (45 === a.charCodeAt(4)) switch (a.charCodeAt(5)) {
          case 103:
            return '-webkit-box-' + a.replace('-grow', '') + '-webkit-' + a + '-ms-' + a.replace('grow', 'positive') + a;

          case 115:
            return '-webkit-' + a + '-ms-' + a.replace('shrink', 'negative') + a;

          case 98:
            return '-webkit-' + a + '-ms-' + a.replace('basis', 'preferred-size') + a;
        }
        return '-webkit-' + a + '-ms-' + a + a;

      case 964:
        return '-webkit-' + a + '-ms-flex-' + a + a;

      case 1023:
        if (99 !== a.charCodeAt(8)) break;
        b = a.substring(a.indexOf(':', 15)).replace('flex-', '').replace('space-between', 'justify');
        return '-webkit-box-pack' + b + '-webkit-' + a + '-ms-flex-pack' + b + a;

      case 1005:
        return ka.test(a) ? a.replace(aa, ':-webkit-') + a.replace(aa, ':-moz-') + a : a;

      case 1e3:
        b = a.substring(13).trim();
        c = b.indexOf('-') + 1;

        switch (b.charCodeAt(0) + b.charCodeAt(c)) {
          case 226:
            b = a.replace(G, 'tb');
            break;

          case 232:
            b = a.replace(G, 'tb-rl');
            break;

          case 220:
            b = a.replace(G, 'lr');
            break;

          default:
            return a;
        }

        return '-webkit-' + a + '-ms-' + b + a;

      case 1017:
        if (-1 === a.indexOf('sticky', 9)) break;

      case 975:
        c = (a = d).length - 10;
        b = (33 === a.charCodeAt(c) ? a.substring(0, c) : a).substring(d.indexOf(':', 7) + 1).trim();

        switch (m = b.charCodeAt(0) + (b.charCodeAt(7) | 0)) {
          case 203:
            if (111 > b.charCodeAt(8)) break;

          case 115:
            a = a.replace(b, '-webkit-' + b) + ';' + a;
            break;

          case 207:
          case 102:
            a = a.replace(b, '-webkit-' + (102 < m ? 'inline-' : '') + 'box') + ';' + a.replace(b, '-webkit-' + b) + ';' + a.replace(b, '-ms-' + b + 'box') + ';' + a;
        }

        return a + ';';

      case 938:
        if (45 === a.charCodeAt(5)) switch (a.charCodeAt(6)) {
          case 105:
            return b = a.replace('-items', ''), '-webkit-' + a + '-webkit-box-' + b + '-ms-flex-' + b + a;

          case 115:
            return '-webkit-' + a + '-ms-flex-item-' + a.replace(ba, '') + a;

          default:
            return '-webkit-' + a + '-ms-flex-line-pack' + a.replace('align-content', '').replace(ba, '') + a;
        }
        break;

      case 973:
      case 989:
        if (45 !== a.charCodeAt(3) || 122 === a.charCodeAt(4)) break;

      case 931:
      case 953:
        if (!0 === la.test(d)) return 115 === (b = d.substring(d.indexOf(':') + 1)).charCodeAt(0) ? P(d.replace('stretch', 'fill-available'), c, e, h).replace(':fill-available', ':stretch') : a.replace(b, '-webkit-' + b) + a.replace(b, '-moz-' + b.replace('fill-', '')) + a;
        break;

      case 962:
        if (a = '-webkit-' + a + (102 === a.charCodeAt(5) ? '-ms-' + a : '') + a, 211 === e + h && 105 === a.charCodeAt(13) && 0 < a.indexOf('transform', 10)) return a.substring(0, a.indexOf(';', 27) + 1).replace(ma, '$1-webkit-$2') + a;
    }

    return a;
  }

  function L(d, c) {
    var e = d.indexOf(1 === c ? ':' : '{'),
        h = d.substring(0, 3 !== c ? e : 10);
    e = d.substring(e + 1, d.length - 1);
    return R(2 !== c ? h : h.replace(na, '$1'), e, c);
  }

  function ea(d, c) {
    var e = P(c, c.charCodeAt(0), c.charCodeAt(1), c.charCodeAt(2));
    return e !== c + ';' ? e.replace(oa, ' or ($1)').substring(4) : '(' + c + ')';
  }

  function H(d, c, e, h, a, m, b, v, n, q) {
    for (var g = 0, x = c, w; g < A; ++g) {
      switch (w = S[g].call(B, d, x, e, h, a, m, b, v, n, q)) {
        case void 0:
        case !1:
        case !0:
        case null:
          break;

        default:
          x = w;
      }
    }

    if (x !== c) return x;
  }

  function T(d) {
    switch (d) {
      case void 0:
      case null:
        A = S.length = 0;
        break;

      default:
        if ('function' === typeof d) S[A++] = d;else if ('object' === typeof d) for (var c = 0, e = d.length; c < e; ++c) {
          T(d[c]);
        } else Y = !!d | 0;
    }

    return T;
  }

  function U(d) {
    d = d.prefix;
    void 0 !== d && (R = null, d ? 'function' !== typeof d ? w = 1 : (w = 2, R = d) : w = 0);
    return U;
  }

  function B(d, c) {
    var e = d;
    33 > e.charCodeAt(0) && (e = e.trim());
    V = e;
    e = [V];

    if (0 < A) {
      var h = H(-1, c, e, e, D, z, 0, 0, 0, 0);
      void 0 !== h && 'string' === typeof h && (c = h);
    }

    var a = M(O, e, c, 0, 0);
    0 < A && (h = H(-2, a, e, e, D, z, a.length, 0, 0, 0), void 0 !== h && (a = h));
    V = '';
    E = 0;
    z = D = 1;
    return a;
  }

  var ca = /^\0+/g,
      N = /[\0\r\f]/g,
      aa = /: */g,
      ka = /zoo|gra/,
      ma = /([,: ])(transform)/g,
      ia = /,\r+?/g,
      F = /([\t\r\n ])*\f?&/g,
      fa = /@(k\w+)\s*(\S*)\s*/,
      Q = /::(place)/g,
      ha = /:(read-only)/g,
      G = /[svh]\w+-[tblr]{2}/,
      da = /\(\s*(.*)\s*\)/g,
      oa = /([\s\S]*?);/g,
      ba = /-self|flex-/g,
      na = /[^]*?(:[rp][el]a[\w-]+)[^]*/,
      la = /stretch|:\s*\w+\-(?:conte|avail)/,
      ja = /([^-])(image-set\()/,
      z = 1,
      D = 1,
      E = 0,
      w = 1,
      O = [],
      S = [],
      A = 0,
      R = null,
      Y = 0,
      V = '';
  B.use = T;
  B.set = U;
  void 0 !== W && U(W);
  return B;
}

/* harmony default export */ __webpack_exports__["default"] = (stylis_min);


/***/ }),

/***/ "./node_modules/@emotion/unitless/dist/unitless.esm.js":
/*!*************************************************************!*\
  !*** ./node_modules/@emotion/unitless/dist/unitless.esm.js ***!
  \*************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
var unitlessKeys = {
  animationIterationCount: 1,
  borderImageOutset: 1,
  borderImageSlice: 1,
  borderImageWidth: 1,
  boxFlex: 1,
  boxFlexGroup: 1,
  boxOrdinalGroup: 1,
  columnCount: 1,
  columns: 1,
  flex: 1,
  flexGrow: 1,
  flexPositive: 1,
  flexShrink: 1,
  flexNegative: 1,
  flexOrder: 1,
  gridRow: 1,
  gridRowEnd: 1,
  gridRowSpan: 1,
  gridRowStart: 1,
  gridColumn: 1,
  gridColumnEnd: 1,
  gridColumnSpan: 1,
  gridColumnStart: 1,
  msGridRow: 1,
  msGridRowSpan: 1,
  msGridColumn: 1,
  msGridColumnSpan: 1,
  fontWeight: 1,
  lineHeight: 1,
  opacity: 1,
  order: 1,
  orphans: 1,
  tabSize: 1,
  widows: 1,
  zIndex: 1,
  zoom: 1,
  WebkitLineClamp: 1,
  // SVG-related properties
  fillOpacity: 1,
  floodOpacity: 1,
  stopOpacity: 1,
  strokeDasharray: 1,
  strokeDashoffset: 1,
  strokeMiterlimit: 1,
  strokeOpacity: 1,
  strokeWidth: 1
};

/* harmony default export */ __webpack_exports__["default"] = (unitlessKeys);


/***/ }),

/***/ "./node_modules/@emotion/utils/dist/utils.esm.js":
/*!*******************************************************!*\
  !*** ./node_modules/@emotion/utils/dist/utils.esm.js ***!
  \*******************************************************/
/*! exports provided: getRegisteredStyles, insertStyles */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getRegisteredStyles", function() { return getRegisteredStyles; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "insertStyles", function() { return insertStyles; });
var isBrowser = typeof document !== 'undefined';
function getRegisteredStyles(registered, registeredStyles, classNames) {
  var rawClassName = '';
  classNames.split(' ').forEach(function (className) {
    if (registered[className] !== undefined) {
      registeredStyles.push(registered[className]);
    } else {
      rawClassName += className + " ";
    }
  });
  return rawClassName;
}
var insertStyles = function insertStyles(cache, serialized, isStringTag) {
  var className = cache.key + "-" + serialized.name;

  if ( // we only need to add the styles to the registered cache if the
  // class name could be used further down
  // the tree but if it's a string tag, we know it won't
  // so we don't have to add it to registered cache.
  // this improves memory usage since we can avoid storing the whole style string
  (isStringTag === false || // we need to always store it if we're in compat mode and
  // in node since emotion-server relies on whether a style is in
  // the registered cache to know whether a style is global or not
  // also, note that this check will be dead code eliminated in the browser
  isBrowser === false && cache.compat !== undefined) && cache.registered[className] === undefined) {
    cache.registered[className] = serialized.styles;
  }

  if (cache.inserted[serialized.name] === undefined) {
    var stylesForSSR = '';
    var current = serialized;

    do {
      var maybeStyles = cache.insert("." + className, current, cache.sheet, true);

      if (!isBrowser && maybeStyles !== undefined) {
        stylesForSSR += maybeStyles;
      }

      current = current.next;
    } while (current !== undefined);

    if (!isBrowser && stylesForSSR.length !== 0) {
      return stylesForSSR;
    }
  }
};




/***/ }),

/***/ "./node_modules/@emotion/weak-memoize/dist/weak-memoize.esm.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@emotion/weak-memoize/dist/weak-memoize.esm.js ***!
  \*********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
var weakMemoize = function weakMemoize(func) {
  // $FlowFixMe flow doesn't include all non-primitive types as allowed for weakmaps
  var cache = new WeakMap();
  return function (arg) {
    if (cache.has(arg)) {
      // $FlowFixMe
      return cache.get(arg);
    }

    var ret = func(arg);
    cache.set(arg, ret);
    return ret;
  };
};

/* harmony default export */ __webpack_exports__["default"] = (weakMemoize);


/***/ }),

/***/ "./node_modules/bs-css-emotion/src/CssJs.bs.js":
/*!*****************************************************!*\
  !*** ./node_modules/bs-css-emotion/src/CssJs.bs.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Generated by ReScript, PLEASE EDIT WITH CARE


var Emotion = __webpack_require__(/*! emotion */ "./src/emotion.js");
var Css_Colors = __webpack_require__(/*! bs-css/src/Css_Colors.bs.js */ "./node_modules/bs-css/src/Css_Colors.bs.js");
var Css_Js_Core = __webpack_require__(/*! bs-css/src/Css_Js_Core.bs.js */ "./node_modules/bs-css/src/Css_Js_Core.bs.js");

var include = Css_Js_Core.Make({
      mergeStyles: Emotion.cx,
      injectRule: Emotion.injectGlobal,
      injectRaw: Emotion.injectGlobal,
      make: Emotion.css,
      makeKeyFrames: Emotion.keyframes
    });

var insertRule = include.insertRule;

function fontFace(fontFamily, src, fontStyle, fontWeight, fontDisplay, param) {
  insertRule(Css_Js_Core.fontFace(fontFamily, src, fontStyle, fontWeight, fontDisplay, undefined));
  return fontFamily;
}

var Types = Css_Js_Core.Types;

var Make = Css_Js_Core.Make;

var toJson = Css_Js_Core.toJson;

var important = Css_Js_Core.important;

var label = Css_Js_Core.label;

var Shadow = Css_Js_Core.Shadow;

var unsafe = Css_Js_Core.unsafe;

var alignContent = Css_Js_Core.alignContent;

var alignItems = Css_Js_Core.alignItems;

var alignSelf = Css_Js_Core.alignSelf;

var animationDelay = Css_Js_Core.animationDelay;

var animationDirection = Css_Js_Core.animationDirection;

var animationDuration = Css_Js_Core.animationDuration;

var animationFillMode = Css_Js_Core.animationFillMode;

var animationIterationCount = Css_Js_Core.animationIterationCount;

var animationPlayState = Css_Js_Core.animationPlayState;

var animationTimingFunction = Css_Js_Core.animationTimingFunction;

var backdropFilter = Css_Js_Core.backdropFilter;

var backfaceVisibility = Css_Js_Core.backfaceVisibility;

var backgroundAttachment = Css_Js_Core.backgroundAttachment;

var backgroundColor = Css_Js_Core.backgroundColor;

var backgroundClip = Css_Js_Core.backgroundClip;

var backgroundImage = Css_Js_Core.backgroundImage;

var backgroundOrigin = Css_Js_Core.backgroundOrigin;

var backgroundPosition = Css_Js_Core.backgroundPosition;

var backgroundPositions = Css_Js_Core.backgroundPositions;

var backgroundPosition4 = Css_Js_Core.backgroundPosition4;

var backgroundRepeat = Css_Js_Core.backgroundRepeat;

var borderBottom = Css_Js_Core.borderBottom;

var borderBottomColor = Css_Js_Core.borderBottomColor;

var borderBottomLeftRadius = Css_Js_Core.borderBottomLeftRadius;

var borderBottomRightRadius = Css_Js_Core.borderBottomRightRadius;

var borderBottomStyle = Css_Js_Core.borderBottomStyle;

var borderBottomWidth = Css_Js_Core.borderBottomWidth;

var borderCollapse = Css_Js_Core.borderCollapse;

var borderColor = Css_Js_Core.borderColor;

var borderLeft = Css_Js_Core.borderLeft;

var borderLeftColor = Css_Js_Core.borderLeftColor;

var borderLeftStyle = Css_Js_Core.borderLeftStyle;

var borderLeftWidth = Css_Js_Core.borderLeftWidth;

var borderRight = Css_Js_Core.borderRight;

var borderRightColor = Css_Js_Core.borderRightColor;

var borderRightStyle = Css_Js_Core.borderRightStyle;

var borderRightWidth = Css_Js_Core.borderRightWidth;

var borderRadius = Css_Js_Core.borderRadius;

var borderSpacing = Css_Js_Core.borderSpacing;

var borderStyle = Css_Js_Core.borderStyle;

var borderTopColor = Css_Js_Core.borderTopColor;

var borderTopLeftRadius = Css_Js_Core.borderTopLeftRadius;

var borderTopRightRadius = Css_Js_Core.borderTopRightRadius;

var borderTopStyle = Css_Js_Core.borderTopStyle;

var borderTopWidth = Css_Js_Core.borderTopWidth;

var borderWidth = Css_Js_Core.borderWidth;

var bottom = Css_Js_Core.bottom;

var boxSizing = Css_Js_Core.boxSizing;

var boxShadow = Css_Js_Core.boxShadow;

var boxShadows = Css_Js_Core.boxShadows;

var clear = Css_Js_Core.clear;

var clipPath = Css_Js_Core.clipPath;

var color = Css_Js_Core.color;

var columnCount = Css_Js_Core.columnCount;

var contentRule = Css_Js_Core.contentRule;

var contentRules = Css_Js_Core.contentRules;

var counterIncrement = Css_Js_Core.counterIncrement;

var countersIncrement = Css_Js_Core.countersIncrement;

var counterReset = Css_Js_Core.counterReset;

var countersReset = Css_Js_Core.countersReset;

var counterSet = Css_Js_Core.counterSet;

var countersSet = Css_Js_Core.countersSet;

var cursor = Css_Js_Core.cursor;

var direction = Css_Js_Core.direction;

var display = Css_Js_Core.display;

var flex = Css_Js_Core.flex;

var flexBasis = Css_Js_Core.flexBasis;

var flexDirection = Css_Js_Core.flexDirection;

var flexGrow = Css_Js_Core.flexGrow;

var flexShrink = Css_Js_Core.flexShrink;

var flexWrap = Css_Js_Core.flexWrap;

var $$float = Css_Js_Core.$$float;

var fontFamily = Css_Js_Core.fontFamily;

var fontFamilies = Css_Js_Core.fontFamilies;

var fontSize = Css_Js_Core.fontSize;

var fontStyle = Css_Js_Core.fontStyle;

var fontVariant = Css_Js_Core.fontVariant;

var fontWeight = Css_Js_Core.fontWeight;

var gridArea = Css_Js_Core.gridArea;

var gridArea2 = Css_Js_Core.gridArea2;

var gridArea3 = Css_Js_Core.gridArea3;

var gridArea4 = Css_Js_Core.gridArea4;

var gridAutoFlow = Css_Js_Core.gridAutoFlow;

var gridColumn = Css_Js_Core.gridColumn;

var gridColumnEnd = Css_Js_Core.gridColumnEnd;

var columnGap = Css_Js_Core.columnGap;

var gridColumnGap = Css_Js_Core.gridColumnGap;

var gridColumnStart = Css_Js_Core.gridColumnStart;

var gridGap = Css_Js_Core.gridGap;

var gridRow = Css_Js_Core.gridRow;

var gridRowEnd = Css_Js_Core.gridRowEnd;

var gridRowGap = Css_Js_Core.gridRowGap;

var gridRowStart = Css_Js_Core.gridRowStart;

var gridTemplateAreas = Css_Js_Core.gridTemplateAreas;

var height = Css_Js_Core.height;

var justifyContent = Css_Js_Core.justifyContent;

var justifySelf = Css_Js_Core.justifySelf;

var left = Css_Js_Core.left;

var letterSpacing = Css_Js_Core.letterSpacing;

var lineHeight = Css_Js_Core.lineHeight;

var listStyle = Css_Js_Core.listStyle;

var listStyleImage = Css_Js_Core.listStyleImage;

var listStyleType = Css_Js_Core.listStyleType;

var listStylePosition = Css_Js_Core.listStylePosition;

var margin = Css_Js_Core.margin;

var margin2 = Css_Js_Core.margin2;

var margin3 = Css_Js_Core.margin3;

var margin4 = Css_Js_Core.margin4;

var marginLeft = Css_Js_Core.marginLeft;

var marginRight = Css_Js_Core.marginRight;

var marginTop = Css_Js_Core.marginTop;

var marginBottom = Css_Js_Core.marginBottom;

var maxHeight = Css_Js_Core.maxHeight;

var maxWidth = Css_Js_Core.maxWidth;

var minHeight = Css_Js_Core.minHeight;

var minWidth = Css_Js_Core.minWidth;

var objectFit = Css_Js_Core.objectFit;

var objectPosition = Css_Js_Core.objectPosition;

var opacity = Css_Js_Core.opacity;

var order = Css_Js_Core.order;

var outline = Css_Js_Core.outline;

var outlineColor = Css_Js_Core.outlineColor;

var outlineOffset = Css_Js_Core.outlineOffset;

var outlineStyle = Css_Js_Core.outlineStyle;

var outlineWidth = Css_Js_Core.outlineWidth;

var overflow = Css_Js_Core.overflow;

var overflowX = Css_Js_Core.overflowX;

var overflowY = Css_Js_Core.overflowY;

var overflowWrap = Css_Js_Core.overflowWrap;

var padding = Css_Js_Core.padding;

var padding2 = Css_Js_Core.padding2;

var padding3 = Css_Js_Core.padding3;

var padding4 = Css_Js_Core.padding4;

var paddingLeft = Css_Js_Core.paddingLeft;

var paddingRight = Css_Js_Core.paddingRight;

var paddingTop = Css_Js_Core.paddingTop;

var paddingBottom = Css_Js_Core.paddingBottom;

var perspective = Css_Js_Core.perspective;

var perspectiveOrigin = Css_Js_Core.perspectiveOrigin;

var pointerEvents = Css_Js_Core.pointerEvents;

var position = Css_Js_Core.position;

var resize = Css_Js_Core.resize;

var right = Css_Js_Core.right;

var tableLayout = Css_Js_Core.tableLayout;

var textAlign = Css_Js_Core.textAlign;

var textDecorationColor = Css_Js_Core.textDecorationColor;

var textDecorationLine = Css_Js_Core.textDecorationLine;

var textDecorationStyle = Css_Js_Core.textDecorationStyle;

var textIndent = Css_Js_Core.textIndent;

var textOverflow = Css_Js_Core.textOverflow;

var textShadow = Css_Js_Core.textShadow;

var textShadows = Css_Js_Core.textShadows;

var textTransform = Css_Js_Core.textTransform;

var top = Css_Js_Core.top;

var transform = Css_Js_Core.transform;

var transforms = Css_Js_Core.transforms;

var transformOrigin = Css_Js_Core.transformOrigin;

var transformOrigin3d = Css_Js_Core.transformOrigin3d;

var transitionDelay = Css_Js_Core.transitionDelay;

var transitionDuration = Css_Js_Core.transitionDuration;

var transitionProperty = Css_Js_Core.transitionProperty;

var transformStyle = Css_Js_Core.transformStyle;

var transitionTimingFunction = Css_Js_Core.transitionTimingFunction;

var userSelect = Css_Js_Core.userSelect;

var verticalAlign = Css_Js_Core.verticalAlign;

var visibility = Css_Js_Core.visibility;

var width = Css_Js_Core.width;

var whiteSpace = Css_Js_Core.whiteSpace;

var wordBreak = Css_Js_Core.wordBreak;

var wordSpacing = Css_Js_Core.wordSpacing;

var wordWrap = Css_Js_Core.wordWrap;

var zIndex = Css_Js_Core.zIndex;

var selector = Css_Js_Core.selector;

var media = Css_Js_Core.media;

var active = Css_Js_Core.active;

var checked = Css_Js_Core.checked;

var $$default = Css_Js_Core.$$default;

var defined = Css_Js_Core.defined;

var disabled = Css_Js_Core.disabled;

var empty = Css_Js_Core.empty;

var enabled = Css_Js_Core.enabled;

var first = Css_Js_Core.first;

var firstChild = Css_Js_Core.firstChild;

var firstOfType = Css_Js_Core.firstOfType;

var focus = Css_Js_Core.focus;

var focusWithin = Css_Js_Core.focusWithin;

var host = Css_Js_Core.host;

var hover = Css_Js_Core.hover;

var indeterminate = Css_Js_Core.indeterminate;

var inRange = Css_Js_Core.inRange;

var invalid = Css_Js_Core.invalid;

var lang = Css_Js_Core.lang;

var lastChild = Css_Js_Core.lastChild;

var lastOfType = Css_Js_Core.lastOfType;

var link = Css_Js_Core.link;

var not__ = Css_Js_Core.not__;

var Nth = Css_Js_Core.Nth;

var nthChild = Css_Js_Core.nthChild;

var nthLastChild = Css_Js_Core.nthLastChild;

var nthLastOfType = Css_Js_Core.nthLastOfType;

var nthOfType = Css_Js_Core.nthOfType;

var onlyChild = Css_Js_Core.onlyChild;

var onlyOfType = Css_Js_Core.onlyOfType;

var optional = Css_Js_Core.optional;

var outOfRange = Css_Js_Core.outOfRange;

var readOnly = Css_Js_Core.readOnly;

var readWrite = Css_Js_Core.readWrite;

var required = Css_Js_Core.required;

var root = Css_Js_Core.root;

var scope = Css_Js_Core.scope;

var target = Css_Js_Core.target;

var valid = Css_Js_Core.valid;

var visited = Css_Js_Core.visited;

var after = Css_Js_Core.after;

var before = Css_Js_Core.before;

var firstLetter = Css_Js_Core.firstLetter;

var firstLine = Css_Js_Core.firstLine;

var placeholder = Css_Js_Core.placeholder;

var selection = Css_Js_Core.selection;

var child = Css_Js_Core.child;

var children = Css_Js_Core.children;

var directSibling = Css_Js_Core.directSibling;

var siblings = Css_Js_Core.siblings;

var anyLink = Css_Js_Core.anyLink;

var initial = Css_Js_Core.initial;

var inherit_ = Css_Js_Core.inherit_;

var unset = Css_Js_Core.unset;

var $$var = Css_Js_Core.$$var;

var varDefault = Css_Js_Core.varDefault;

var auto = Css_Js_Core.auto;

var none = Css_Js_Core.none;

var text = Css_Js_Core.text;

var pct = Css_Js_Core.pct;

var ch = Css_Js_Core.ch;

var cm = Css_Js_Core.cm;

var em = Css_Js_Core.em;

var ex = Css_Js_Core.ex;

var mm = Css_Js_Core.mm;

var pt = Css_Js_Core.pt;

var px = Css_Js_Core.px;

var pxFloat = Css_Js_Core.pxFloat;

var rem = Css_Js_Core.rem;

var vh = Css_Js_Core.vh;

var vmin = Css_Js_Core.vmin;

var vmax = Css_Js_Core.vmax;

var zero = Css_Js_Core.zero;

var deg = Css_Js_Core.deg;

var rad = Css_Js_Core.rad;

var grad = Css_Js_Core.grad;

var turn = Css_Js_Core.turn;

var ltr = Css_Js_Core.ltr;

var rtl = Css_Js_Core.rtl;

var absolute = Css_Js_Core.absolute;

var relative = Css_Js_Core.relative;

var $$static = Css_Js_Core.$$static;

var fixed = Css_Js_Core.fixed;

var sticky = Css_Js_Core.sticky;

var horizontal = Css_Js_Core.horizontal;

var vertical = Css_Js_Core.vertical;

var smallCaps = Css_Js_Core.smallCaps;

var italic = Css_Js_Core.italic;

var oblique = Css_Js_Core.oblique;

var hidden = Css_Js_Core.hidden;

var visible = Css_Js_Core.visible;

var scroll = Css_Js_Core.scroll;

var rgb = Css_Js_Core.rgb;

var rgba = Css_Js_Core.rgba;

var hsl = Css_Js_Core.hsl;

var hsla = Css_Js_Core.hsla;

var hex = Css_Js_Core.hex;

var currentColor = Css_Js_Core.currentColor;

var local = Css_Js_Core.local;

var paddingBox = Css_Js_Core.paddingBox;

var borderBox = Css_Js_Core.borderBox;

var contentBox = Css_Js_Core.contentBox;

var noRepeat = Css_Js_Core.noRepeat;

var space = Css_Js_Core.space;

var repeat = Css_Js_Core.repeat;

var minmax = Css_Js_Core.minmax;

var repeatX = Css_Js_Core.repeatX;

var repeatY = Css_Js_Core.repeatY;

var contain = Css_Js_Core.contain;

var cover = Css_Js_Core.cover;

var row = Css_Js_Core.row;

var rowReverse = Css_Js_Core.rowReverse;

var column = Css_Js_Core.column;

var columnReverse = Css_Js_Core.columnReverse;

var wrap = Css_Js_Core.wrap;

var nowrap = Css_Js_Core.nowrap;

var wrapReverse = Css_Js_Core.wrapReverse;

var inline = Css_Js_Core.inline;

var block = Css_Js_Core.block;

var contents = Css_Js_Core.contents;

var flexBox = Css_Js_Core.flexBox;

var grid = Css_Js_Core.grid;

var inlineBlock = Css_Js_Core.inlineBlock;

var inlineFlex = Css_Js_Core.inlineFlex;

var inlineGrid = Css_Js_Core.inlineGrid;

var inlineTable = Css_Js_Core.inlineTable;

var listItem = Css_Js_Core.listItem;

var runIn = Css_Js_Core.runIn;

var table = Css_Js_Core.table;

var tableCaption = Css_Js_Core.tableCaption;

var tableColumnGroup = Css_Js_Core.tableColumnGroup;

var tableHeaderGroup = Css_Js_Core.tableHeaderGroup;

var tableFooterGroup = Css_Js_Core.tableFooterGroup;

var tableRowGroup = Css_Js_Core.tableRowGroup;

var tableCell = Css_Js_Core.tableCell;

var tableColumn = Css_Js_Core.tableColumn;

var tableRow = Css_Js_Core.tableRow;

var flexStart = Css_Js_Core.flexStart;

var flexEnd = Css_Js_Core.flexEnd;

var center = Css_Js_Core.center;

var stretch = Css_Js_Core.stretch;

var spaceBetween = Css_Js_Core.spaceBetween;

var spaceAround = Css_Js_Core.spaceAround;

var spaceEvenly = Css_Js_Core.spaceEvenly;

var baseline = Css_Js_Core.baseline;

var forwards = Css_Js_Core.forwards;

var backwards = Css_Js_Core.backwards;

var both = Css_Js_Core.both;

var infinite = Css_Js_Core.infinite;

var count = Css_Js_Core.count;

var paused = Css_Js_Core.paused;

var running = Css_Js_Core.running;

var inside = Css_Js_Core.inside;

var outside = Css_Js_Core.outside;

var solid = Css_Js_Core.solid;

var dotted = Css_Js_Core.dotted;

var dashed = Css_Js_Core.dashed;

var underline = Css_Js_Core.underline;

var overline = Css_Js_Core.overline;

var lineThrough = Css_Js_Core.lineThrough;

var clip = Css_Js_Core.clip;

var ellipsis = Css_Js_Core.ellipsis;

var wavy = Css_Js_Core.wavy;

var $$double = Css_Js_Core.$$double;

var uppercase = Css_Js_Core.uppercase;

var lowercase = Css_Js_Core.lowercase;

var capitalize = Css_Js_Core.capitalize;

var sub = Css_Js_Core.sub;

var $$super = Css_Js_Core.$$super;

var textTop = Css_Js_Core.textTop;

var textBottom = Css_Js_Core.textBottom;

var middle = Css_Js_Core.middle;

var normal = Css_Js_Core.normal;

var breakAll = Css_Js_Core.breakAll;

var keepAll = Css_Js_Core.keepAll;

var breakWord = Css_Js_Core.breakWord;

var reverse = Css_Js_Core.reverse;

var alternate = Css_Js_Core.alternate;

var alternateReverse = Css_Js_Core.alternateReverse;

var fill = Css_Js_Core.fill;

var content = Css_Js_Core.content;

var maxContent = Css_Js_Core.maxContent;

var minContent = Css_Js_Core.minContent;

var fitContent = Css_Js_Core.fitContent;

var all = Css_Js_Core.all;

var round = Css_Js_Core.round;

var miter = Css_Js_Core.miter;

var bevel = Css_Js_Core.bevel;

var butt = Css_Js_Core.butt;

var square = Css_Js_Core.square;

var thin = Css_Js_Core.thin;

var extraLight = Css_Js_Core.extraLight;

var light = Css_Js_Core.light;

var medium = Css_Js_Core.medium;

var semiBold = Css_Js_Core.semiBold;

var bold = Css_Js_Core.bold;

var extraBold = Css_Js_Core.extraBold;

var lighter = Css_Js_Core.lighter;

var bolder = Css_Js_Core.bolder;

var fr = Css_Js_Core.fr;

var vw = Css_Js_Core.vw;

var localUrl = Css_Js_Core.localUrl;

var url = Css_Js_Core.url;

var linear = Css_Js_Core.linear;

var ease = Css_Js_Core.ease;

var easeIn = Css_Js_Core.easeIn;

var easeOut = Css_Js_Core.easeOut;

var easeInOut = Css_Js_Core.easeInOut;

var stepStart = Css_Js_Core.stepStart;

var stepEnd = Css_Js_Core.stepEnd;

var steps = Css_Js_Core.steps;

var cubicBezier = Css_Js_Core.cubicBezier;

var marginBox = Css_Js_Core.marginBox;

var fillBox = Css_Js_Core.fillBox;

var strokeBox = Css_Js_Core.strokeBox;

var viewBox = Css_Js_Core.viewBox;

var translate = Css_Js_Core.translate;

var translate3d = Css_Js_Core.translate3d;

var translateX = Css_Js_Core.translateX;

var translateY = Css_Js_Core.translateY;

var translateZ = Css_Js_Core.translateZ;

var scale = Css_Js_Core.scale;

var scale3d = Css_Js_Core.scale3d;

var scaleX = Css_Js_Core.scaleX;

var scaleY = Css_Js_Core.scaleY;

var scaleZ = Css_Js_Core.scaleZ;

var rotate = Css_Js_Core.rotate;

var rotate3d = Css_Js_Core.rotate3d;

var rotateX = Css_Js_Core.rotateX;

var rotateY = Css_Js_Core.rotateY;

var rotateZ = Css_Js_Core.rotateZ;

var skew = Css_Js_Core.skew;

var skewX = Css_Js_Core.skewX;

var skewY = Css_Js_Core.skewY;

var linearGradient = Css_Js_Core.linearGradient;

var repeatingLinearGradient = Css_Js_Core.repeatingLinearGradient;

var radialGradient = Css_Js_Core.radialGradient;

var repeatingRadialGradient = Css_Js_Core.repeatingRadialGradient;

var areas = Css_Js_Core.areas;

var ident = Css_Js_Core.ident;

var numIdent = Css_Js_Core.numIdent;

var contextMenu = Css_Js_Core.contextMenu;

var help = Css_Js_Core.help;

var pointer = Css_Js_Core.pointer;

var progress = Css_Js_Core.progress;

var wait = Css_Js_Core.wait;

var cell = Css_Js_Core.cell;

var crosshair = Css_Js_Core.crosshair;

var verticalText = Css_Js_Core.verticalText;

var alias = Css_Js_Core.alias;

var copy = Css_Js_Core.copy;

var move = Css_Js_Core.move;

var noDrop = Css_Js_Core.noDrop;

var notAllowed = Css_Js_Core.notAllowed;

var grab = Css_Js_Core.grab;

var grabbing = Css_Js_Core.grabbing;

var allScroll = Css_Js_Core.allScroll;

var colResize = Css_Js_Core.colResize;

var rowResize = Css_Js_Core.rowResize;

var nResize = Css_Js_Core.nResize;

var eResize = Css_Js_Core.eResize;

var sResize = Css_Js_Core.sResize;

var wResize = Css_Js_Core.wResize;

var neResize = Css_Js_Core.neResize;

var nwResize = Css_Js_Core.nwResize;

var seResize = Css_Js_Core.seResize;

var swResize = Css_Js_Core.swResize;

var ewResize = Css_Js_Core.ewResize;

var nsResize = Css_Js_Core.nsResize;

var neswResize = Css_Js_Core.neswResize;

var nwseResize = Css_Js_Core.nwseResize;

var zoomIn = Css_Js_Core.zoomIn;

var zoomOut = Css_Js_Core.zoomOut;

var flex3 = Css_Js_Core.flex3;

var border = Css_Js_Core.border;

var borderTop = Css_Js_Core.borderTop;

var backgroundSize = Css_Js_Core.backgroundSize;

var textDecoration = Css_Js_Core.textDecoration;

var background = Css_Js_Core.background;

var backgrounds = Css_Js_Core.backgrounds;

var gridAutoColumns = Css_Js_Core.gridAutoColumns;

var gridAutoRows = Css_Js_Core.gridAutoRows;

var gridTemplateColumns = Css_Js_Core.gridTemplateColumns;

var gridTemplateRows = Css_Js_Core.gridTemplateRows;

var Calc = Css_Js_Core.Calc;

var size = Css_Js_Core.size;

var filter = Css_Js_Core.filter;

var Transition = Css_Js_Core.Transition;

var transitionValue = Css_Js_Core.transitionValue;

var transitionList = Css_Js_Core.transitionList;

var transition = Css_Js_Core.transition;

var transitions = Css_Js_Core.transitions;

var Animation = Css_Js_Core.Animation;

var animationValue = Css_Js_Core.animationValue;

var animation = Css_Js_Core.animation;

var animations = Css_Js_Core.animations;

var animationName = Css_Js_Core.animationName;

var SVG = Css_Js_Core.SVG;

var aliceblue = Css_Colors.aliceblue;

var antiquewhite = Css_Colors.antiquewhite;

var aqua = Css_Colors.aqua;

var aquamarine = Css_Colors.aquamarine;

var azure = Css_Colors.azure;

var beige = Css_Colors.beige;

var bisque = Css_Colors.bisque;

var black = Css_Colors.black;

var blanchedalmond = Css_Colors.blanchedalmond;

var blue = Css_Colors.blue;

var blueviolet = Css_Colors.blueviolet;

var brown = Css_Colors.brown;

var burlywood = Css_Colors.burlywood;

var cadetblue = Css_Colors.cadetblue;

var chartreuse = Css_Colors.chartreuse;

var chocolate = Css_Colors.chocolate;

var coral = Css_Colors.coral;

var cornflowerblue = Css_Colors.cornflowerblue;

var cornsilk = Css_Colors.cornsilk;

var crimson = Css_Colors.crimson;

var cyan = Css_Colors.cyan;

var darkblue = Css_Colors.darkblue;

var darkcyan = Css_Colors.darkcyan;

var darkgoldenrod = Css_Colors.darkgoldenrod;

var darkgray = Css_Colors.darkgray;

var darkgreen = Css_Colors.darkgreen;

var darkgrey = Css_Colors.darkgrey;

var darkkhaki = Css_Colors.darkkhaki;

var darkmagenta = Css_Colors.darkmagenta;

var darkolivegreen = Css_Colors.darkolivegreen;

var darkorange = Css_Colors.darkorange;

var darkorchid = Css_Colors.darkorchid;

var darkred = Css_Colors.darkred;

var darksalmon = Css_Colors.darksalmon;

var darkseagreen = Css_Colors.darkseagreen;

var darkslateblue = Css_Colors.darkslateblue;

var darkslategray = Css_Colors.darkslategray;

var darkslategrey = Css_Colors.darkslategrey;

var darkturquoise = Css_Colors.darkturquoise;

var darkviolet = Css_Colors.darkviolet;

var deeppink = Css_Colors.deeppink;

var deepskyblue = Css_Colors.deepskyblue;

var dimgray = Css_Colors.dimgray;

var dimgrey = Css_Colors.dimgrey;

var dodgerblue = Css_Colors.dodgerblue;

var firebrick = Css_Colors.firebrick;

var floralwhite = Css_Colors.floralwhite;

var forestgreen = Css_Colors.forestgreen;

var fuchsia = Css_Colors.fuchsia;

var gainsboro = Css_Colors.gainsboro;

var ghostwhite = Css_Colors.ghostwhite;

var gold = Css_Colors.gold;

var goldenrod = Css_Colors.goldenrod;

var gray = Css_Colors.gray;

var green = Css_Colors.green;

var greenyellow = Css_Colors.greenyellow;

var grey = Css_Colors.grey;

var honeydew = Css_Colors.honeydew;

var hotpink = Css_Colors.hotpink;

var indianred = Css_Colors.indianred;

var indigo = Css_Colors.indigo;

var ivory = Css_Colors.ivory;

var khaki = Css_Colors.khaki;

var lavender = Css_Colors.lavender;

var lavenderblush = Css_Colors.lavenderblush;

var lawngreen = Css_Colors.lawngreen;

var lemonchiffon = Css_Colors.lemonchiffon;

var lightblue = Css_Colors.lightblue;

var lightcoral = Css_Colors.lightcoral;

var lightcyan = Css_Colors.lightcyan;

var lightgoldenrodyellow = Css_Colors.lightgoldenrodyellow;

var lightgray = Css_Colors.lightgray;

var lightgreen = Css_Colors.lightgreen;

var lightgrey = Css_Colors.lightgrey;

var lightpink = Css_Colors.lightpink;

var lightsalmon = Css_Colors.lightsalmon;

var lightseagreen = Css_Colors.lightseagreen;

var lightskyblue = Css_Colors.lightskyblue;

var lightslategray = Css_Colors.lightslategray;

var lightslategrey = Css_Colors.lightslategrey;

var lightsteelblue = Css_Colors.lightsteelblue;

var lightyellow = Css_Colors.lightyellow;

var lime = Css_Colors.lime;

var limegreen = Css_Colors.limegreen;

var linen = Css_Colors.linen;

var magenta = Css_Colors.magenta;

var maroon = Css_Colors.maroon;

var mediumaquamarine = Css_Colors.mediumaquamarine;

var mediumblue = Css_Colors.mediumblue;

var mediumorchid = Css_Colors.mediumorchid;

var mediumpurple = Css_Colors.mediumpurple;

var mediumseagreen = Css_Colors.mediumseagreen;

var mediumslateblue = Css_Colors.mediumslateblue;

var mediumspringgreen = Css_Colors.mediumspringgreen;

var mediumturquoise = Css_Colors.mediumturquoise;

var mediumvioletred = Css_Colors.mediumvioletred;

var midnightblue = Css_Colors.midnightblue;

var mintcream = Css_Colors.mintcream;

var mistyrose = Css_Colors.mistyrose;

var moccasin = Css_Colors.moccasin;

var navajowhite = Css_Colors.navajowhite;

var navy = Css_Colors.navy;

var oldlace = Css_Colors.oldlace;

var olive = Css_Colors.olive;

var olivedrab = Css_Colors.olivedrab;

var orange = Css_Colors.orange;

var orangered = Css_Colors.orangered;

var orchid = Css_Colors.orchid;

var palegoldenrod = Css_Colors.palegoldenrod;

var palegreen = Css_Colors.palegreen;

var paleturquoise = Css_Colors.paleturquoise;

var palevioletred = Css_Colors.palevioletred;

var papayawhip = Css_Colors.papayawhip;

var peachpuff = Css_Colors.peachpuff;

var peru = Css_Colors.peru;

var pink = Css_Colors.pink;

var plum = Css_Colors.plum;

var powderblue = Css_Colors.powderblue;

var purple = Css_Colors.purple;

var rebeccapurple = Css_Colors.rebeccapurple;

var red = Css_Colors.red;

var rosybrown = Css_Colors.rosybrown;

var royalblue = Css_Colors.royalblue;

var saddlebrown = Css_Colors.saddlebrown;

var salmon = Css_Colors.salmon;

var sandybrown = Css_Colors.sandybrown;

var seagreen = Css_Colors.seagreen;

var seashell = Css_Colors.seashell;

var sienna = Css_Colors.sienna;

var silver = Css_Colors.silver;

var skyblue = Css_Colors.skyblue;

var slateblue = Css_Colors.slateblue;

var slategray = Css_Colors.slategray;

var slategrey = Css_Colors.slategrey;

var snow = Css_Colors.snow;

var springgreen = Css_Colors.springgreen;

var steelblue = Css_Colors.steelblue;

var tan = Css_Colors.tan;

var teal = Css_Colors.teal;

var thistle = Css_Colors.thistle;

var tomato = Css_Colors.tomato;

var turquoise = Css_Colors.turquoise;

var violet = Css_Colors.violet;

var wheat = Css_Colors.wheat;

var white = Css_Colors.white;

var whitesmoke = Css_Colors.whitesmoke;

var yellow = Css_Colors.yellow;

var yellowgreen = Css_Colors.yellowgreen;

var transparent = Css_Colors.transparent;

var $$global = include.$$global;

var merge = include.merge;

var style = include.style;

var keyframes = include.keyframes;

exports.Types = Types;
exports.Make = Make;
exports.toJson = toJson;
exports.important = important;
exports.label = label;
exports.Shadow = Shadow;
exports.unsafe = unsafe;
exports.alignContent = alignContent;
exports.alignItems = alignItems;
exports.alignSelf = alignSelf;
exports.animationDelay = animationDelay;
exports.animationDirection = animationDirection;
exports.animationDuration = animationDuration;
exports.animationFillMode = animationFillMode;
exports.animationIterationCount = animationIterationCount;
exports.animationPlayState = animationPlayState;
exports.animationTimingFunction = animationTimingFunction;
exports.backdropFilter = backdropFilter;
exports.backfaceVisibility = backfaceVisibility;
exports.backgroundAttachment = backgroundAttachment;
exports.backgroundColor = backgroundColor;
exports.backgroundClip = backgroundClip;
exports.backgroundImage = backgroundImage;
exports.backgroundOrigin = backgroundOrigin;
exports.backgroundPosition = backgroundPosition;
exports.backgroundPositions = backgroundPositions;
exports.backgroundPosition4 = backgroundPosition4;
exports.backgroundRepeat = backgroundRepeat;
exports.borderBottom = borderBottom;
exports.borderBottomColor = borderBottomColor;
exports.borderBottomLeftRadius = borderBottomLeftRadius;
exports.borderBottomRightRadius = borderBottomRightRadius;
exports.borderBottomStyle = borderBottomStyle;
exports.borderBottomWidth = borderBottomWidth;
exports.borderCollapse = borderCollapse;
exports.borderColor = borderColor;
exports.borderLeft = borderLeft;
exports.borderLeftColor = borderLeftColor;
exports.borderLeftStyle = borderLeftStyle;
exports.borderLeftWidth = borderLeftWidth;
exports.borderRight = borderRight;
exports.borderRightColor = borderRightColor;
exports.borderRightStyle = borderRightStyle;
exports.borderRightWidth = borderRightWidth;
exports.borderRadius = borderRadius;
exports.borderSpacing = borderSpacing;
exports.borderStyle = borderStyle;
exports.borderTopColor = borderTopColor;
exports.borderTopLeftRadius = borderTopLeftRadius;
exports.borderTopRightRadius = borderTopRightRadius;
exports.borderTopStyle = borderTopStyle;
exports.borderTopWidth = borderTopWidth;
exports.borderWidth = borderWidth;
exports.bottom = bottom;
exports.boxSizing = boxSizing;
exports.boxShadow = boxShadow;
exports.boxShadows = boxShadows;
exports.clear = clear;
exports.clipPath = clipPath;
exports.color = color;
exports.columnCount = columnCount;
exports.contentRule = contentRule;
exports.contentRules = contentRules;
exports.counterIncrement = counterIncrement;
exports.countersIncrement = countersIncrement;
exports.counterReset = counterReset;
exports.countersReset = countersReset;
exports.counterSet = counterSet;
exports.countersSet = countersSet;
exports.cursor = cursor;
exports.direction = direction;
exports.display = display;
exports.flex = flex;
exports.flexBasis = flexBasis;
exports.flexDirection = flexDirection;
exports.flexGrow = flexGrow;
exports.flexShrink = flexShrink;
exports.flexWrap = flexWrap;
exports.$$float = $$float;
exports.fontFamily = fontFamily;
exports.fontFamilies = fontFamilies;
exports.fontSize = fontSize;
exports.fontStyle = fontStyle;
exports.fontVariant = fontVariant;
exports.fontWeight = fontWeight;
exports.gridArea = gridArea;
exports.gridArea2 = gridArea2;
exports.gridArea3 = gridArea3;
exports.gridArea4 = gridArea4;
exports.gridAutoFlow = gridAutoFlow;
exports.gridColumn = gridColumn;
exports.gridColumnEnd = gridColumnEnd;
exports.columnGap = columnGap;
exports.gridColumnGap = gridColumnGap;
exports.gridColumnStart = gridColumnStart;
exports.gridGap = gridGap;
exports.gridRow = gridRow;
exports.gridRowEnd = gridRowEnd;
exports.gridRowGap = gridRowGap;
exports.gridRowStart = gridRowStart;
exports.gridTemplateAreas = gridTemplateAreas;
exports.height = height;
exports.justifyContent = justifyContent;
exports.justifySelf = justifySelf;
exports.left = left;
exports.letterSpacing = letterSpacing;
exports.lineHeight = lineHeight;
exports.listStyle = listStyle;
exports.listStyleImage = listStyleImage;
exports.listStyleType = listStyleType;
exports.listStylePosition = listStylePosition;
exports.margin = margin;
exports.margin2 = margin2;
exports.margin3 = margin3;
exports.margin4 = margin4;
exports.marginLeft = marginLeft;
exports.marginRight = marginRight;
exports.marginTop = marginTop;
exports.marginBottom = marginBottom;
exports.maxHeight = maxHeight;
exports.maxWidth = maxWidth;
exports.minHeight = minHeight;
exports.minWidth = minWidth;
exports.objectFit = objectFit;
exports.objectPosition = objectPosition;
exports.opacity = opacity;
exports.order = order;
exports.outline = outline;
exports.outlineColor = outlineColor;
exports.outlineOffset = outlineOffset;
exports.outlineStyle = outlineStyle;
exports.outlineWidth = outlineWidth;
exports.overflow = overflow;
exports.overflowX = overflowX;
exports.overflowY = overflowY;
exports.overflowWrap = overflowWrap;
exports.padding = padding;
exports.padding2 = padding2;
exports.padding3 = padding3;
exports.padding4 = padding4;
exports.paddingLeft = paddingLeft;
exports.paddingRight = paddingRight;
exports.paddingTop = paddingTop;
exports.paddingBottom = paddingBottom;
exports.perspective = perspective;
exports.perspectiveOrigin = perspectiveOrigin;
exports.pointerEvents = pointerEvents;
exports.position = position;
exports.resize = resize;
exports.right = right;
exports.tableLayout = tableLayout;
exports.textAlign = textAlign;
exports.textDecorationColor = textDecorationColor;
exports.textDecorationLine = textDecorationLine;
exports.textDecorationStyle = textDecorationStyle;
exports.textIndent = textIndent;
exports.textOverflow = textOverflow;
exports.textShadow = textShadow;
exports.textShadows = textShadows;
exports.textTransform = textTransform;
exports.top = top;
exports.transform = transform;
exports.transforms = transforms;
exports.transformOrigin = transformOrigin;
exports.transformOrigin3d = transformOrigin3d;
exports.transitionDelay = transitionDelay;
exports.transitionDuration = transitionDuration;
exports.transitionProperty = transitionProperty;
exports.transformStyle = transformStyle;
exports.transitionTimingFunction = transitionTimingFunction;
exports.userSelect = userSelect;
exports.verticalAlign = verticalAlign;
exports.visibility = visibility;
exports.width = width;
exports.whiteSpace = whiteSpace;
exports.wordBreak = wordBreak;
exports.wordSpacing = wordSpacing;
exports.wordWrap = wordWrap;
exports.zIndex = zIndex;
exports.selector = selector;
exports.media = media;
exports.active = active;
exports.checked = checked;
exports.$$default = $$default;
exports.default = $$default;
exports.__esModule = true;
exports.defined = defined;
exports.disabled = disabled;
exports.empty = empty;
exports.enabled = enabled;
exports.first = first;
exports.firstChild = firstChild;
exports.firstOfType = firstOfType;
exports.focus = focus;
exports.focusWithin = focusWithin;
exports.host = host;
exports.hover = hover;
exports.indeterminate = indeterminate;
exports.inRange = inRange;
exports.invalid = invalid;
exports.lang = lang;
exports.lastChild = lastChild;
exports.lastOfType = lastOfType;
exports.link = link;
exports.not__ = not__;
exports.Nth = Nth;
exports.nthChild = nthChild;
exports.nthLastChild = nthLastChild;
exports.nthLastOfType = nthLastOfType;
exports.nthOfType = nthOfType;
exports.onlyChild = onlyChild;
exports.onlyOfType = onlyOfType;
exports.optional = optional;
exports.outOfRange = outOfRange;
exports.readOnly = readOnly;
exports.readWrite = readWrite;
exports.required = required;
exports.root = root;
exports.scope = scope;
exports.target = target;
exports.valid = valid;
exports.visited = visited;
exports.after = after;
exports.before = before;
exports.firstLetter = firstLetter;
exports.firstLine = firstLine;
exports.placeholder = placeholder;
exports.selection = selection;
exports.child = child;
exports.children = children;
exports.directSibling = directSibling;
exports.siblings = siblings;
exports.anyLink = anyLink;
exports.initial = initial;
exports.inherit_ = inherit_;
exports.unset = unset;
exports.$$var = $$var;
exports.varDefault = varDefault;
exports.auto = auto;
exports.none = none;
exports.text = text;
exports.pct = pct;
exports.ch = ch;
exports.cm = cm;
exports.em = em;
exports.ex = ex;
exports.mm = mm;
exports.pt = pt;
exports.px = px;
exports.pxFloat = pxFloat;
exports.rem = rem;
exports.vh = vh;
exports.vmin = vmin;
exports.vmax = vmax;
exports.zero = zero;
exports.deg = deg;
exports.rad = rad;
exports.grad = grad;
exports.turn = turn;
exports.ltr = ltr;
exports.rtl = rtl;
exports.absolute = absolute;
exports.relative = relative;
exports.$$static = $$static;
exports.fixed = fixed;
exports.sticky = sticky;
exports.horizontal = horizontal;
exports.vertical = vertical;
exports.smallCaps = smallCaps;
exports.italic = italic;
exports.oblique = oblique;
exports.hidden = hidden;
exports.visible = visible;
exports.scroll = scroll;
exports.rgb = rgb;
exports.rgba = rgba;
exports.hsl = hsl;
exports.hsla = hsla;
exports.hex = hex;
exports.currentColor = currentColor;
exports.local = local;
exports.paddingBox = paddingBox;
exports.borderBox = borderBox;
exports.contentBox = contentBox;
exports.noRepeat = noRepeat;
exports.space = space;
exports.repeat = repeat;
exports.minmax = minmax;
exports.repeatX = repeatX;
exports.repeatY = repeatY;
exports.contain = contain;
exports.cover = cover;
exports.row = row;
exports.rowReverse = rowReverse;
exports.column = column;
exports.columnReverse = columnReverse;
exports.wrap = wrap;
exports.nowrap = nowrap;
exports.wrapReverse = wrapReverse;
exports.inline = inline;
exports.block = block;
exports.contents = contents;
exports.flexBox = flexBox;
exports.grid = grid;
exports.inlineBlock = inlineBlock;
exports.inlineFlex = inlineFlex;
exports.inlineGrid = inlineGrid;
exports.inlineTable = inlineTable;
exports.listItem = listItem;
exports.runIn = runIn;
exports.table = table;
exports.tableCaption = tableCaption;
exports.tableColumnGroup = tableColumnGroup;
exports.tableHeaderGroup = tableHeaderGroup;
exports.tableFooterGroup = tableFooterGroup;
exports.tableRowGroup = tableRowGroup;
exports.tableCell = tableCell;
exports.tableColumn = tableColumn;
exports.tableRow = tableRow;
exports.flexStart = flexStart;
exports.flexEnd = flexEnd;
exports.center = center;
exports.stretch = stretch;
exports.spaceBetween = spaceBetween;
exports.spaceAround = spaceAround;
exports.spaceEvenly = spaceEvenly;
exports.baseline = baseline;
exports.forwards = forwards;
exports.backwards = backwards;
exports.both = both;
exports.infinite = infinite;
exports.count = count;
exports.paused = paused;
exports.running = running;
exports.inside = inside;
exports.outside = outside;
exports.solid = solid;
exports.dotted = dotted;
exports.dashed = dashed;
exports.underline = underline;
exports.overline = overline;
exports.lineThrough = lineThrough;
exports.clip = clip;
exports.ellipsis = ellipsis;
exports.wavy = wavy;
exports.$$double = $$double;
exports.uppercase = uppercase;
exports.lowercase = lowercase;
exports.capitalize = capitalize;
exports.sub = sub;
exports.$$super = $$super;
exports.textTop = textTop;
exports.textBottom = textBottom;
exports.middle = middle;
exports.normal = normal;
exports.breakAll = breakAll;
exports.keepAll = keepAll;
exports.breakWord = breakWord;
exports.reverse = reverse;
exports.alternate = alternate;
exports.alternateReverse = alternateReverse;
exports.fill = fill;
exports.content = content;
exports.maxContent = maxContent;
exports.minContent = minContent;
exports.fitContent = fitContent;
exports.all = all;
exports.round = round;
exports.miter = miter;
exports.bevel = bevel;
exports.butt = butt;
exports.square = square;
exports.thin = thin;
exports.extraLight = extraLight;
exports.light = light;
exports.medium = medium;
exports.semiBold = semiBold;
exports.bold = bold;
exports.extraBold = extraBold;
exports.lighter = lighter;
exports.bolder = bolder;
exports.fr = fr;
exports.vw = vw;
exports.localUrl = localUrl;
exports.url = url;
exports.linear = linear;
exports.ease = ease;
exports.easeIn = easeIn;
exports.easeOut = easeOut;
exports.easeInOut = easeInOut;
exports.stepStart = stepStart;
exports.stepEnd = stepEnd;
exports.steps = steps;
exports.cubicBezier = cubicBezier;
exports.marginBox = marginBox;
exports.fillBox = fillBox;
exports.strokeBox = strokeBox;
exports.viewBox = viewBox;
exports.translate = translate;
exports.translate3d = translate3d;
exports.translateX = translateX;
exports.translateY = translateY;
exports.translateZ = translateZ;
exports.scale = scale;
exports.scale3d = scale3d;
exports.scaleX = scaleX;
exports.scaleY = scaleY;
exports.scaleZ = scaleZ;
exports.rotate = rotate;
exports.rotate3d = rotate3d;
exports.rotateX = rotateX;
exports.rotateY = rotateY;
exports.rotateZ = rotateZ;
exports.skew = skew;
exports.skewX = skewX;
exports.skewY = skewY;
exports.linearGradient = linearGradient;
exports.repeatingLinearGradient = repeatingLinearGradient;
exports.radialGradient = radialGradient;
exports.repeatingRadialGradient = repeatingRadialGradient;
exports.areas = areas;
exports.ident = ident;
exports.numIdent = numIdent;
exports.contextMenu = contextMenu;
exports.help = help;
exports.pointer = pointer;
exports.progress = progress;
exports.wait = wait;
exports.cell = cell;
exports.crosshair = crosshair;
exports.verticalText = verticalText;
exports.alias = alias;
exports.copy = copy;
exports.move = move;
exports.noDrop = noDrop;
exports.notAllowed = notAllowed;
exports.grab = grab;
exports.grabbing = grabbing;
exports.allScroll = allScroll;
exports.colResize = colResize;
exports.rowResize = rowResize;
exports.nResize = nResize;
exports.eResize = eResize;
exports.sResize = sResize;
exports.wResize = wResize;
exports.neResize = neResize;
exports.nwResize = nwResize;
exports.seResize = seResize;
exports.swResize = swResize;
exports.ewResize = ewResize;
exports.nsResize = nsResize;
exports.neswResize = neswResize;
exports.nwseResize = nwseResize;
exports.zoomIn = zoomIn;
exports.zoomOut = zoomOut;
exports.flex3 = flex3;
exports.border = border;
exports.borderTop = borderTop;
exports.backgroundSize = backgroundSize;
exports.textDecoration = textDecoration;
exports.background = background;
exports.backgrounds = backgrounds;
exports.gridAutoColumns = gridAutoColumns;
exports.gridAutoRows = gridAutoRows;
exports.gridTemplateColumns = gridTemplateColumns;
exports.gridTemplateRows = gridTemplateRows;
exports.Calc = Calc;
exports.size = size;
exports.filter = filter;
exports.Transition = Transition;
exports.transitionValue = transitionValue;
exports.transitionList = transitionList;
exports.transition = transition;
exports.transitions = transitions;
exports.Animation = Animation;
exports.animationValue = animationValue;
exports.animation = animation;
exports.animations = animations;
exports.animationName = animationName;
exports.SVG = SVG;
exports.aliceblue = aliceblue;
exports.antiquewhite = antiquewhite;
exports.aqua = aqua;
exports.aquamarine = aquamarine;
exports.azure = azure;
exports.beige = beige;
exports.bisque = bisque;
exports.black = black;
exports.blanchedalmond = blanchedalmond;
exports.blue = blue;
exports.blueviolet = blueviolet;
exports.brown = brown;
exports.burlywood = burlywood;
exports.cadetblue = cadetblue;
exports.chartreuse = chartreuse;
exports.chocolate = chocolate;
exports.coral = coral;
exports.cornflowerblue = cornflowerblue;
exports.cornsilk = cornsilk;
exports.crimson = crimson;
exports.cyan = cyan;
exports.darkblue = darkblue;
exports.darkcyan = darkcyan;
exports.darkgoldenrod = darkgoldenrod;
exports.darkgray = darkgray;
exports.darkgreen = darkgreen;
exports.darkgrey = darkgrey;
exports.darkkhaki = darkkhaki;
exports.darkmagenta = darkmagenta;
exports.darkolivegreen = darkolivegreen;
exports.darkorange = darkorange;
exports.darkorchid = darkorchid;
exports.darkred = darkred;
exports.darksalmon = darksalmon;
exports.darkseagreen = darkseagreen;
exports.darkslateblue = darkslateblue;
exports.darkslategray = darkslategray;
exports.darkslategrey = darkslategrey;
exports.darkturquoise = darkturquoise;
exports.darkviolet = darkviolet;
exports.deeppink = deeppink;
exports.deepskyblue = deepskyblue;
exports.dimgray = dimgray;
exports.dimgrey = dimgrey;
exports.dodgerblue = dodgerblue;
exports.firebrick = firebrick;
exports.floralwhite = floralwhite;
exports.forestgreen = forestgreen;
exports.fuchsia = fuchsia;
exports.gainsboro = gainsboro;
exports.ghostwhite = ghostwhite;
exports.gold = gold;
exports.goldenrod = goldenrod;
exports.gray = gray;
exports.green = green;
exports.greenyellow = greenyellow;
exports.grey = grey;
exports.honeydew = honeydew;
exports.hotpink = hotpink;
exports.indianred = indianred;
exports.indigo = indigo;
exports.ivory = ivory;
exports.khaki = khaki;
exports.lavender = lavender;
exports.lavenderblush = lavenderblush;
exports.lawngreen = lawngreen;
exports.lemonchiffon = lemonchiffon;
exports.lightblue = lightblue;
exports.lightcoral = lightcoral;
exports.lightcyan = lightcyan;
exports.lightgoldenrodyellow = lightgoldenrodyellow;
exports.lightgray = lightgray;
exports.lightgreen = lightgreen;
exports.lightgrey = lightgrey;
exports.lightpink = lightpink;
exports.lightsalmon = lightsalmon;
exports.lightseagreen = lightseagreen;
exports.lightskyblue = lightskyblue;
exports.lightslategray = lightslategray;
exports.lightslategrey = lightslategrey;
exports.lightsteelblue = lightsteelblue;
exports.lightyellow = lightyellow;
exports.lime = lime;
exports.limegreen = limegreen;
exports.linen = linen;
exports.magenta = magenta;
exports.maroon = maroon;
exports.mediumaquamarine = mediumaquamarine;
exports.mediumblue = mediumblue;
exports.mediumorchid = mediumorchid;
exports.mediumpurple = mediumpurple;
exports.mediumseagreen = mediumseagreen;
exports.mediumslateblue = mediumslateblue;
exports.mediumspringgreen = mediumspringgreen;
exports.mediumturquoise = mediumturquoise;
exports.mediumvioletred = mediumvioletred;
exports.midnightblue = midnightblue;
exports.mintcream = mintcream;
exports.mistyrose = mistyrose;
exports.moccasin = moccasin;
exports.navajowhite = navajowhite;
exports.navy = navy;
exports.oldlace = oldlace;
exports.olive = olive;
exports.olivedrab = olivedrab;
exports.orange = orange;
exports.orangered = orangered;
exports.orchid = orchid;
exports.palegoldenrod = palegoldenrod;
exports.palegreen = palegreen;
exports.paleturquoise = paleturquoise;
exports.palevioletred = palevioletred;
exports.papayawhip = papayawhip;
exports.peachpuff = peachpuff;
exports.peru = peru;
exports.pink = pink;
exports.plum = plum;
exports.powderblue = powderblue;
exports.purple = purple;
exports.rebeccapurple = rebeccapurple;
exports.red = red;
exports.rosybrown = rosybrown;
exports.royalblue = royalblue;
exports.saddlebrown = saddlebrown;
exports.salmon = salmon;
exports.sandybrown = sandybrown;
exports.seagreen = seagreen;
exports.seashell = seashell;
exports.sienna = sienna;
exports.silver = silver;
exports.skyblue = skyblue;
exports.slateblue = slateblue;
exports.slategray = slategray;
exports.slategrey = slategrey;
exports.snow = snow;
exports.springgreen = springgreen;
exports.steelblue = steelblue;
exports.tan = tan;
exports.teal = teal;
exports.thistle = thistle;
exports.tomato = tomato;
exports.turquoise = turquoise;
exports.violet = violet;
exports.wheat = wheat;
exports.white = white;
exports.whitesmoke = whitesmoke;
exports.yellow = yellow;
exports.yellowgreen = yellowgreen;
exports.transparent = transparent;
exports.$$global = $$global;
exports.insertRule = insertRule;
exports.merge = merge;
exports.style = style;
exports.keyframes = keyframes;
exports.fontFace = fontFace;
/* include Not a pure module */


/***/ }),

/***/ "./node_modules/bs-css/src/Css_AtomicTypes.bs.js":
/*!*******************************************************!*\
  !*** ./node_modules/bs-css/src/Css_AtomicTypes.bs.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Generated by ReScript, PLEASE EDIT WITH CARE


var List = __webpack_require__(/*! bs-platform/lib/js/list.js */ "./node_modules/bs-platform/lib/js/list.js");
var $$String = __webpack_require__(/*! bs-platform/lib/js/string.js */ "./node_modules/bs-platform/lib/js/string.js");
var Belt_List = __webpack_require__(/*! bs-platform/lib/js/belt_List.js */ "./node_modules/bs-platform/lib/js/belt_List.js");

function toString(param) {
  if (param === "inherit_") {
    return "inherit";
  } else if (param === "unset") {
    return "unset";
  } else {
    return "initial";
  }
}

var Cascading = {
  initial: "initial",
  inherit_: "inherit_",
  unset: "unset",
  toString: toString
};

function $$var(x) {
  return {
          NAME: "var",
          VAL: x
        };
}

function varDefault(x, $$default) {
  return {
          NAME: "varDefault",
          VAL: [
            x,
            $$default
          ]
        };
}

function prefix(x) {
  if (x.startsWith("--")) {
    return x;
  } else {
    return "--" + x;
  }
}

function toString$1(param) {
  if (param.NAME === "var") {
    return "var(" + (prefix(param.VAL) + ")");
  }
  var match = param.VAL;
  return "var(" + (prefix(match[0]) + ("," + (match[1] + ")")));
}

function s(x) {
  return {
          NAME: "s",
          VAL: x
        };
}

function ms(x) {
  return {
          NAME: "ms",
          VAL: x
        };
}

function toString$2(param) {
  if (param.NAME === "ms") {
    return param.VAL.toString() + "ms";
  } else {
    return param.VAL.toString() + "s";
  }
}

var Time = {
  s: s,
  ms: ms,
  toString: toString$2
};

function pct(x) {
  return {
          NAME: "percent",
          VAL: x
        };
}

function toString$3(param) {
  return param.VAL.toString() + "%";
}

var Percentage = {
  pct: pct,
  toString: toString$3
};

function toString$4(param) {
  return "url(" + (param.VAL + ")");
}

var Url = {
  toString: toString$4
};

function ch(x) {
  return {
          NAME: "ch",
          VAL: x
        };
}

function em(x) {
  return {
          NAME: "em",
          VAL: x
        };
}

function ex(x) {
  return {
          NAME: "ex",
          VAL: x
        };
}

function rem(x) {
  return {
          NAME: "rem",
          VAL: x
        };
}

function vh(x) {
  return {
          NAME: "vh",
          VAL: x
        };
}

function vw(x) {
  return {
          NAME: "vw",
          VAL: x
        };
}

function vmin(x) {
  return {
          NAME: "vmin",
          VAL: x
        };
}

function vmax(x) {
  return {
          NAME: "vmax",
          VAL: x
        };
}

function px(x) {
  return {
          NAME: "px",
          VAL: x
        };
}

function pxFloat(x) {
  return {
          NAME: "pxFloat",
          VAL: x
        };
}

function cm(x) {
  return {
          NAME: "cm",
          VAL: x
        };
}

function mm(x) {
  return {
          NAME: "mm",
          VAL: x
        };
}

function inch(x) {
  return {
          NAME: "inch",
          VAL: x
        };
}

function pc(x) {
  return {
          NAME: "pc",
          VAL: x
        };
}

function pt(x) {
  return {
          NAME: "pt",
          VAL: x
        };
}

function toString$5(param) {
  if (typeof param === "string") {
    return "0";
  }
  var variant = param.NAME;
  if (variant === "pxFloat") {
    return param.VAL.toString() + "px";
  }
  if (variant === "inch") {
    return param.VAL.toString() + "in";
  }
  if (variant === "vmax") {
    return param.VAL.toString() + "vmax";
  }
  if (variant === "vmin") {
    return param.VAL.toString() + "vmin";
  }
  if (variant === "percent") {
    return param.VAL.toString() + "%";
  }
  if (variant === "ch") {
    return param.VAL.toString() + "ch";
  }
  if (variant === "cm") {
    return param.VAL.toString() + "cm";
  }
  if (variant === "em") {
    return param.VAL.toString() + "em";
  }
  if (variant === "ex") {
    return param.VAL.toString() + "ex";
  }
  if (variant === "mm") {
    return param.VAL.toString() + "mm";
  }
  if (variant === "pc") {
    return param.VAL.toString() + "pc";
  }
  if (variant === "pt") {
    return param.VAL.toString() + "pt";
  }
  if (variant === "px") {
    return param.VAL.toString() + "px";
  }
  if (variant === "vh") {
    return param.VAL.toString() + "vh";
  }
  if (variant === "vw") {
    return param.VAL.toString() + "vw";
  }
  if (variant === "rem") {
    return param.VAL.toString() + "rem";
  }
  var match = param.VAL;
  if (match[0] === "sub") {
    return "calc(" + (toString$5(match[1]) + (" - " + (toString$5(match[2]) + ")")));
  } else {
    return "calc(" + (toString$5(match[1]) + (" + " + (toString$5(match[2]) + ")")));
  }
}

var Length = {
  ch: ch,
  em: em,
  ex: ex,
  rem: rem,
  vh: vh,
  vw: vw,
  vmin: vmin,
  vmax: vmax,
  px: px,
  pxFloat: pxFloat,
  cm: cm,
  mm: mm,
  inch: inch,
  pc: pc,
  pt: pt,
  zero: "zero",
  toString: toString$5
};

function deg(x) {
  return {
          NAME: "deg",
          VAL: x
        };
}

function rad(x) {
  return {
          NAME: "rad",
          VAL: x
        };
}

function grad(x) {
  return {
          NAME: "grad",
          VAL: x
        };
}

function turn(x) {
  return {
          NAME: "turn",
          VAL: x
        };
}

function toString$6(param) {
  var variant = param.NAME;
  if (variant === "turn") {
    return param.VAL.toString() + "turn";
  } else if (variant === "deg") {
    return param.VAL.toString() + "deg";
  } else if (variant === "rad") {
    return param.VAL.toString() + "rad";
  } else {
    return param.VAL.toString() + "grad";
  }
}

var Angle = {
  deg: deg,
  rad: rad,
  grad: grad,
  turn: turn,
  toString: toString$6
};

function toString$7(param) {
  if (param === "rtl") {
    return "rtl";
  } else {
    return "ltr";
  }
}

var Direction = {
  ltr: "ltr",
  rtl: "rtl",
  toString: toString$7
};

function toString$8(param) {
  if (param === "fixed") {
    return "fixed";
  } else if (param === "static") {
    return "static";
  } else if (param === "sticky") {
    return "sticky";
  } else if (param === "relative") {
    return "relative";
  } else {
    return "absolute";
  }
}

var Position = {
  absolute: "absolute",
  relative: "relative",
  $$static: "static",
  fixed: "fixed",
  sticky: "sticky",
  toString: toString$8
};

function toString$9(param) {
  if (param === "none") {
    return "none";
  } else if (param === "vertical") {
    return "vertical";
  } else if (param === "horizontal") {
    return "horizontal";
  } else if (param === "inline") {
    return "inline";
  } else if (param === "block") {
    return "block";
  } else {
    return "both";
  }
}

var Resize = {
  none: "none",
  both: "both",
  horizontal: "horizontal",
  vertical: "vertical",
  block: "block",
  inline: "inline",
  toString: toString$9
};

function toString$10(param) {
  if (param === "normal") {
    return "normal";
  } else {
    return "smallCaps";
  }
}

var FontVariant = {
  normal: "normal",
  smallCaps: "smallCaps",
  toString: toString$10
};

function toString$11(param) {
  if (param === "oblique") {
    return "oblique";
  } else if (param === "normal") {
    return "normal";
  } else {
    return "italic";
  }
}

var FontStyle = {
  normal: "normal",
  italic: "italic",
  oblique: "oblique",
  toString: toString$11
};

function toString$12(param) {
  if (param === "fill") {
    return "fill";
  } else if (param === "minContent") {
    return "min-content";
  } else if (param === "fitContent") {
    return "fit-content";
  } else if (param === "maxContent") {
    return "max-content";
  } else if (param === "content") {
    return "content";
  } else {
    return "auto";
  }
}

var FlexBasis = {
  fill: "fill",
  content: "content",
  maxContent: "maxContent",
  minContent: "minContent",
  fitContent: "fitContent",
  toString: toString$12
};

function toString$13(param) {
  if (param === "scroll") {
    return "scroll";
  } else if (param === "hidden") {
    return "hidden";
  } else if (param === "visible") {
    return "visible";
  } else {
    return "auto";
  }
}

var Overflow = {
  hidden: "hidden",
  visible: "visible",
  scroll: "scroll",
  auto: "auto",
  toString: toString$13
};

function toString$14(param) {
  return "auto";
}

var Margin = {
  auto: "auto",
  toString: toString$14
};

function toString$15(param) {
  if (param === "columnDense") {
    return "column dense";
  } else if (param === "rowDense") {
    return "row dense";
  } else if (param === "row") {
    return "row";
  } else {
    return "column";
  }
}

var GridAutoFlow = {
  toString: toString$15
};

function toString$16(param) {
  return "normal";
}

var ColumnGap = {
  toString: toString$16
};

function toString$17(param) {
  if (param === "bottom") {
    return "bottom";
  } else if (param === "sub") {
    return "sub";
  } else if (param === "top") {
    return "top";
  } else if (param === "super") {
    return "super";
  } else if (param === "baseline") {
    return "baseline";
  } else if (param === "textBottom") {
    return "text-bottom";
  } else if (param === "textTop") {
    return "text-top";
  } else {
    return "middle";
  }
}

var VerticalAlign = {
  toString: toString$17
};

function steps(i, dir) {
  return {
          NAME: "steps",
          VAL: [
            i,
            dir
          ]
        };
}

function cubicBezier(a, b, c, d) {
  return {
          NAME: "cubicBezier",
          VAL: [
            a,
            b,
            c,
            d
          ]
        };
}

function toString$18(param) {
  if (typeof param === "string") {
    if (param === "easeInOut") {
      return "ease-in-out";
    } else if (param === "linear") {
      return "linear";
    } else if (param === "stepStart") {
      return "step-start";
    } else if (param === "stepEnd") {
      return "step-end";
    } else if (param === "easeIn") {
      return "ease-in";
    } else if (param === "easeOut") {
      return "ease-out";
    } else {
      return "ease";
    }
  }
  if (param.NAME === "steps") {
    var match = param.VAL;
    var i = match[0];
    if (match[1] === "start") {
      return "steps(" + (i.toString() + ", start)");
    } else {
      return "steps(" + (i.toString() + ", end)");
    }
  }
  var match$1 = param.VAL;
  return "cubic-bezier(" + (match$1[0].toString() + (", " + (match$1[1].toString() + (", " + (match$1[2].toString() + (", " + (match$1[3].toString() + ")")))))));
}

function toString$19(param) {
  if (typeof param === "string") {
    if (param === "autoFill") {
      return "auto-fill";
    } else {
      return "auto-fit";
    }
  } else {
    return param.VAL.toString();
  }
}

var RepeatValue = {
  toString: toString$19
};

function toString$20(param) {
  if (param === "none") {
    return "none";
  } else if (param === "circle") {
    return "circle";
  } else if (param === "lowerGreek") {
    return "lower-greek";
  } else if (param === "square") {
    return "square";
  } else if (param === "lowerAlpha") {
    return "lower-alpha";
  } else if (param === "upperAlpha") {
    return "upper-alpha";
  } else if (param === "decimal") {
    return "decimal";
  } else if (param === "lowerRoman") {
    return "lower-roman";
  } else if (param === "lowerLatin") {
    return "lower-latin";
  } else if (param === "upperRoman") {
    return "upper-roman";
  } else if (param === "upperLatin") {
    return "upper-latin";
  } else {
    return "disc";
  }
}

var ListStyleType = {
  toString: toString$20
};

function toString$21(param) {
  if (param === "inside") {
    return "inside";
  } else {
    return "outside";
  }
}

var ListStylePosition = {
  toString: toString$21
};

function toString$22(param) {
  if (param === "hidden") {
    return "hidden";
  } else if (param === "ridge") {
    return "ridge";
  } else if (param === "solid") {
    return "solid";
  } else if (param === "outset") {
    return "outset";
  } else if (param === "groove") {
    return "grove";
  } else if (param === "dashed") {
    return "dashed";
  } else if (param === "dotted") {
    return "dotted";
  } else if (param === "double") {
    return "double";
  } else if (param === "inset") {
    return "inset";
  } else {
    return "none";
  }
}

var OutlineStyle = {
  toString: toString$22
};

function toString$23(x) {
  if (typeof x === "string") {
    if (x === "thin") {
      return "100";
    } else if (x === "semiBold") {
      return "600";
    } else if (x === "bolder") {
      return "bolder";
    } else if (x === "light") {
      return "300";
    } else if (x === "extraBold") {
      return "800";
    } else if (x === "extraLight") {
      return "200";
    } else if (x === "medium") {
      return "500";
    } else if (x === "lighter") {
      return "lighter";
    } else if (x === "normal") {
      return "400";
    } else if (x === "black") {
      return "900";
    } else {
      return "700";
    }
  } else {
    return x.VAL.toString();
  }
}

var FontWeight = {
  thin: "thin",
  extraLight: "extraLight",
  light: "light",
  medium: "medium",
  semiBold: "semiBold",
  bold: "bold",
  extraBold: "extraBold",
  lighter: "lighter",
  bolder: "bolder",
  toString: toString$23
};

function translate(x, y) {
  return {
          NAME: "translate",
          VAL: [
            x,
            y
          ]
        };
}

function translate3d(x, y, z) {
  return {
          NAME: "translate3d",
          VAL: [
            x,
            y,
            z
          ]
        };
}

function translateX(x) {
  return {
          NAME: "translateX",
          VAL: x
        };
}

function translateY(y) {
  return {
          NAME: "translateY",
          VAL: y
        };
}

function translateZ(z) {
  return {
          NAME: "translateZ",
          VAL: z
        };
}

function scale(x, y) {
  return {
          NAME: "scale",
          VAL: [
            x,
            y
          ]
        };
}

function scale3d(x, y, z) {
  return {
          NAME: "scale3d",
          VAL: [
            x,
            y,
            z
          ]
        };
}

function scaleX(x) {
  return {
          NAME: "scaleX",
          VAL: x
        };
}

function scaleY(x) {
  return {
          NAME: "scaleY",
          VAL: x
        };
}

function scaleZ(x) {
  return {
          NAME: "scaleZ",
          VAL: x
        };
}

function rotate(a) {
  return {
          NAME: "rotate",
          VAL: a
        };
}

function rotate3d(x, y, z, a) {
  return {
          NAME: "rotate3d",
          VAL: [
            x,
            y,
            z,
            a
          ]
        };
}

function rotateX(a) {
  return {
          NAME: "rotateX",
          VAL: a
        };
}

function rotateY(a) {
  return {
          NAME: "rotateY",
          VAL: a
        };
}

function rotateZ(a) {
  return {
          NAME: "rotateZ",
          VAL: a
        };
}

function skew(a, a$prime) {
  return {
          NAME: "skew",
          VAL: [
            a,
            a$prime
          ]
        };
}

function skewX(a) {
  return {
          NAME: "skewX",
          VAL: a
        };
}

function skewY(a) {
  return {
          NAME: "skewY",
          VAL: a
        };
}

function toString$24(param) {
  var variant = param.NAME;
  if (variant === "translate") {
    var match = param.VAL;
    return "translate(" + (toString$5(match[0]) + (", " + (toString$5(match[1]) + ")")));
  }
  if (variant === "rotate") {
    return "rotate(" + (toString$6(param.VAL) + ")");
  }
  if (variant === "skew") {
    var match$1 = param.VAL;
    return "skew(" + (toString$6(match$1[0]) + (", " + (toString$6(match$1[1]) + ")")));
  }
  if (variant === "scale3d") {
    var match$2 = param.VAL;
    return "scale3d(" + (match$2[0].toString() + (", " + (match$2[1].toString() + (", " + (match$2[2].toString() + ")")))));
  }
  if (variant === "rotateX") {
    return "rotateX(" + (toString$6(param.VAL) + ")");
  }
  if (variant === "rotateY") {
    return "rotateY(" + (toString$6(param.VAL) + ")");
  }
  if (variant === "rotateZ") {
    return "rotateZ(" + (toString$6(param.VAL) + ")");
  }
  if (variant === "scale") {
    var match$3 = param.VAL;
    var x = match$3[0];
    var y = match$3[1];
    return "scale(" + (x.toString() + (", " + (y.toString() + ")")));
  }
  if (variant === "skewX") {
    return "skewX(" + (toString$6(param.VAL) + ")");
  }
  if (variant === "skewY") {
    return "skewY(" + (toString$6(param.VAL) + ")");
  }
  if (variant === "translateX") {
    return "translateX(" + (toString$5(param.VAL) + ")");
  }
  if (variant === "translateY") {
    return "translateY(" + (toString$5(param.VAL) + ")");
  }
  if (variant === "translateZ") {
    return "translateZ(" + (toString$5(param.VAL) + ")");
  }
  if (variant === "rotate3d") {
    var match$4 = param.VAL;
    return "rotate3d(" + (match$4[0].toString() + (", " + (match$4[1].toString() + (", " + (match$4[2].toString() + (", " + (toString$6(match$4[3]) + ")")))))));
  }
  if (variant !== "translate3d") {
    if (variant === "scaleX") {
      return "scaleX(" + (param.VAL.toString() + ")");
    } else if (variant === "scaleY") {
      return "scaleY(" + (param.VAL.toString() + ")");
    } else if (variant === "scaleZ") {
      return "scaleZ(" + (param.VAL.toString() + ")");
    } else {
      return "perspective(" + (param.VAL.toString() + ")");
    }
  }
  var match$5 = param.VAL;
  var x$1 = match$5[0];
  var y$1 = match$5[1];
  var z = match$5[2];
  return "translate3d(" + (toString$5(x$1) + (", " + (toString$5(y$1) + (", " + (toString$5(z) + ")")))));
}

function toString$25(param) {
  if (param === "alternateReverse") {
    return "alternate-reverse";
  } else if (param === "normal") {
    return "normal";
  } else if (param === "alternate") {
    return "alternate";
  } else {
    return "reverse";
  }
}

var AnimationDirection = {
  toString: toString$25
};

function toString$26(param) {
  if (param === "none") {
    return "none";
  } else if (param === "backwards") {
    return "backwards";
  } else if (param === "forwards") {
    return "forwards";
  } else {
    return "both";
  }
}

var AnimationFillMode = {
  toString: toString$26
};

function toString$27(param) {
  if (typeof param === "string") {
    return "infinite";
  } else {
    return param.VAL.toString();
  }
}

var AnimationIterationCount = {
  toString: toString$27
};

function toString$28(param) {
  if (param === "paused") {
    return "paused";
  } else {
    return "running";
  }
}

var AnimationPlayState = {
  toString: toString$28
};

function toString$29(x) {
  if (x === "cell") {
    return "cell";
  } else if (x === "copy") {
    return "copy";
  } else if (x === "swResize") {
    return "sw-resize";
  } else if (x === "grab") {
    return "grab";
  } else if (x === "help") {
    return "help";
  } else if (x === "move") {
    return "move";
  } else if (x === "none") {
    return "none";
  } else if (x === "text") {
    return "text";
  } else if (x === "rowResize") {
    return "row-resize";
  } else if (x === "wait") {
    return "wait";
  } else if (x === "pointer") {
    return "pointer";
  } else if (x === "seResize") {
    return "se-resize";
  } else if (x === "zoomOut") {
    return "zoom-out";
  } else if (x === "sResize") {
    return "s-resize";
  } else if (x === "zoomIn") {
    return "zoom-in";
  } else if (x === "grabbing") {
    return "grabbing";
  } else if (x === "nsResize") {
    return "ns-resize";
  } else if (x === "nwseResize") {
    return "nwse-resize";
  } else if (x === "progress") {
    return "progress";
  } else if (x === "crosshair") {
    return "crosshair";
  } else if (x === "wResize") {
    return "w-resize";
  } else if (x === "noDrop") {
    return "no-drop";
  } else if (x === "allScroll") {
    return "all-scroll";
  } else if (x === "verticalText") {
    return "vertical-text";
  } else if (x === "nResize") {
    return "n-resize";
  } else if (x === "default") {
    return "default";
  } else if (x === "neswResize") {
    return "nesw-resize";
  } else if (x === "alias") {
    return "alias";
  } else if (x === "ewResize") {
    return "ew-resize";
  } else if (x === "eResize") {
    return "e-resize";
  } else if (x === "nwResize") {
    return "nw-resize";
  } else if (x === "contextMenu") {
    return "context-menu";
  } else if (x === "colResize") {
    return "col-resize";
  } else if (x === "notAllowed") {
    return "not-allowed";
  } else if (x === "neResize") {
    return "ne-resize";
  } else {
    return "auto";
  }
}

var Cursor = {
  auto: "auto",
  $$default: "default",
  none: "none",
  contextMenu: "contextMenu",
  help: "help",
  pointer: "pointer",
  progress: "progress",
  wait: "wait",
  cell: "cell",
  crosshair: "crosshair",
  text: "text",
  verticalText: "verticalText",
  alias: "alias",
  copy: "copy",
  move: "move",
  noDrop: "noDrop",
  notAllowed: "notAllowed",
  grab: "grab",
  grabbing: "grabbing",
  allScroll: "allScroll",
  colResize: "colResize",
  rowResize: "rowResize",
  nResize: "nResize",
  eResize: "eResize",
  sResize: "sResize",
  wResize: "wResize",
  neResize: "neResize",
  nwResize: "nwResize",
  seResize: "seResize",
  swResize: "swResize",
  ewResize: "ewResize",
  nsResize: "nsResize",
  neswResize: "neswResize",
  nwseResize: "nwseResize",
  zoomIn: "zoomIn",
  zoomOut: "zoomOut",
  toString: toString$29
};

function rgb(r, g, b) {
  return {
          NAME: "rgb",
          VAL: [
            r,
            g,
            b
          ]
        };
}

function rgba(r, g, b, a) {
  return {
          NAME: "rgba",
          VAL: [
            r,
            g,
            b,
            a
          ]
        };
}

function hsl(h, s, l) {
  return {
          NAME: "hsl",
          VAL: [
            h,
            s,
            l
          ]
        };
}

function hsla(h, s, l, a) {
  return {
          NAME: "hsla",
          VAL: [
            h,
            s,
            l,
            a
          ]
        };
}

function hex(x) {
  return {
          NAME: "hex",
          VAL: x
        };
}

function string_of_alpha(pc) {
  if (pc.NAME === "num") {
    return pc.VAL.toString();
  } else {
    return toString$3(pc);
  }
}

function toString$30(param) {
  if (typeof param === "string") {
    if (param === "transparent") {
      return "transparent";
    } else {
      return "currentColor";
    }
  }
  var variant = param.NAME;
  if (variant === "rgba") {
    var match = param.VAL;
    return "rgba(" + (match[0].toString() + (", " + (match[1].toString() + (", " + (match[2].toString() + (", " + (string_of_alpha(match[3]) + ")")))))));
  }
  if (variant === "hex") {
    return "#" + param.VAL;
  }
  if (variant === "hsl") {
    var match$1 = param.VAL;
    return "hsl(" + (toString$6(match$1[0]) + (", " + (toString$3(match$1[1]) + (", " + (toString$3(match$1[2]) + ")")))));
  }
  if (variant === "rgb") {
    var match$2 = param.VAL;
    return "rgb(" + (match$2[0].toString() + (", " + (match$2[1].toString() + (", " + (match$2[2].toString() + ")")))));
  }
  var match$3 = param.VAL;
  return "hsla(" + (toString$6(match$3[0]) + (", " + (toString$3(match$3[1]) + (", " + (toString$3(match$3[2]) + (", " + (string_of_alpha(match$3[3]) + ")")))))));
}

function toString$31(param) {
  if (param === "hidden") {
    return "hidden";
  } else if (param === "ridge") {
    return "ridge";
  } else if (param === "solid") {
    return "solid";
  } else if (param === "outset") {
    return "outset";
  } else if (param === "groove") {
    return "groove";
  } else if (param === "dashed") {
    return "dashed";
  } else if (param === "dotted") {
    return "dotted";
  } else if (param === "double") {
    return "double";
  } else if (param === "inset") {
    return "inset";
  } else {
    return "none";
  }
}

var BorderStyle = {
  toString: toString$31
};

function toString$32(param) {
  if (param === "none") {
    return "none";
  } else {
    return "auto";
  }
}

var PointerEvents = {
  toString: toString$32
};

function toString$33(param) {
  return "none";
}

var Perspective = {
  toString: toString$33
};

function toString$34(param) {
  return "normal";
}

var LetterSpacing = {
  normal: "normal",
  toString: toString$34
};

function toString$35(param) {
  if (typeof param === "string") {
    return "normal";
  } else {
    return param.VAL.toString();
  }
}

var LineHeight = {
  toString: toString$35
};

function toString$36(param) {
  return "normal";
}

var WordSpacing = {
  toString: toString$36
};

function toString$37(param) {
  if (param === "inline") {
    return "inline";
  } else if (param === "block") {
    return "block";
  } else {
    return "run-in";
  }
}

var DisplayOutside = {
  toString: toString$37
};

function toString$38(param) {
  if (param === "grid") {
    return "grid";
  } else if (param === "table") {
    return "table";
  } else {
    return "flex";
  }
}

var DisplayInside = {
  toString: toString$38
};

function toString$39(param) {
  return "list-item";
}

var DisplayListItem = {
  toString: toString$39
};

function toString$40(param) {
  if (param === "tableRow") {
    return "table-row";
  } else if (param === "tableRowGroup") {
    return "table-row-group";
  } else if (param === "tableColumn") {
    return "table-column";
  } else if (param === "tableHeaderGroup") {
    return "table-header-group";
  } else if (param === "tableCell") {
    return "table-cell";
  } else if (param === "tableColumnGroup") {
    return "table-column-group";
  } else if (param === "tableCaption") {
    return "table-caption";
  } else {
    return "table-footer-group";
  }
}

var DisplayInternal = {
  toString: toString$40
};

function toString$41(param) {
  if (param === "contents") {
    return "contents";
  } else {
    return "none";
  }
}

var DisplayBox = {
  toString: toString$41
};

function toString$42(param) {
  if (param === "inlineBlock") {
    return "inline-block";
  } else if (param === "inlineFlex") {
    return "inline-flex";
  } else if (param === "inlineGrid") {
    return "inline-grid";
  } else {
    return "inline-table";
  }
}

var DisplayLegacy = {
  toString: toString$42
};

function toString$43(param) {
  if (param === "stretch") {
    return "stretch";
  } else if (param === "normal") {
    return "normal";
  } else {
    return "auto";
  }
}

var JustifySelf = {
  toString: toString$43
};

function toString$44(param) {
  if (param === "left") {
    return "left";
  } else if (param === "right") {
    return "right";
  } else if (param === "selfEnd") {
    return "self-end";
  } else if (param === "start") {
    return "start";
  } else if (param === "center") {
    return "center";
  } else if (param === "flexStart") {
    return "flex-start";
  } else if (param === "flexEnd") {
    return "flex-end";
  } else if (param === "selfStart") {
    return "self-start";
  } else {
    return "end";
  }
}

var PositionalAlignment = {
  toString: toString$44
};

function toString$45(param) {
  return "baseline";
}

var BaselineAlignment = {
  toString: toString$45
};

function toString$46(param) {
  return "normal";
}

var NormalAlignment = {
  toString: toString$46
};

function toString$47(param) {
  if (param === "spaceAround") {
    return "space-around";
  } else if (param === "stretch") {
    return "stretch";
  } else if (param === "spaceBetween") {
    return "space-between";
  } else {
    return "space-evenly";
  }
}

var DistributedAlignment = {
  toString: toString$47
};

function toString$48(param) {
  if (param === "right") {
    return "right";
  } else if (param === "justify") {
    return "justify";
  } else if (param === "center") {
    return "center";
  } else {
    return "left";
  }
}

var TextAlign = {
  toString: toString$48
};

function toString$49(param) {
  if (param === "normal") {
    return "normal";
  } else if (param === "keepAll") {
    return "keep-all";
  } else {
    return "break-all";
  }
}

var WordBreak = {
  toString: toString$49
};

function toString$50(param) {
  if (param === "preLine") {
    return "pre-line";
  } else if (param === "preWrap") {
    return "pre-wrap";
  } else if (param === "breakSpaces") {
    return "break-spaces";
  } else if (param === "normal") {
    return "normal";
  } else if (param === "nowrap") {
    return "nowrap";
  } else {
    return "pre";
  }
}

var WhiteSpace = {
  toString: toString$50
};

function toString$51(param) {
  if (param === "normal") {
    return "normal";
  } else {
    return "stretch";
  }
}

var AlignItems = {
  toString: toString$51
};

function toString$52(param) {
  if (param === "stretch") {
    return "stretch";
  } else if (param === "normal") {
    return "normal";
  } else {
    return "auto";
  }
}

var AlignSelf = {
  toString: toString$52
};

function toString$53(param) {
  if (param === "start") {
    return "start";
  } else if (param === "center") {
    return "center";
  } else if (param === "flexStart") {
    return "flex-start";
  } else if (param === "flexEnd") {
    return "flex-end";
  } else {
    return "end";
  }
}

var AlignContent = {
  toString: toString$53
};

function toString$54(param) {
  if (param === "none") {
    return "none";
  } else if (param === "cover") {
    return "cover";
  } else if (param === "contain") {
    return "contain";
  } else if (param === "scaleDown") {
    return "scale-down";
  } else {
    return "fill";
  }
}

var ObjectFit = {
  toString: toString$54
};

function toString$55(param) {
  if (param === "inlineStart") {
    return "inline-start";
  } else if (param === "left") {
    return "left";
  } else if (param === "none") {
    return "none";
  } else if (param === "right") {
    return "right";
  } else if (param === "inlineEnd") {
    return "inline-end";
  } else {
    return "both";
  }
}

var Clear = {
  toString: toString$55
};

function toString$56(param) {
  if (param === "left") {
    return "left";
  } else if (param === "none") {
    return "none";
  } else if (param === "right") {
    return "right";
  } else if (param === "inlineEnd") {
    return "inline-end";
  } else {
    return "inline-start";
  }
}

var Float = {
  toString: toString$56
};

function toString$57(param) {
  if (param === "hidden") {
    return "hidden";
  } else if (param === "visible") {
    return "visible";
  } else {
    return "collapse";
  }
}

var Visibility = {
  toString: toString$57
};

function toString$58(param) {
  if (param === "fixed") {
    return "fixed";
  } else {
    return "auto";
  }
}

var TableLayout = {
  toString: toString$58
};

function toString$59(param) {
  if (param === "separate") {
    return "separate";
  } else {
    return "collapse";
  }
}

var BorderCollapse = {
  toString: toString$59
};

function toString$60(param) {
  if (param === "wrapReverse") {
    return "wrap-reverse";
  } else if (param === "nowrap") {
    return "nowrap";
  } else {
    return "wrap";
  }
}

var FlexWrap = {
  toString: toString$60
};

function toString$61(param) {
  if (param === "row") {
    return "row";
  } else if (param === "columnReverse") {
    return "column-reverse";
  } else if (param === "rowReverse") {
    return "row-reverse";
  } else {
    return "column";
  }
}

var FlexDirection = {
  toString: toString$61
};

function toString$62(param) {
  if (param === "borderBox") {
    return "border-box";
  } else {
    return "content-box";
  }
}

var BoxSizing = {
  toString: toString$62
};

function toString$63(param) {
  if (typeof param === "string") {
    return "auto";
  } else {
    return param.VAL.toString();
  }
}

var ColumnCount = {
  toString: toString$63
};

function toString$64(param) {
  if (param === "none") {
    return "none";
  } else if (param === "text") {
    return "text";
  } else if (param === "all") {
    return "all";
  } else if (param === "contain") {
    return "contain";
  } else {
    return "auto";
  }
}

var UserSelect = {
  toString: toString$64
};

function toString$65(param) {
  if (param === "capitalize") {
    return "capitalize";
  } else if (param === "lowercase") {
    return "lowercase";
  } else if (param === "uppercase") {
    return "uppercase";
  } else {
    return "none";
  }
}

var TextTransform = {
  toString: toString$65
};

function areas(x) {
  return {
          NAME: "areas",
          VAL: x
        };
}

function toString$66(param) {
  if (typeof param === "string") {
    return "none";
  } else {
    return $$String.trim(List.fold_left((function (carry, elem) {
                      return carry + ("'" + (elem + "' "));
                    }), "", param.VAL));
  }
}

var GridTemplateAreas = {
  areas: areas,
  toString: toString$66
};

function ident(x) {
  return {
          NAME: "ident",
          VAL: x
        };
}

function num(x) {
  return {
          NAME: "num",
          VAL: x
        };
}

function numIdent(x, y) {
  return {
          NAME: "numIdent",
          VAL: [
            x,
            y
          ]
        };
}

function span(x) {
  return {
          NAME: "span",
          VAL: x
        };
}

function toString$67(t) {
  if (typeof t === "string") {
    return "auto";
  }
  var variant = t.NAME;
  if (variant === "numIdent") {
    var match = t.VAL;
    return String(match[0]) + (" " + match[1]);
  }
  if (variant === "num") {
    return String(t.VAL);
  }
  if (variant === "ident") {
    return t.VAL;
  }
  var e = t.VAL;
  return "span " + (
          e.NAME === "ident" ? e.VAL : String(e.VAL)
        );
}

var GridArea = {
  auto: "auto",
  ident: ident,
  num: num,
  numIdent: numIdent,
  span: span,
  toString: toString$67
};

function toString$68(param) {
  if (typeof param === "string") {
    return "none";
  }
  var variant = param.NAME;
  if (variant === "dropShadow") {
    var match = param.VAL;
    if (match.NAME === "num") {
      return "drop-shadow(" + (String(match.VAL) + ")");
    } else {
      return "drop-shadow(" + (match.VAL.toString() + "%)");
    }
  }
  if (variant === "brightness") {
    var match$1 = param.VAL;
    if (match$1.NAME === "num") {
      return "brightness(" + (String(match$1.VAL) + ")");
    } else {
      return "brightness(" + (match$1.VAL.toString() + "%)");
    }
  }
  if (variant === "opacity") {
    var match$2 = param.VAL;
    if (match$2.NAME === "num") {
      return "opacity(" + (String(match$2.VAL) + ")");
    } else {
      return "opacity(" + (match$2.VAL.toString() + "%)");
    }
  }
  if (variant === "grayscale") {
    var match$3 = param.VAL;
    if (match$3.NAME === "num") {
      return "grayscale(" + (String(match$3.VAL) + ")");
    } else {
      return "grayscale(" + (match$3.VAL.toString() + "%)");
    }
  }
  if (variant === "sepia") {
    var match$4 = param.VAL;
    if (match$4.NAME === "num") {
      return "sepia(" + (String(match$4.VAL) + ")");
    } else {
      return "sepia(" + (match$4.VAL.toString() + "%)");
    }
  }
  if (variant === "saturate") {
    var match$5 = param.VAL;
    if (match$5.NAME === "num") {
      return "saturate(" + (String(match$5.VAL) + ")");
    } else {
      return "saturate(" + (match$5.VAL.toString() + "%)");
    }
  }
  if (variant === "invert") {
    var match$6 = param.VAL;
    if (match$6.NAME === "num") {
      return "invert(" + (String(match$6.VAL) + ")");
    } else {
      return "invert(" + (match$6.VAL.toString() + "%)");
    }
  }
  if (variant === "contrast") {
    var match$7 = param.VAL;
    if (match$7.NAME === "num") {
      return "contrast(" + (String(match$7.VAL) + ")");
    } else {
      return "contrast(" + (match$7.VAL.toString() + "%)");
    }
  }
  if (variant !== "hueRotate") {
    return "blur(" + (toString$5(param.VAL) + ")");
  }
  var h = param.VAL;
  if (typeof h === "string") {
    return "hue-rotate(0deg)";
  } else {
    return "hue-rotate(" + (toString$6(h) + ")");
  }
}

function toString$69(param) {
  if (param === "local") {
    return "local";
  } else if (param === "fixed") {
    return "fixed";
  } else {
    return "scroll";
  }
}

var BackgroundAttachment = {
  toString: toString$69
};

function toString$70(param) {
  if (param === "borderBox") {
    return "border-box";
  } else if (param === "paddingBox") {
    return "padding-box";
  } else {
    return "content-box";
  }
}

var BackgroundClip = {
  toString: toString$70
};

function toString$71(param) {
  if (param === "borderBox") {
    return "border-box";
  } else if (param === "paddingBox") {
    return "padding-box";
  } else {
    return "content-box";
  }
}

var BackgroundOrigin = {
  toString: toString$71
};

function toString$72(param) {
  if (param === "right") {
    return "right";
  } else if (param === "center") {
    return "center";
  } else {
    return "left";
  }
}

var X = {
  toString: toString$72
};

function toString$73(param) {
  if (param === "top") {
    return "top";
  } else if (param === "center") {
    return "center";
  } else {
    return "bottom";
  }
}

var Y = {
  toString: toString$73
};

function toString$74(param) {
  if (param === "bottom") {
    return "bottom";
  } else if (param === "right") {
    return "right";
  } else if (param === "top") {
    return "top";
  } else if (param === "center") {
    return "center";
  } else {
    return "left";
  }
}

var BackgroundPosition = {
  X: X,
  Y: Y,
  toString: toString$74
};

function toString$75(param) {
  if (param === "round") {
    return "round";
  } else if (param === "space") {
    return "space";
  } else if (param === "repeat") {
    return "repeat";
  } else if (param === "repeatX") {
    return "repeat-x";
  } else if (param === "repeatY") {
    return "repeat-y";
  } else {
    return "no-repeat";
  }
}

var BackgroundRepeat = {
  toString: toString$75
};

function toString$76(param) {
  if (typeof param === "string") {
    if (param === "ellipsis") {
      return "ellipsis";
    } else {
      return "clip";
    }
  } else {
    return param.VAL;
  }
}

var TextOverflow = {
  toString: toString$76
};

function toString$77(param) {
  if (param === "none") {
    return "none";
  } else if (param === "underline") {
    return "underline";
  } else if (param === "lineThrough") {
    return "line-through";
  } else if (param === "blink") {
    return "blink";
  } else {
    return "overline";
  }
}

var TextDecorationLine = {
  toString: toString$77
};

function toString$78(param) {
  if (param === "solid") {
    return "solid";
  } else if (param === "dashed") {
    return "dashed";
  } else if (param === "dotted") {
    return "dotted";
  } else if (param === "double") {
    return "double";
  } else {
    return "wavy";
  }
}

var TextDecorationStyle = {
  toString: toString$78
};

function toString$79(param) {
  if (param === "fitContent") {
    return "fit-content";
  } else {
    return "auto";
  }
}

var Width = {
  toString: toString$79
};

function toString$80(param) {
  return "none";
}

var MaxWidth = {
  toString: toString$80
};

function toString$81(param) {
  return "auto";
}

var Height = {
  toString: toString$81
};

function toString$82(param) {
  return "none";
}

var MaxHeight = {
  toString: toString$82
};

function toString$83(param) {
  if (param === "anywhere") {
    return "anywhere";
  } else if (param === "breakWord") {
    return "break-word";
  } else {
    return "normal";
  }
}

var OverflowWrap = {
  toString: toString$83
};

function linearGradient(angle, stops) {
  return {
          NAME: "linearGradient",
          VAL: [
            angle,
            stops
          ]
        };
}

function repeatingLinearGradient(angle, stops) {
  return {
          NAME: "repeatingLinearGradient",
          VAL: [
            angle,
            stops
          ]
        };
}

function radialGradient(stops) {
  return {
          NAME: "radialGradient",
          VAL: stops
        };
}

function repeatingRadialGradient(stops) {
  return {
          NAME: "repeatingRadialGradient",
          VAL: stops
        };
}

function string_of_stops(stops) {
  var strings = Belt_List.map(stops, (function (param) {
          return toString$30(param[1]) + (" " + toString$5(param[0]));
        }));
  var separator = ", ";
  var _strings = strings;
  var _acc = "";
  while(true) {
    var acc = _acc;
    var strings$1 = _strings;
    if (!strings$1) {
      return acc;
    }
    var xs = strings$1.tl;
    var x = strings$1.hd;
    if (!xs) {
      return acc + x;
    }
    _acc = acc + (x + separator);
    _strings = xs;
    continue ;
  };
}

function toString$84(param) {
  var variant = param.NAME;
  if (variant === "repeatingLinearGradient") {
    var match = param.VAL;
    return "repeating-linear-gradient(" + (toString$6(match[0]) + (", " + (string_of_stops(match[1]) + ")")));
  }
  if (variant === "radialGradient") {
    return "radial-gradient(" + (string_of_stops(param.VAL) + ")");
  }
  if (variant !== "linearGradient") {
    return "repeating-radial-gradient(" + (string_of_stops(param.VAL) + ")");
  }
  var match$1 = param.VAL;
  return "linear-gradient(" + (toString$6(match$1[0]) + (", " + (string_of_stops(match$1[1]) + ")")));
}

function toString$85(param) {
  return "none";
}

var BackgroundImage = {
  toString: toString$85
};

function toString$86(param) {
  if (param === "marginBox") {
    return "margin-box";
  } else if (param === "strokeBox") {
    return "stroke-box";
  } else if (param === "borderBox") {
    return "border-box";
  } else if (param === "fillBox") {
    return "fill-box";
  } else if (param === "viewBox") {
    return "view-box";
  } else if (param === "paddingBox") {
    return "padding-box";
  } else {
    return "content-box";
  }
}

var GeometyBox = {
  marginBox: "marginBox",
  borderBox: "borderBox",
  paddingBox: "paddingBox",
  contentBox: "contentBox",
  fillBox: "fillBox",
  strokeBox: "strokeBox",
  viewBox: "viewBox",
  toString: toString$86
};

function toString$87(param) {
  return "none";
}

var ClipPath = {
  toString: toString$87
};

function toString$88(param) {
  if (param === "visible") {
    return "visible";
  } else {
    return "hidden";
  }
}

var BackfaceVisibility = {
  toString: toString$88
};

function toString$89(param) {
  if (param === "none") {
    return "none";
  } else if (param === "initial") {
    return "initial";
  } else {
    return "auto";
  }
}

var Flex = {
  toString: toString$89
};

function toString$90(param) {
  if (param === "preserve3d") {
    return "preserve-3d";
  } else {
    return "flat";
  }
}

var TransformStyle = {
  toString: toString$90
};

function toString$91(param) {
  return "none";
}

var ListStyleImage = {
  toString: toString$91
};

function toString$92(param) {
  if (typeof param === "string") {
    if (param === "cursive") {
      return "cursive";
    } else if (param === "sansSerif") {
      return "sans-serif";
    } else if (param === "monospace") {
      return "monospace";
    } else if (param === "systemUi") {
      return "system-ui";
    } else if (param === "emoji") {
      return "emoji";
    } else if (param === "serif") {
      return "serif";
    } else if (param === "fantasy") {
      return "fantasy";
    } else if (param === "fangsong") {
      return "fangsong";
    } else {
      return "math";
    }
  } else {
    return param.VAL;
  }
}

function toString$93(param) {
  if (param === "swap") {
    return "swap";
  } else if (param === "optional") {
    return "optional";
  } else if (param === "fallback") {
    return "fallback";
  } else if (param === "block") {
    return "block";
  } else {
    return "auto";
  }
}

var toString$94 = toString$20;

var CounterStyleType = {
  toString: toString$94
};

function counter(styleOpt, name) {
  var style = styleOpt !== undefined ? styleOpt : "unset";
  return {
          NAME: "counter",
          VAL: [
            name,
            style
          ]
        };
}

function toString$95(param) {
  var match = param.VAL;
  var style = match[1];
  var counter = match[0];
  if (style === "unset") {
    return "counter(" + (counter + ")");
  } else {
    return "counter(" + (counter + ("," + (toString$20(style) + ")")));
  }
}

var Counter = {
  counter: counter,
  toString: toString$95
};

function counters(styleOpt, separatorOpt, name) {
  var style = styleOpt !== undefined ? styleOpt : "unset";
  var separator = separatorOpt !== undefined ? separatorOpt : "";
  return {
          NAME: "counters",
          VAL: [
            name,
            separator,
            style
          ]
        };
}

function toString$96(param) {
  var match = param.VAL;
  var style = match[2];
  var separator = match[1];
  var name = match[0];
  if (style === "unset") {
    return "counters(" + (name + (",\"" + (separator + "\")")));
  } else {
    return "counters(" + (name + (",\"" + (separator + ("\"," + (toString$20(style) + ")")))));
  }
}

var Counters = {
  counters: counters,
  toString: toString$96
};

function increment(valueOpt, name) {
  var value = valueOpt !== undefined ? valueOpt : 1;
  return {
          NAME: "increment",
          VAL: [
            name,
            value
          ]
        };
}

function toString$97(param) {
  if (typeof param === "string") {
    return "none";
  }
  var match = param.VAL;
  return match[0] + (" " + String(match[1]));
}

var CounterIncrement = {
  increment: increment,
  toString: toString$97
};

function reset(valueOpt, name) {
  var value = valueOpt !== undefined ? valueOpt : 0;
  return {
          NAME: "reset",
          VAL: [
            name,
            value
          ]
        };
}

function toString$98(param) {
  if (typeof param === "string") {
    return "none";
  }
  var match = param.VAL;
  return match[0] + (" " + String(match[1]));
}

var CounterReset = {
  reset: reset,
  toString: toString$98
};

function set(valueOpt, name) {
  var value = valueOpt !== undefined ? valueOpt : 0;
  return {
          NAME: "set",
          VAL: [
            name,
            value
          ]
        };
}

function toString$99(param) {
  if (typeof param === "string") {
    return "none";
  }
  var match = param.VAL;
  return match[0] + (" " + String(match[1]));
}

var CounterSet = {
  set: set,
  toString: toString$99
};

function toString$100(param) {
  if (typeof param === "string") {
    if (param === "none") {
      return "none";
    } else if (param === "openQuote") {
      return "open-quote";
    } else if (param === "closeQuote") {
      return "close-quote";
    } else if (param === "normal") {
      return "normal";
    } else if (param === "noOpenQuote") {
      return "no-open-quote";
    } else {
      return "no-close-quote";
    }
  } else if (param.NAME === "text") {
    return "\"" + param.VAL + "\"";
  } else {
    return "attr(" + (param.VAL + ")");
  }
}

var Content = {
  toString: toString$100
};

function toString$101(param) {
  if (param === "contextFill") {
    return "context-fill";
  } else if (param === "contextStroke") {
    return "context-stroke";
  } else {
    return "none";
  }
}

var Fill = {
  contextFill: "contextFill",
  contextStroke: "contextStroke",
  toString: toString$101
};

var SVG = {
  Fill: Fill
};

var Var = {
  $$var: $$var,
  varDefault: varDefault,
  toString: toString$1
};

var TimingFunction = {
  linear: "linear",
  ease: "ease",
  easeIn: "easeIn",
  easeOut: "easeOut",
  easeInOut: "easeInOut",
  stepStart: "stepStart",
  stepEnd: "stepEnd",
  steps: steps,
  cubicBezier: cubicBezier,
  toString: toString$18
};

var Transform = {
  translate: translate,
  translate3d: translate3d,
  translateX: translateX,
  translateY: translateY,
  translateZ: translateZ,
  scale: scale,
  scale3d: scale3d,
  scaleX: scaleX,
  scaleY: scaleY,
  scaleZ: scaleZ,
  rotate: rotate,
  rotate3d: rotate3d,
  rotateX: rotateX,
  rotateY: rotateY,
  rotateZ: rotateZ,
  skew: skew,
  skewX: skewX,
  skewY: skewY,
  toString: toString$24
};

var Color = {
  rgb: rgb,
  rgba: rgba,
  hsl: hsl,
  hsla: hsla,
  hex: hex,
  transparent: "transparent",
  currentColor: "currentColor",
  toString: toString$30
};

var BackdropFilter = {
  toString: toString$68
};

var Gradient = {
  linearGradient: linearGradient,
  radialGradient: radialGradient,
  repeatingLinearGradient: repeatingLinearGradient,
  repeatingRadialGradient: repeatingRadialGradient,
  toString: toString$84
};

var FontFamilyName = {
  toString: toString$92
};

var FontDisplay = {
  toString: toString$93
};

exports.Cascading = Cascading;
exports.Var = Var;
exports.Time = Time;
exports.Percentage = Percentage;
exports.Url = Url;
exports.Length = Length;
exports.Angle = Angle;
exports.Direction = Direction;
exports.Position = Position;
exports.Resize = Resize;
exports.FontVariant = FontVariant;
exports.FontStyle = FontStyle;
exports.FlexBasis = FlexBasis;
exports.Overflow = Overflow;
exports.Margin = Margin;
exports.GridAutoFlow = GridAutoFlow;
exports.ColumnGap = ColumnGap;
exports.VerticalAlign = VerticalAlign;
exports.TimingFunction = TimingFunction;
exports.RepeatValue = RepeatValue;
exports.ListStyleType = ListStyleType;
exports.ListStylePosition = ListStylePosition;
exports.OutlineStyle = OutlineStyle;
exports.FontWeight = FontWeight;
exports.Transform = Transform;
exports.AnimationDirection = AnimationDirection;
exports.AnimationFillMode = AnimationFillMode;
exports.AnimationIterationCount = AnimationIterationCount;
exports.AnimationPlayState = AnimationPlayState;
exports.Cursor = Cursor;
exports.Color = Color;
exports.BorderStyle = BorderStyle;
exports.PointerEvents = PointerEvents;
exports.Perspective = Perspective;
exports.LetterSpacing = LetterSpacing;
exports.LineHeight = LineHeight;
exports.WordSpacing = WordSpacing;
exports.DisplayOutside = DisplayOutside;
exports.DisplayInside = DisplayInside;
exports.DisplayListItem = DisplayListItem;
exports.DisplayInternal = DisplayInternal;
exports.DisplayBox = DisplayBox;
exports.DisplayLegacy = DisplayLegacy;
exports.JustifySelf = JustifySelf;
exports.PositionalAlignment = PositionalAlignment;
exports.BaselineAlignment = BaselineAlignment;
exports.NormalAlignment = NormalAlignment;
exports.DistributedAlignment = DistributedAlignment;
exports.TextAlign = TextAlign;
exports.WordBreak = WordBreak;
exports.WhiteSpace = WhiteSpace;
exports.AlignItems = AlignItems;
exports.AlignSelf = AlignSelf;
exports.AlignContent = AlignContent;
exports.ObjectFit = ObjectFit;
exports.Clear = Clear;
exports.Float = Float;
exports.Visibility = Visibility;
exports.TableLayout = TableLayout;
exports.BorderCollapse = BorderCollapse;
exports.FlexWrap = FlexWrap;
exports.FlexDirection = FlexDirection;
exports.BoxSizing = BoxSizing;
exports.ColumnCount = ColumnCount;
exports.UserSelect = UserSelect;
exports.TextTransform = TextTransform;
exports.GridTemplateAreas = GridTemplateAreas;
exports.GridArea = GridArea;
exports.BackdropFilter = BackdropFilter;
exports.BackgroundAttachment = BackgroundAttachment;
exports.BackgroundClip = BackgroundClip;
exports.BackgroundOrigin = BackgroundOrigin;
exports.BackgroundPosition = BackgroundPosition;
exports.BackgroundRepeat = BackgroundRepeat;
exports.TextOverflow = TextOverflow;
exports.TextDecorationLine = TextDecorationLine;
exports.TextDecorationStyle = TextDecorationStyle;
exports.Width = Width;
exports.MaxWidth = MaxWidth;
exports.Height = Height;
exports.MaxHeight = MaxHeight;
exports.OverflowWrap = OverflowWrap;
exports.Gradient = Gradient;
exports.BackgroundImage = BackgroundImage;
exports.GeometyBox = GeometyBox;
exports.ClipPath = ClipPath;
exports.BackfaceVisibility = BackfaceVisibility;
exports.Flex = Flex;
exports.TransformStyle = TransformStyle;
exports.ListStyleImage = ListStyleImage;
exports.FontFamilyName = FontFamilyName;
exports.FontDisplay = FontDisplay;
exports.CounterStyleType = CounterStyleType;
exports.Counter = Counter;
exports.Counters = Counters;
exports.CounterIncrement = CounterIncrement;
exports.CounterReset = CounterReset;
exports.CounterSet = CounterSet;
exports.Content = Content;
exports.SVG = SVG;
/* No side effect */


/***/ }),

/***/ "./node_modules/bs-css/src/Css_Colors.bs.js":
/*!**************************************************!*\
  !*** ./node_modules/bs-css/src/Css_Colors.bs.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Generated by ReScript, PLEASE EDIT WITH CARE


var Css_AtomicTypes = __webpack_require__(/*! ./Css_AtomicTypes.bs.js */ "./node_modules/bs-css/src/Css_AtomicTypes.bs.js");

var aliceblue = Css_AtomicTypes.Color.hex("F0F8FF");

var antiquewhite = Css_AtomicTypes.Color.hex("FAEBD7");

var aqua = Css_AtomicTypes.Color.hex("00FFFF");

var aquamarine = Css_AtomicTypes.Color.hex("7FFFD4");

var azure = Css_AtomicTypes.Color.hex("F0FFFF");

var beige = Css_AtomicTypes.Color.hex("F5F5DC");

var bisque = Css_AtomicTypes.Color.hex("FFE4C4");

var black = Css_AtomicTypes.Color.hex("000000");

var blanchedalmond = Css_AtomicTypes.Color.hex("FFEBCD");

var blue = Css_AtomicTypes.Color.hex("0000FF");

var blueviolet = Css_AtomicTypes.Color.hex("8A2BE2");

var brown = Css_AtomicTypes.Color.hex("A52A2A");

var burlywood = Css_AtomicTypes.Color.hex("DEB887");

var cadetblue = Css_AtomicTypes.Color.hex("5F9EA0");

var chartreuse = Css_AtomicTypes.Color.hex("7FFF00");

var chocolate = Css_AtomicTypes.Color.hex("D2691E");

var coral = Css_AtomicTypes.Color.hex("FF7F50");

var cornflowerblue = Css_AtomicTypes.Color.hex("6495ED");

var cornsilk = Css_AtomicTypes.Color.hex("FFF8DC");

var crimson = Css_AtomicTypes.Color.hex("DC143C");

var cyan = Css_AtomicTypes.Color.hex("00FFFF");

var darkblue = Css_AtomicTypes.Color.hex("00008B");

var darkcyan = Css_AtomicTypes.Color.hex("008B8B");

var darkgoldenrod = Css_AtomicTypes.Color.hex("B8860B");

var darkgray = Css_AtomicTypes.Color.hex("A9A9A9");

var darkgreen = Css_AtomicTypes.Color.hex("006400");

var darkgrey = Css_AtomicTypes.Color.hex("A9A9A9");

var darkkhaki = Css_AtomicTypes.Color.hex("BDB76B");

var darkmagenta = Css_AtomicTypes.Color.hex("8B008B");

var darkolivegreen = Css_AtomicTypes.Color.hex("556B2F");

var darkorange = Css_AtomicTypes.Color.hex("FF8C00");

var darkorchid = Css_AtomicTypes.Color.hex("9932CC");

var darkred = Css_AtomicTypes.Color.hex("8B0000");

var darksalmon = Css_AtomicTypes.Color.hex("E9967A");

var darkseagreen = Css_AtomicTypes.Color.hex("8FBC8F");

var darkslateblue = Css_AtomicTypes.Color.hex("483D8B");

var darkslategray = Css_AtomicTypes.Color.hex("2F4F4F");

var darkslategrey = Css_AtomicTypes.Color.hex("2F4F4F");

var darkturquoise = Css_AtomicTypes.Color.hex("00CED1");

var darkviolet = Css_AtomicTypes.Color.hex("9400D3");

var deeppink = Css_AtomicTypes.Color.hex("FF1493");

var deepskyblue = Css_AtomicTypes.Color.hex("00BFFF");

var dimgray = Css_AtomicTypes.Color.hex("696969");

var dimgrey = Css_AtomicTypes.Color.hex("696969");

var dodgerblue = Css_AtomicTypes.Color.hex("1E90FF");

var firebrick = Css_AtomicTypes.Color.hex("B22222");

var floralwhite = Css_AtomicTypes.Color.hex("FFFAF0");

var forestgreen = Css_AtomicTypes.Color.hex("228B22");

var fuchsia = Css_AtomicTypes.Color.hex("FF00FF");

var gainsboro = Css_AtomicTypes.Color.hex("DCDCDC");

var ghostwhite = Css_AtomicTypes.Color.hex("F8F8FF");

var gold = Css_AtomicTypes.Color.hex("FFD700");

var goldenrod = Css_AtomicTypes.Color.hex("DAA520");

var gray = Css_AtomicTypes.Color.hex("808080");

var green = Css_AtomicTypes.Color.hex("008000");

var greenyellow = Css_AtomicTypes.Color.hex("ADFF2F");

var grey = Css_AtomicTypes.Color.hex("808080");

var honeydew = Css_AtomicTypes.Color.hex("F0FFF0");

var hotpink = Css_AtomicTypes.Color.hex("FF69B4");

var indianred = Css_AtomicTypes.Color.hex("CD5C5C");

var indigo = Css_AtomicTypes.Color.hex("4B0082");

var ivory = Css_AtomicTypes.Color.hex("FFFFF0");

var khaki = Css_AtomicTypes.Color.hex("F0E68C");

var lavender = Css_AtomicTypes.Color.hex("E6E6FA");

var lavenderblush = Css_AtomicTypes.Color.hex("FFF0F5");

var lawngreen = Css_AtomicTypes.Color.hex("7CFC00");

var lemonchiffon = Css_AtomicTypes.Color.hex("FFFACD");

var lightblue = Css_AtomicTypes.Color.hex("ADD8E6");

var lightcoral = Css_AtomicTypes.Color.hex("F08080");

var lightcyan = Css_AtomicTypes.Color.hex("E0FFFF");

var lightgoldenrodyellow = Css_AtomicTypes.Color.hex("FAFAD2");

var lightgray = Css_AtomicTypes.Color.hex("D3D3D3");

var lightgreen = Css_AtomicTypes.Color.hex("90EE90");

var lightgrey = Css_AtomicTypes.Color.hex("D3D3D3");

var lightpink = Css_AtomicTypes.Color.hex("FFB6C1");

var lightsalmon = Css_AtomicTypes.Color.hex("FFA07A");

var lightseagreen = Css_AtomicTypes.Color.hex("20B2AA");

var lightskyblue = Css_AtomicTypes.Color.hex("87CEFA");

var lightslategray = Css_AtomicTypes.Color.hex("778899");

var lightslategrey = Css_AtomicTypes.Color.hex("778899");

var lightsteelblue = Css_AtomicTypes.Color.hex("B0C4DE");

var lightyellow = Css_AtomicTypes.Color.hex("FFFFE0");

var lime = Css_AtomicTypes.Color.hex("00FF00");

var limegreen = Css_AtomicTypes.Color.hex("32CD32");

var linen = Css_AtomicTypes.Color.hex("FAF0E6");

var magenta = Css_AtomicTypes.Color.hex("FF00FF");

var maroon = Css_AtomicTypes.Color.hex("800000");

var mediumaquamarine = Css_AtomicTypes.Color.hex("66CDAA");

var mediumblue = Css_AtomicTypes.Color.hex("0000CD");

var mediumorchid = Css_AtomicTypes.Color.hex("BA55D3");

var mediumpurple = Css_AtomicTypes.Color.hex("9370DB");

var mediumseagreen = Css_AtomicTypes.Color.hex("3CB371");

var mediumslateblue = Css_AtomicTypes.Color.hex("7B68EE");

var mediumspringgreen = Css_AtomicTypes.Color.hex("00FA9A");

var mediumturquoise = Css_AtomicTypes.Color.hex("48D1CC");

var mediumvioletred = Css_AtomicTypes.Color.hex("C71585");

var midnightblue = Css_AtomicTypes.Color.hex("191970");

var mintcream = Css_AtomicTypes.Color.hex("F5FFFA");

var mistyrose = Css_AtomicTypes.Color.hex("FFE4E1");

var moccasin = Css_AtomicTypes.Color.hex("FFE4B5");

var navajowhite = Css_AtomicTypes.Color.hex("FFDEAD");

var navy = Css_AtomicTypes.Color.hex("000080");

var oldlace = Css_AtomicTypes.Color.hex("FDF5E6");

var olive = Css_AtomicTypes.Color.hex("808000");

var olivedrab = Css_AtomicTypes.Color.hex("6B8E23");

var orange = Css_AtomicTypes.Color.hex("FFA500");

var orangered = Css_AtomicTypes.Color.hex("FF4500");

var orchid = Css_AtomicTypes.Color.hex("DA70D6");

var palegoldenrod = Css_AtomicTypes.Color.hex("EEE8AA");

var palegreen = Css_AtomicTypes.Color.hex("98FB98");

var paleturquoise = Css_AtomicTypes.Color.hex("AFEEEE");

var palevioletred = Css_AtomicTypes.Color.hex("DB7093");

var papayawhip = Css_AtomicTypes.Color.hex("FFEFD5");

var peachpuff = Css_AtomicTypes.Color.hex("FFDAB9");

var peru = Css_AtomicTypes.Color.hex("CD853F");

var pink = Css_AtomicTypes.Color.hex("FFC0CB");

var plum = Css_AtomicTypes.Color.hex("DDA0DD");

var powderblue = Css_AtomicTypes.Color.hex("B0E0E6");

var purple = Css_AtomicTypes.Color.hex("800080");

var rebeccapurple = Css_AtomicTypes.Color.hex("663399");

var red = Css_AtomicTypes.Color.hex("FF0000");

var rosybrown = Css_AtomicTypes.Color.hex("BC8F8F");

var royalblue = Css_AtomicTypes.Color.hex("4169E1");

var saddlebrown = Css_AtomicTypes.Color.hex("8B4513");

var salmon = Css_AtomicTypes.Color.hex("FA8072");

var sandybrown = Css_AtomicTypes.Color.hex("F4A460");

var seagreen = Css_AtomicTypes.Color.hex("2E8B57");

var seashell = Css_AtomicTypes.Color.hex("FFF5EE");

var sienna = Css_AtomicTypes.Color.hex("A0522D");

var silver = Css_AtomicTypes.Color.hex("C0C0C0");

var skyblue = Css_AtomicTypes.Color.hex("87CEEB");

var slateblue = Css_AtomicTypes.Color.hex("6A5ACD");

var slategray = Css_AtomicTypes.Color.hex("708090");

var slategrey = Css_AtomicTypes.Color.hex("708090");

var snow = Css_AtomicTypes.Color.hex("FFFAFA");

var springgreen = Css_AtomicTypes.Color.hex("00FF7F");

var steelblue = Css_AtomicTypes.Color.hex("4682B4");

var tan = Css_AtomicTypes.Color.hex("D2B48C");

var teal = Css_AtomicTypes.Color.hex("008080");

var thistle = Css_AtomicTypes.Color.hex("D8BFD8");

var tomato = Css_AtomicTypes.Color.hex("FF6347");

var turquoise = Css_AtomicTypes.Color.hex("40E0D0");

var violet = Css_AtomicTypes.Color.hex("EE82EE");

var wheat = Css_AtomicTypes.Color.hex("F5DEB3");

var white = Css_AtomicTypes.Color.hex("FFFFFF");

var whitesmoke = Css_AtomicTypes.Color.hex("F5F5F5");

var yellow = Css_AtomicTypes.Color.hex("FFFF00");

var yellowgreen = Css_AtomicTypes.Color.hex("9ACD3");

var transparent = Css_AtomicTypes.Color.transparent;

exports.aliceblue = aliceblue;
exports.antiquewhite = antiquewhite;
exports.aqua = aqua;
exports.aquamarine = aquamarine;
exports.azure = azure;
exports.beige = beige;
exports.bisque = bisque;
exports.black = black;
exports.blanchedalmond = blanchedalmond;
exports.blue = blue;
exports.blueviolet = blueviolet;
exports.brown = brown;
exports.burlywood = burlywood;
exports.cadetblue = cadetblue;
exports.chartreuse = chartreuse;
exports.chocolate = chocolate;
exports.coral = coral;
exports.cornflowerblue = cornflowerblue;
exports.cornsilk = cornsilk;
exports.crimson = crimson;
exports.cyan = cyan;
exports.darkblue = darkblue;
exports.darkcyan = darkcyan;
exports.darkgoldenrod = darkgoldenrod;
exports.darkgray = darkgray;
exports.darkgreen = darkgreen;
exports.darkgrey = darkgrey;
exports.darkkhaki = darkkhaki;
exports.darkmagenta = darkmagenta;
exports.darkolivegreen = darkolivegreen;
exports.darkorange = darkorange;
exports.darkorchid = darkorchid;
exports.darkred = darkred;
exports.darksalmon = darksalmon;
exports.darkseagreen = darkseagreen;
exports.darkslateblue = darkslateblue;
exports.darkslategray = darkslategray;
exports.darkslategrey = darkslategrey;
exports.darkturquoise = darkturquoise;
exports.darkviolet = darkviolet;
exports.deeppink = deeppink;
exports.deepskyblue = deepskyblue;
exports.dimgray = dimgray;
exports.dimgrey = dimgrey;
exports.dodgerblue = dodgerblue;
exports.firebrick = firebrick;
exports.floralwhite = floralwhite;
exports.forestgreen = forestgreen;
exports.fuchsia = fuchsia;
exports.gainsboro = gainsboro;
exports.ghostwhite = ghostwhite;
exports.gold = gold;
exports.goldenrod = goldenrod;
exports.gray = gray;
exports.green = green;
exports.greenyellow = greenyellow;
exports.grey = grey;
exports.honeydew = honeydew;
exports.hotpink = hotpink;
exports.indianred = indianred;
exports.indigo = indigo;
exports.ivory = ivory;
exports.khaki = khaki;
exports.lavender = lavender;
exports.lavenderblush = lavenderblush;
exports.lawngreen = lawngreen;
exports.lemonchiffon = lemonchiffon;
exports.lightblue = lightblue;
exports.lightcoral = lightcoral;
exports.lightcyan = lightcyan;
exports.lightgoldenrodyellow = lightgoldenrodyellow;
exports.lightgray = lightgray;
exports.lightgreen = lightgreen;
exports.lightgrey = lightgrey;
exports.lightpink = lightpink;
exports.lightsalmon = lightsalmon;
exports.lightseagreen = lightseagreen;
exports.lightskyblue = lightskyblue;
exports.lightslategray = lightslategray;
exports.lightslategrey = lightslategrey;
exports.lightsteelblue = lightsteelblue;
exports.lightyellow = lightyellow;
exports.lime = lime;
exports.limegreen = limegreen;
exports.linen = linen;
exports.magenta = magenta;
exports.maroon = maroon;
exports.mediumaquamarine = mediumaquamarine;
exports.mediumblue = mediumblue;
exports.mediumorchid = mediumorchid;
exports.mediumpurple = mediumpurple;
exports.mediumseagreen = mediumseagreen;
exports.mediumslateblue = mediumslateblue;
exports.mediumspringgreen = mediumspringgreen;
exports.mediumturquoise = mediumturquoise;
exports.mediumvioletred = mediumvioletred;
exports.midnightblue = midnightblue;
exports.mintcream = mintcream;
exports.mistyrose = mistyrose;
exports.moccasin = moccasin;
exports.navajowhite = navajowhite;
exports.navy = navy;
exports.oldlace = oldlace;
exports.olive = olive;
exports.olivedrab = olivedrab;
exports.orange = orange;
exports.orangered = orangered;
exports.orchid = orchid;
exports.palegoldenrod = palegoldenrod;
exports.palegreen = palegreen;
exports.paleturquoise = paleturquoise;
exports.palevioletred = palevioletred;
exports.papayawhip = papayawhip;
exports.peachpuff = peachpuff;
exports.peru = peru;
exports.pink = pink;
exports.plum = plum;
exports.powderblue = powderblue;
exports.purple = purple;
exports.rebeccapurple = rebeccapurple;
exports.red = red;
exports.rosybrown = rosybrown;
exports.royalblue = royalblue;
exports.saddlebrown = saddlebrown;
exports.salmon = salmon;
exports.sandybrown = sandybrown;
exports.seagreen = seagreen;
exports.seashell = seashell;
exports.sienna = sienna;
exports.silver = silver;
exports.skyblue = skyblue;
exports.slateblue = slateblue;
exports.slategray = slategray;
exports.slategrey = slategrey;
exports.snow = snow;
exports.springgreen = springgreen;
exports.steelblue = steelblue;
exports.tan = tan;
exports.teal = teal;
exports.thistle = thistle;
exports.tomato = tomato;
exports.turquoise = turquoise;
exports.violet = violet;
exports.wheat = wheat;
exports.white = white;
exports.whitesmoke = whitesmoke;
exports.yellow = yellow;
exports.yellowgreen = yellowgreen;
exports.transparent = transparent;
/* aliceblue Not a pure module */


/***/ }),

/***/ "./node_modules/bs-css/src/Css_Js_Core.bs.js":
/*!***************************************************!*\
  !*** ./node_modules/bs-css/src/Css_Js_Core.bs.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Generated by ReScript, PLEASE EDIT WITH CARE


var Curry = __webpack_require__(/*! bs-platform/lib/js/curry.js */ "./node_modules/bs-platform/lib/js/curry.js");
var Js_dict = __webpack_require__(/*! bs-platform/lib/js/js_dict.js */ "./node_modules/bs-platform/lib/js/js_dict.js");
var Js_option = __webpack_require__(/*! bs-platform/lib/js/js_option.js */ "./node_modules/bs-platform/lib/js/js_option.js");
var Belt_Array = __webpack_require__(/*! bs-platform/lib/js/belt_Array.js */ "./node_modules/bs-platform/lib/js/belt_Array.js");
var Belt_Option = __webpack_require__(/*! bs-platform/lib/js/belt_Option.js */ "./node_modules/bs-platform/lib/js/belt_Option.js");
var Css_AtomicTypes = __webpack_require__(/*! ./Css_AtomicTypes.bs.js */ "./node_modules/bs-css/src/Css_AtomicTypes.bs.js");

function ruleToDict(dict, rule) {
  switch (rule.TAG | 0) {
    case /* D */0 :
        var value = rule._1;
        var name = rule._0;
        if (name === "content") {
          dict[name] = value === "" ? "\"\"" : value;
        } else {
          dict[name] = value;
        }
        break;
    case /* S */1 :
        dict[rule._0] = toJson(rule._1);
        break;
    case /* PseudoClass */2 :
        dict[":" + rule._0] = toJson(rule._1);
        break;
    case /* PseudoClassParam */3 :
        dict[":" + (rule._0 + ("(" + (rule._1 + ")")))] = toJson(rule._2);
        break;
    
  }
  return dict;
}

function toJson(rules) {
  return Belt_Array.reduce(rules, {}, ruleToDict);
}

function join(strings, separator) {
  return Belt_Array.reduceWithIndexU(strings, "", (function (acc, item, index) {
                if (index === 0) {
                  return item;
                } else {
                  return acc + (separator + item);
                }
              }));
}

function string_of_content(x) {
  if (typeof x === "string") {
    if (x === "unset" || x === "inherit_" || x === "initial") {
      return Css_AtomicTypes.Cascading.toString(x);
    } else {
      return Css_AtomicTypes.Content.toString(x);
    }
  }
  var variant = x.NAME;
  if (variant === "linearGradient" || variant === "radialGradient" || variant === "repeatingLinearGradient" || variant === "repeatingRadialGradient") {
    return Css_AtomicTypes.Gradient.toString(x);
  } else if (variant === "var" || variant === "varDefault") {
    return Css_AtomicTypes.Var.toString(x);
  } else if (variant === "url") {
    return Css_AtomicTypes.Url.toString(x);
  } else if (variant === "counters") {
    return Css_AtomicTypes.Counters.toString(x);
  } else if (variant === "counter") {
    return Css_AtomicTypes.Counter.toString(x);
  } else {
    return Css_AtomicTypes.Content.toString(x);
  }
}

function string_of_counter_increment(x) {
  if (typeof x === "string") {
    if (x === "unset" || x === "inherit_" || x === "initial") {
      return Css_AtomicTypes.Cascading.toString(x);
    } else {
      return Css_AtomicTypes.CounterIncrement.toString(x);
    }
  } else if (x.NAME === "increment") {
    return Css_AtomicTypes.CounterIncrement.toString(x);
  } else {
    return Css_AtomicTypes.Var.toString(x);
  }
}

function string_of_counter_reset(x) {
  if (typeof x === "string") {
    if (x === "unset" || x === "inherit_" || x === "initial") {
      return Css_AtomicTypes.Cascading.toString(x);
    } else {
      return Css_AtomicTypes.CounterReset.toString(x);
    }
  }
  var variant = x.NAME;
  if (variant === "var" || variant === "varDefault") {
    return Css_AtomicTypes.Var.toString(x);
  } else {
    return Css_AtomicTypes.CounterReset.toString(x);
  }
}

function string_of_counter_set(x) {
  if (typeof x === "string") {
    if (x === "unset" || x === "inherit_" || x === "initial") {
      return Css_AtomicTypes.Cascading.toString(x);
    } else {
      return Css_AtomicTypes.CounterSet.toString(x);
    }
  } else if (x.NAME === "set") {
    return Css_AtomicTypes.CounterSet.toString(x);
  } else {
    return Css_AtomicTypes.Var.toString(x);
  }
}

function string_of_column_gap(gcg) {
  if (typeof gcg === "string") {
    if (gcg === "zero") {
      return Css_AtomicTypes.Length.toString(gcg);
    } else if (gcg === "normal") {
      return Css_AtomicTypes.ColumnGap.toString(gcg);
    } else {
      return Css_AtomicTypes.Cascading.toString(gcg);
    }
  }
  var variant = gcg.NAME;
  if (variant === "var" || variant === "varDefault") {
    return Css_AtomicTypes.Var.toString(gcg);
  } else if (variant === "percent") {
    return Css_AtomicTypes.Percentage.toString(gcg);
  } else {
    return Css_AtomicTypes.Length.toString(gcg);
  }
}

function important(v) {
  if (v.TAG) {
    return v;
  } else {
    return {
            TAG: /* D */0,
            _0: v._0,
            _1: v._1 + " !important"
          };
  }
}

function label(label$1) {
  return {
          TAG: /* D */0,
          _0: "label",
          _1: label$1
        };
}

function alignContent(x) {
  return {
          TAG: /* D */0,
          _0: "alignContent",
          _1: typeof x === "string" ? (
              x === "spaceBetween" || x === "stretch" || x === "spaceAround" || x === "spaceEvenly" ? Css_AtomicTypes.DistributedAlignment.toString(x) : (
                  x === "unset" || x === "inherit_" || x === "initial" ? Css_AtomicTypes.Cascading.toString(x) : (
                      x === "baseline" ? Css_AtomicTypes.BaselineAlignment.toString(x) : (
                          x === "normal" ? Css_AtomicTypes.NormalAlignment.toString(x) : Css_AtomicTypes.AlignContent.toString(x)
                        )
                    )
                )
            ) : Css_AtomicTypes.Var.toString(x)
        };
}

function alignItems(x) {
  return {
          TAG: /* D */0,
          _0: "alignItems",
          _1: typeof x === "string" ? (
              x === "unset" || x === "inherit_" || x === "initial" ? Css_AtomicTypes.Cascading.toString(x) : (
                  x === "normal" || x === "stretch" ? Css_AtomicTypes.AlignItems.toString(x) : (
                      x === "baseline" ? Css_AtomicTypes.BaselineAlignment.toString(x) : Css_AtomicTypes.PositionalAlignment.toString(x)
                    )
                )
            ) : Css_AtomicTypes.Var.toString(x)
        };
}

function alignSelf(x) {
  return {
          TAG: /* D */0,
          _0: "alignSelf",
          _1: typeof x === "string" ? (
              x === "selfStart" || x === "flexEnd" || x === "flexStart" || x === "center" || x === "start" || x === "selfEnd" || x === "right" || x === "left" || x === "end_" ? Css_AtomicTypes.PositionalAlignment.toString(x) : (
                  x === "unset" || x === "inherit_" || x === "initial" ? Css_AtomicTypes.Cascading.toString(x) : (
                      x === "baseline" ? Css_AtomicTypes.BaselineAlignment.toString(x) : Css_AtomicTypes.AlignSelf.toString(x)
                    )
                )
            ) : Css_AtomicTypes.Var.toString(x)
        };
}

function animationDelay(x) {
  return {
          TAG: /* D */0,
          _0: "animationDelay",
          _1: x.toString() + "ms"
        };
}

function animationDirection(x) {
  return {
          TAG: /* D */0,
          _0: "animationDirection",
          _1: Css_AtomicTypes.AnimationDirection.toString(x)
        };
}

function animationDuration(x) {
  return {
          TAG: /* D */0,
          _0: "animationDuration",
          _1: x.toString() + "ms"
        };
}

function animationFillMode(x) {
  return {
          TAG: /* D */0,
          _0: "animationFillMode",
          _1: Css_AtomicTypes.AnimationFillMode.toString(x)
        };
}

function animationIterationCount(x) {
  return {
          TAG: /* D */0,
          _0: "animationIterationCount",
          _1: Css_AtomicTypes.AnimationIterationCount.toString(x)
        };
}

function animationPlayState(x) {
  return {
          TAG: /* D */0,
          _0: "animationPlayState",
          _1: Css_AtomicTypes.AnimationPlayState.toString(x)
        };
}

function animationTimingFunction(x) {
  return {
          TAG: /* D */0,
          _0: "animationTimingFunction",
          _1: Css_AtomicTypes.TimingFunction.toString(x)
        };
}

function backfaceVisibility(x) {
  return {
          TAG: /* D */0,
          _0: "backfaceVisibility",
          _1: typeof x === "string" ? (
              x === "visible" || x === "hidden" ? Css_AtomicTypes.BackfaceVisibility.toString(x) : Css_AtomicTypes.Cascading.toString(x)
            ) : Css_AtomicTypes.Var.toString(x)
        };
}

function backdropFilter(x) {
  return {
          TAG: /* D */0,
          _0: "backdrop-filter",
          _1: join(Belt_Array.map(x, Css_AtomicTypes.BackdropFilter.toString), ", ")
        };
}

function backgroundAttachment(x) {
  return {
          TAG: /* D */0,
          _0: "backgroundAttachment",
          _1: typeof x === "string" ? (
              x === "unset" || x === "inherit_" || x === "initial" ? Css_AtomicTypes.Cascading.toString(x) : Css_AtomicTypes.BackgroundAttachment.toString(x)
            ) : Css_AtomicTypes.Var.toString(x)
        };
}

function backgroundColor(x) {
  return {
          TAG: /* D */0,
          _0: "backgroundColor",
          _1: Css_AtomicTypes.Color.toString(x)
        };
}

function backgroundClip(x) {
  return {
          TAG: /* D */0,
          _0: "backgroundClip",
          _1: typeof x === "string" ? (
              x === "unset" || x === "inherit_" || x === "initial" ? Css_AtomicTypes.Cascading.toString(x) : Css_AtomicTypes.BackgroundClip.toString(x)
            ) : Css_AtomicTypes.Var.toString(x)
        };
}

function backgroundImage(x) {
  return {
          TAG: /* D */0,
          _0: "backgroundImage",
          _1: typeof x === "string" ? Css_AtomicTypes.BackgroundImage.toString(x) : (
              x.NAME === "url" ? Css_AtomicTypes.Url.toString(x) : Css_AtomicTypes.Gradient.toString(x)
            )
        };
}

function backgroundOrigin(x) {
  return {
          TAG: /* D */0,
          _0: "backgroundOrigin",
          _1: typeof x === "string" ? (
              x === "unset" || x === "inherit_" || x === "initial" ? Css_AtomicTypes.Cascading.toString(x) : Css_AtomicTypes.BackgroundOrigin.toString(x)
            ) : Css_AtomicTypes.Var.toString(x)
        };
}

function string_of_backgroundposition(bp) {
  if (typeof bp === "string") {
    if (bp === "unset" || bp === "inherit_" || bp === "initial") {
      return Css_AtomicTypes.Cascading.toString(bp);
    } else if (bp === "zero") {
      return Css_AtomicTypes.Length.toString(bp);
    } else {
      return Css_AtomicTypes.BackgroundPosition.toString(bp);
    }
  }
  var variant = bp.NAME;
  if (variant === "var" || variant === "varDefault") {
    return Css_AtomicTypes.Var.toString(bp);
  }
  if (variant !== "hv") {
    return Css_AtomicTypes.Length.toString(bp);
  }
  var match = bp.VAL;
  var v = match[1];
  var h = match[0];
  return (
          typeof h === "string" && h !== "zero" ? Curry._1(Css_AtomicTypes.BackgroundPosition.X.toString, h) : Css_AtomicTypes.Length.toString(h)
        ) + (" " + (
            typeof v === "string" && (v === "center" || v === "top" || v === "bottom") ? Curry._1(Css_AtomicTypes.BackgroundPosition.Y.toString, v) : Css_AtomicTypes.Length.toString(v)
          ));
}

function backgroundPosition(x) {
  return {
          TAG: /* D */0,
          _0: "backgroundPosition",
          _1: string_of_backgroundposition(x)
        };
}

function backgroundPositions(bp) {
  return {
          TAG: /* D */0,
          _0: "backgroundPosition",
          _1: join(Belt_Array.map(bp, string_of_backgroundposition), ", ")
        };
}

function backgroundPosition4(x, offsetX, y, offsetY) {
  return {
          TAG: /* D */0,
          _0: "backgroundPosition",
          _1: Curry._1(Css_AtomicTypes.BackgroundPosition.X.toString, x) + (" " + (Css_AtomicTypes.Length.toString(offsetX) + (" " + (Curry._1(Css_AtomicTypes.BackgroundPosition.Y.toString, y) + (" " + Css_AtomicTypes.Length.toString(offsetY))))))
        };
}

function backgroundRepeat(x) {
  var tmp;
  if (typeof x === "string") {
    tmp = x === "repeatY" || x === "repeatX" || x === "repeat" || x === "space" || x === "round" || x === "noRepeat" ? Css_AtomicTypes.BackgroundRepeat.toString(x) : Css_AtomicTypes.Cascading.toString(x);
  } else if (x.NAME === "hv") {
    var match = x.VAL;
    tmp = Css_AtomicTypes.BackgroundRepeat.toString(match[0]) + (" " + Css_AtomicTypes.BackgroundRepeat.toString(match[1]));
  } else {
    tmp = Css_AtomicTypes.Var.toString(x);
  }
  return {
          TAG: /* D */0,
          _0: "backgroundRepeat",
          _1: tmp
        };
}

function borderBottomColor(x) {
  return {
          TAG: /* D */0,
          _0: "borderBottomColor",
          _1: Css_AtomicTypes.Color.toString(x)
        };
}

function borderBottomLeftRadius(x) {
  return {
          TAG: /* D */0,
          _0: "borderBottomLeftRadius",
          _1: Css_AtomicTypes.Length.toString(x)
        };
}

function borderBottomRightRadius(x) {
  return {
          TAG: /* D */0,
          _0: "borderBottomRightRadius",
          _1: Css_AtomicTypes.Length.toString(x)
        };
}

function borderBottomWidth(x) {
  return {
          TAG: /* D */0,
          _0: "borderBottomWidth",
          _1: Css_AtomicTypes.Length.toString(x)
        };
}

function borderCollapse(x) {
  return {
          TAG: /* D */0,
          _0: "borderCollapse",
          _1: typeof x === "string" ? (
              x === "unset" || x === "inherit_" || x === "initial" ? Css_AtomicTypes.Cascading.toString(x) : Css_AtomicTypes.BorderCollapse.toString(x)
            ) : Css_AtomicTypes.Var.toString(x)
        };
}

function borderColor(x) {
  return {
          TAG: /* D */0,
          _0: "borderColor",
          _1: Css_AtomicTypes.Color.toString(x)
        };
}

function borderLeftColor(x) {
  return {
          TAG: /* D */0,
          _0: "borderLeftColor",
          _1: Css_AtomicTypes.Color.toString(x)
        };
}

function borderLeftWidth(x) {
  return {
          TAG: /* D */0,
          _0: "borderLeftWidth",
          _1: Css_AtomicTypes.Length.toString(x)
        };
}

function borderSpacing(x) {
  return {
          TAG: /* D */0,
          _0: "borderSpacing",
          _1: Css_AtomicTypes.Length.toString(x)
        };
}

function borderRadius(x) {
  return {
          TAG: /* D */0,
          _0: "borderRadius",
          _1: Css_AtomicTypes.Length.toString(x)
        };
}

function borderRightColor(x) {
  return {
          TAG: /* D */0,
          _0: "borderRightColor",
          _1: Css_AtomicTypes.Color.toString(x)
        };
}

function borderRightWidth(x) {
  return {
          TAG: /* D */0,
          _0: "borderRightWidth",
          _1: Css_AtomicTypes.Length.toString(x)
        };
}

function borderTopColor(x) {
  return {
          TAG: /* D */0,
          _0: "borderTopColor",
          _1: Css_AtomicTypes.Color.toString(x)
        };
}

function borderTopLeftRadius(x) {
  return {
          TAG: /* D */0,
          _0: "borderTopLeftRadius",
          _1: Css_AtomicTypes.Length.toString(x)
        };
}

function borderTopRightRadius(x) {
  return {
          TAG: /* D */0,
          _0: "borderTopRightRadius",
          _1: Css_AtomicTypes.Length.toString(x)
        };
}

function borderTopWidth(x) {
  return {
          TAG: /* D */0,
          _0: "borderTopWidth",
          _1: Css_AtomicTypes.Length.toString(x)
        };
}

function borderWidth(x) {
  return {
          TAG: /* D */0,
          _0: "borderWidth",
          _1: Css_AtomicTypes.Length.toString(x)
        };
}

function bottom(x) {
  var tmp;
  if (typeof x === "string") {
    tmp = x === "zero" ? Css_AtomicTypes.Length.toString(x) : Css_AtomicTypes.Cascading.toString(x);
  } else {
    var variant = x.NAME;
    tmp = variant === "var" || variant === "varDefault" ? Css_AtomicTypes.Var.toString(x) : Css_AtomicTypes.Length.toString(x);
  }
  return {
          TAG: /* D */0,
          _0: "bottom",
          _1: tmp
        };
}

function boxSizing(x) {
  return {
          TAG: /* D */0,
          _0: "boxSizing",
          _1: typeof x === "string" ? (
              x === "unset" || x === "inherit_" || x === "initial" ? Css_AtomicTypes.Cascading.toString(x) : Css_AtomicTypes.BoxSizing.toString(x)
            ) : Css_AtomicTypes.Var.toString(x)
        };
}

function clear(x) {
  return {
          TAG: /* D */0,
          _0: "clear",
          _1: typeof x === "string" ? (
              x === "unset" || x === "inherit_" || x === "initial" ? Css_AtomicTypes.Cascading.toString(x) : Css_AtomicTypes.Clear.toString(x)
            ) : Css_AtomicTypes.Var.toString(x)
        };
}

function clipPath(x) {
  return {
          TAG: /* D */0,
          _0: "clipPath",
          _1: typeof x === "string" ? (
              x === "none" ? Css_AtomicTypes.ClipPath.toString(x) : (
                  x === "unset" || x === "inherit_" || x === "initial" ? Css_AtomicTypes.Cascading.toString(x) : Css_AtomicTypes.GeometyBox.toString(x)
                )
            ) : (
              x.NAME === "url" ? Css_AtomicTypes.Url.toString(x) : Css_AtomicTypes.Var.toString(x)
            )
        };
}

function color(x) {
  var tmp;
  if (typeof x === "string") {
    tmp = Css_AtomicTypes.Color.toString(x);
  } else {
    var variant = x.NAME;
    tmp = variant === "var" || variant === "varDefault" ? Css_AtomicTypes.Var.toString(x) : Css_AtomicTypes.Color.toString(x);
  }
  return {
          TAG: /* D */0,
          _0: "color",
          _1: tmp
        };
}

function columnCount(x) {
  var tmp;
  if (typeof x === "string") {
    tmp = x === "unset" || x === "inherit_" || x === "initial" ? Css_AtomicTypes.Cascading.toString(x) : Css_AtomicTypes.ColumnCount.toString(x);
  } else {
    var variant = x.NAME;
    tmp = variant === "var" || variant === "varDefault" ? Css_AtomicTypes.Var.toString(x) : Css_AtomicTypes.ColumnCount.toString(x);
  }
  return {
          TAG: /* D */0,
          _0: "columnCount",
          _1: tmp
        };
}

function columnGap(x) {
  return {
          TAG: /* D */0,
          _0: "columnGap",
          _1: string_of_column_gap(x)
        };
}

function contentRule(x) {
  return {
          TAG: /* D */0,
          _0: "content",
          _1: string_of_content(x)
        };
}

function contentRules(xs) {
  return {
          TAG: /* D */0,
          _0: "content",
          _1: join(Belt_Array.map(xs, string_of_content), " ")
        };
}

function counterIncrement(x) {
  return {
          TAG: /* D */0,
          _0: "counter-increment",
          _1: string_of_counter_increment(x)
        };
}

function countersIncrement(xs) {
  return {
          TAG: /* D */0,
          _0: "counter-increment",
          _1: join(Belt_Array.map(xs, string_of_counter_increment), " ")
        };
}

function counterReset(x) {
  return {
          TAG: /* D */0,
          _0: "counter-reset",
          _1: string_of_counter_reset(x)
        };
}

function countersReset(xs) {
  return {
          TAG: /* D */0,
          _0: "counter-reset",
          _1: join(Belt_Array.map(xs, string_of_counter_reset), " ")
        };
}

function counterSet(x) {
  return {
          TAG: /* D */0,
          _0: "counter-set",
          _1: string_of_counter_set(x)
        };
}

function countersSet(xs) {
  return {
          TAG: /* D */0,
          _0: "counter-set",
          _1: join(Belt_Array.map(xs, string_of_counter_set), " ")
        };
}

function cursor(x) {
  return {
          TAG: /* D */0,
          _0: "cursor",
          _1: Css_AtomicTypes.Cursor.toString(x)
        };
}

function direction(x) {
  return {
          TAG: /* D */0,
          _0: "direction",
          _1: typeof x === "string" ? (
              x === "rtl" || x === "ltr" ? Css_AtomicTypes.Direction.toString(x) : Css_AtomicTypes.Cascading.toString(x)
            ) : Css_AtomicTypes.Var.toString(x)
        };
}

function display(x) {
  return {
          TAG: /* D */0,
          _0: "display",
          _1: typeof x === "string" ? (
              x === "table" || x === "grid" || x === "flex" ? Css_AtomicTypes.DisplayInside.toString(x) : (
                  x === "contents" || x === "none" ? Css_AtomicTypes.DisplayBox.toString(x) : (
                      x === "unset" || x === "inherit_" || x === "initial" ? Css_AtomicTypes.Cascading.toString(x) : (
                          x === "inlineGrid" || x === "inlineFlex" || x === "inlineBlock" || x === "inlineTable" ? Css_AtomicTypes.DisplayLegacy.toString(x) : (
                              x === "block" || x === "inline" || x === "runIn" ? Css_AtomicTypes.DisplayOutside.toString(x) : (
                                  x === "listItem" ? Css_AtomicTypes.DisplayListItem.toString(x) : Css_AtomicTypes.DisplayInternal.toString(x)
                                )
                            )
                        )
                    )
                )
            ) : Css_AtomicTypes.Var.toString(x)
        };
}

function flex(x) {
  return {
          TAG: /* D */0,
          _0: "flex",
          _1: typeof x === "string" ? Css_AtomicTypes.Flex.toString(x) : x.VAL.toString()
        };
}

function flexDirection(x) {
  return {
          TAG: /* D */0,
          _0: "flexDirection",
          _1: typeof x === "string" ? (
              x === "unset" || x === "inherit_" || x === "initial" ? Css_AtomicTypes.Cascading.toString(x) : Css_AtomicTypes.FlexDirection.toString(x)
            ) : Css_AtomicTypes.Var.toString(x)
        };
}

function flexGrow(x) {
  return {
          TAG: /* D */0,
          _0: "flexGrow",
          _1: x.toString()
        };
}

function flexShrink(x) {
  return {
          TAG: /* D */0,
          _0: "flexShrink",
          _1: x.toString()
        };
}

function flexWrap(x) {
  return {
          TAG: /* D */0,
          _0: "flexWrap",
          _1: typeof x === "string" ? (
              x === "nowrap" || x === "wrapReverse" || x === "wrap" ? Css_AtomicTypes.FlexWrap.toString(x) : Css_AtomicTypes.Cascading.toString(x)
            ) : Css_AtomicTypes.Var.toString(x)
        };
}

function $$float(x) {
  return {
          TAG: /* D */0,
          _0: "float",
          _1: typeof x === "string" ? (
              x === "unset" || x === "inherit_" || x === "initial" ? Css_AtomicTypes.Cascading.toString(x) : Css_AtomicTypes.Float.toString(x)
            ) : Css_AtomicTypes.Var.toString(x)
        };
}

function fontFamily(x) {
  return {
          TAG: /* D */0,
          _0: "fontFamily",
          _1: typeof x === "string" ? (
              x === "unset" || x === "inherit_" || x === "initial" ? Css_AtomicTypes.Cascading.toString(x) : Css_AtomicTypes.FontFamilyName.toString(x)
            ) : (
              x.NAME === "custom" ? Css_AtomicTypes.FontFamilyName.toString(x) : Css_AtomicTypes.Var.toString(x)
            )
        };
}

function fontFamilies(xs) {
  return {
          TAG: /* D */0,
          _0: "fontFamily",
          _1: join(Belt_Array.map(xs, Css_AtomicTypes.FontFamilyName.toString), ", ")
        };
}

function fontSize(x) {
  var tmp;
  if (typeof x === "string") {
    tmp = x === "zero" ? Css_AtomicTypes.Length.toString(x) : Css_AtomicTypes.Cascading.toString(x);
  } else {
    var variant = x.NAME;
    tmp = variant === "var" || variant === "varDefault" ? Css_AtomicTypes.Var.toString(x) : Css_AtomicTypes.Length.toString(x);
  }
  return {
          TAG: /* D */0,
          _0: "fontSize",
          _1: tmp
        };
}

function fontStyle(x) {
  return {
          TAG: /* D */0,
          _0: "fontStyle",
          _1: typeof x === "string" ? (
              x === "normal" || x === "oblique" || x === "italic" ? Css_AtomicTypes.FontStyle.toString(x) : Css_AtomicTypes.Cascading.toString(x)
            ) : Css_AtomicTypes.Var.toString(x)
        };
}

function fontVariant(x) {
  return {
          TAG: /* D */0,
          _0: "fontVariant",
          _1: typeof x === "string" ? (
              x === "normal" || x === "smallCaps" ? Css_AtomicTypes.FontVariant.toString(x) : Css_AtomicTypes.Cascading.toString(x)
            ) : Css_AtomicTypes.Var.toString(x)
        };
}

function fontWeight(x) {
  return {
          TAG: /* D */0,
          _0: "fontWeight",
          _1: typeof x === "string" ? (
              x === "unset" || x === "inherit_" || x === "initial" ? Css_AtomicTypes.Cascading.toString(x) : Css_AtomicTypes.FontWeight.toString(x)
            ) : (
              x.NAME === "num" ? Css_AtomicTypes.FontWeight.toString(x) : Css_AtomicTypes.Var.toString(x)
            )
        };
}

function gridAutoFlow(x) {
  return {
          TAG: /* D */0,
          _0: "gridAutoFlow",
          _1: typeof x === "string" ? (
              x === "unset" || x === "inherit_" || x === "initial" ? Css_AtomicTypes.Cascading.toString(x) : Css_AtomicTypes.GridAutoFlow.toString(x)
            ) : Css_AtomicTypes.Var.toString(x)
        };
}

function gridColumn(start, end$prime) {
  return {
          TAG: /* D */0,
          _0: "gridColumn",
          _1: start.toString() + (" / " + end$prime.toString())
        };
}

function gridColumnGap(x) {
  return {
          TAG: /* D */0,
          _0: "gridColumnGap",
          _1: string_of_column_gap(x)
        };
}

function gridColumnStart(n) {
  return {
          TAG: /* D */0,
          _0: "gridColumnStart",
          _1: n.toString()
        };
}

function gridColumnEnd(n) {
  return {
          TAG: /* D */0,
          _0: "gridColumnEnd",
          _1: n.toString()
        };
}

function gridRow(start, end$prime) {
  return {
          TAG: /* D */0,
          _0: "gridRow",
          _1: start.toString() + (" / " + end$prime.toString())
        };
}

function gridGap(x) {
  var tmp;
  if (typeof x === "string") {
    tmp = x === "zero" ? Css_AtomicTypes.Length.toString(x) : Css_AtomicTypes.Cascading.toString(x);
  } else {
    var variant = x.NAME;
    tmp = variant === "var" || variant === "varDefault" ? Css_AtomicTypes.Var.toString(x) : (
        variant === "percent" ? Css_AtomicTypes.Percentage.toString(x) : Css_AtomicTypes.Length.toString(x)
      );
  }
  return {
          TAG: /* D */0,
          _0: "gridGap",
          _1: tmp
        };
}

function gridRowGap(x) {
  var tmp;
  if (typeof x === "string") {
    tmp = x === "zero" ? Css_AtomicTypes.Length.toString(x) : Css_AtomicTypes.Cascading.toString(x);
  } else {
    var variant = x.NAME;
    tmp = variant === "var" || variant === "varDefault" ? Css_AtomicTypes.Var.toString(x) : (
        variant === "percent" ? Css_AtomicTypes.Percentage.toString(x) : Css_AtomicTypes.Length.toString(x)
      );
  }
  return {
          TAG: /* D */0,
          _0: "gridRowGap",
          _1: tmp
        };
}

function gridRowEnd(n) {
  return {
          TAG: /* D */0,
          _0: "gridRowEnd",
          _1: n.toString()
        };
}

function gridRowStart(n) {
  return {
          TAG: /* D */0,
          _0: "gridRowStart",
          _1: n.toString()
        };
}

function height(x) {
  var tmp;
  if (typeof x === "string") {
    tmp = x === "unset" || x === "inherit_" || x === "initial" ? Css_AtomicTypes.Cascading.toString(x) : (
        x === "zero" ? Css_AtomicTypes.Length.toString(x) : Css_AtomicTypes.Height.toString(x)
      );
  } else {
    var variant = x.NAME;
    tmp = variant === "var" || variant === "varDefault" ? Css_AtomicTypes.Var.toString(x) : (
        variant === "percent" ? Css_AtomicTypes.Percentage.toString(x) : Css_AtomicTypes.Length.toString(x)
      );
  }
  return {
          TAG: /* D */0,
          _0: "height",
          _1: tmp
        };
}

function justifyContent(x) {
  return {
          TAG: /* D */0,
          _0: "justifyContent",
          _1: typeof x === "string" ? (
              x === "spaceBetween" || x === "stretch" || x === "spaceAround" || x === "spaceEvenly" ? Css_AtomicTypes.DistributedAlignment.toString(x) : (
                  x === "unset" || x === "inherit_" || x === "initial" ? Css_AtomicTypes.Cascading.toString(x) : (
                      x === "normal" ? Css_AtomicTypes.NormalAlignment.toString(x) : Css_AtomicTypes.PositionalAlignment.toString(x)
                    )
                )
            ) : Css_AtomicTypes.Var.toString(x)
        };
}

function left(x) {
  var tmp;
  if (typeof x === "string") {
    tmp = x === "zero" ? Css_AtomicTypes.Length.toString(x) : Css_AtomicTypes.Cascading.toString(x);
  } else {
    var variant = x.NAME;
    tmp = variant === "var" || variant === "varDefault" ? Css_AtomicTypes.Var.toString(x) : Css_AtomicTypes.Length.toString(x);
  }
  return {
          TAG: /* D */0,
          _0: "left",
          _1: tmp
        };
}

function letterSpacing(x) {
  var tmp;
  if (typeof x === "string") {
    tmp = x === "zero" ? Css_AtomicTypes.Length.toString(x) : (
        x === "normal" ? Css_AtomicTypes.LetterSpacing.toString(x) : Css_AtomicTypes.Cascading.toString(x)
      );
  } else {
    var variant = x.NAME;
    tmp = variant === "var" || variant === "varDefault" ? Css_AtomicTypes.Var.toString(x) : Css_AtomicTypes.Length.toString(x);
  }
  return {
          TAG: /* D */0,
          _0: "letterSpacing",
          _1: tmp
        };
}

function lineHeight(x) {
  var tmp;
  if (typeof x === "string") {
    tmp = x === "zero" ? Css_AtomicTypes.Length.toString(x) : (
        x === "normal" ? Css_AtomicTypes.LineHeight.toString(x) : Css_AtomicTypes.Cascading.toString(x)
      );
  } else {
    var variant = x.NAME;
    tmp = variant === "var" || variant === "varDefault" ? Css_AtomicTypes.Var.toString(x) : (
        variant === "abs" ? Css_AtomicTypes.LineHeight.toString(x) : Css_AtomicTypes.Length.toString(x)
      );
  }
  return {
          TAG: /* D */0,
          _0: "lineHeight",
          _1: tmp
        };
}

function listStyle(style, position, image) {
  return {
          TAG: /* D */0,
          _0: "listStyle",
          _1: Css_AtomicTypes.ListStyleType.toString(style) + (" " + (Css_AtomicTypes.ListStylePosition.toString(position) + (" " + (
                  typeof image === "string" ? Css_AtomicTypes.ListStyleImage.toString(image) : Css_AtomicTypes.Url.toString(image)
                ))))
        };
}

function listStyleImage(x) {
  return {
          TAG: /* D */0,
          _0: "listStyleImage",
          _1: typeof x === "string" ? (
              x === "unset" || x === "inherit_" || x === "initial" ? Css_AtomicTypes.Cascading.toString(x) : Css_AtomicTypes.ListStyleImage.toString(x)
            ) : (
              x.NAME === "url" ? Css_AtomicTypes.Url.toString(x) : Css_AtomicTypes.Var.toString(x)
            )
        };
}

function listStyleType(x) {
  return {
          TAG: /* D */0,
          _0: "listStyleType",
          _1: typeof x === "string" ? (
              x === "unset" || x === "inherit_" || x === "initial" ? Css_AtomicTypes.Cascading.toString(x) : Css_AtomicTypes.ListStyleType.toString(x)
            ) : Css_AtomicTypes.Var.toString(x)
        };
}

function listStylePosition(x) {
  return {
          TAG: /* D */0,
          _0: "listStylePosition",
          _1: typeof x === "string" ? (
              x === "inside" || x === "outside" ? Css_AtomicTypes.ListStylePosition.toString(x) : Css_AtomicTypes.Cascading.toString(x)
            ) : Css_AtomicTypes.Var.toString(x)
        };
}

function marginToString(x) {
  if (typeof x === "string") {
    if (x === "unset" || x === "inherit_" || x === "initial") {
      return Css_AtomicTypes.Cascading.toString(x);
    } else if (x === "zero") {
      return Css_AtomicTypes.Length.toString(x);
    } else {
      return Css_AtomicTypes.Margin.toString(x);
    }
  }
  var variant = x.NAME;
  if (variant === "var" || variant === "varDefault") {
    return Css_AtomicTypes.Var.toString(x);
  } else {
    return Css_AtomicTypes.Length.toString(x);
  }
}

function margin(x) {
  return {
          TAG: /* D */0,
          _0: "margin",
          _1: marginToString(x)
        };
}

function margin2(v, h) {
  return {
          TAG: /* D */0,
          _0: "margin",
          _1: marginToString(v) + (" " + marginToString(h))
        };
}

function margin3(top, h, bottom) {
  return {
          TAG: /* D */0,
          _0: "margin",
          _1: marginToString(top) + (" " + (marginToString(h) + (" " + marginToString(bottom))))
        };
}

function margin4(top, right, bottom, left) {
  return {
          TAG: /* D */0,
          _0: "margin",
          _1: marginToString(top) + (" " + (marginToString(right) + (" " + (marginToString(bottom) + (" " + marginToString(left))))))
        };
}

function marginLeft(x) {
  return {
          TAG: /* D */0,
          _0: "marginLeft",
          _1: marginToString(x)
        };
}

function marginRight(x) {
  return {
          TAG: /* D */0,
          _0: "marginRight",
          _1: marginToString(x)
        };
}

function marginTop(x) {
  return {
          TAG: /* D */0,
          _0: "marginTop",
          _1: marginToString(x)
        };
}

function marginBottom(x) {
  return {
          TAG: /* D */0,
          _0: "marginBottom",
          _1: marginToString(x)
        };
}

function maxHeight(x) {
  var tmp;
  if (typeof x === "string") {
    tmp = x === "unset" || x === "inherit_" || x === "initial" ? Css_AtomicTypes.Cascading.toString(x) : (
        x === "zero" ? Css_AtomicTypes.Length.toString(x) : Css_AtomicTypes.MaxHeight.toString(x)
      );
  } else {
    var variant = x.NAME;
    tmp = variant === "var" || variant === "varDefault" ? Css_AtomicTypes.Var.toString(x) : (
        variant === "percent" ? Css_AtomicTypes.Percentage.toString(x) : Css_AtomicTypes.Length.toString(x)
      );
  }
  return {
          TAG: /* D */0,
          _0: "maxHeight",
          _1: tmp
        };
}

function maxWidth(x) {
  var tmp;
  if (typeof x === "string") {
    tmp = x === "unset" || x === "inherit_" || x === "initial" ? Css_AtomicTypes.Cascading.toString(x) : (
        x === "zero" ? Css_AtomicTypes.Length.toString(x) : Css_AtomicTypes.MaxWidth.toString(x)
      );
  } else {
    var variant = x.NAME;
    tmp = variant === "var" || variant === "varDefault" ? Css_AtomicTypes.Var.toString(x) : (
        variant === "percent" ? Css_AtomicTypes.Percentage.toString(x) : Css_AtomicTypes.Length.toString(x)
      );
  }
  return {
          TAG: /* D */0,
          _0: "maxWidth",
          _1: tmp
        };
}

function minHeight(x) {
  var tmp;
  if (typeof x === "string") {
    tmp = x === "unset" || x === "inherit_" || x === "initial" ? Css_AtomicTypes.Cascading.toString(x) : (
        x === "zero" ? Css_AtomicTypes.Length.toString(x) : Css_AtomicTypes.Height.toString(x)
      );
  } else {
    var variant = x.NAME;
    tmp = variant === "var" || variant === "varDefault" ? Css_AtomicTypes.Var.toString(x) : (
        variant === "percent" ? Css_AtomicTypes.Percentage.toString(x) : Css_AtomicTypes.Length.toString(x)
      );
  }
  return {
          TAG: /* D */0,
          _0: "minHeight",
          _1: tmp
        };
}

function minWidth(x) {
  var tmp;
  if (typeof x === "string") {
    tmp = x === "unset" || x === "inherit_" || x === "initial" ? Css_AtomicTypes.Cascading.toString(x) : (
        x === "zero" ? Css_AtomicTypes.Length.toString(x) : Css_AtomicTypes.Width.toString(x)
      );
  } else {
    var variant = x.NAME;
    tmp = variant === "var" || variant === "varDefault" ? Css_AtomicTypes.Var.toString(x) : (
        variant === "percent" ? Css_AtomicTypes.Percentage.toString(x) : Css_AtomicTypes.Length.toString(x)
      );
  }
  return {
          TAG: /* D */0,
          _0: "minWidth",
          _1: tmp
        };
}

function objectFit(x) {
  return {
          TAG: /* D */0,
          _0: "objectFit",
          _1: typeof x === "string" ? (
              x === "unset" || x === "inherit_" || x === "initial" ? Css_AtomicTypes.Cascading.toString(x) : Css_AtomicTypes.ObjectFit.toString(x)
            ) : Css_AtomicTypes.Var.toString(x)
        };
}

function objectPosition(x) {
  return {
          TAG: /* D */0,
          _0: "objectPosition",
          _1: string_of_backgroundposition(x)
        };
}

function opacity(x) {
  return {
          TAG: /* D */0,
          _0: "opacity",
          _1: x.toString()
        };
}

function outline(size, style, color) {
  return {
          TAG: /* D */0,
          _0: "outline",
          _1: Css_AtomicTypes.Length.toString(size) + (" " + (Css_AtomicTypes.OutlineStyle.toString(style) + (" " + Css_AtomicTypes.Color.toString(color))))
        };
}

function outlineColor(x) {
  return {
          TAG: /* D */0,
          _0: "outlineColor",
          _1: Css_AtomicTypes.Color.toString(x)
        };
}

function outlineOffset(x) {
  return {
          TAG: /* D */0,
          _0: "outlineOffset",
          _1: Css_AtomicTypes.Length.toString(x)
        };
}

function outlineStyle(x) {
  return {
          TAG: /* D */0,
          _0: "outlineStyle",
          _1: Css_AtomicTypes.OutlineStyle.toString(x)
        };
}

function outlineWidth(x) {
  return {
          TAG: /* D */0,
          _0: "outlineWidth",
          _1: Css_AtomicTypes.Length.toString(x)
        };
}

function overflow(x) {
  return {
          TAG: /* D */0,
          _0: "overflow",
          _1: Css_AtomicTypes.Overflow.toString(x)
        };
}

function overflowX(x) {
  return {
          TAG: /* D */0,
          _0: "overflowX",
          _1: Css_AtomicTypes.Overflow.toString(x)
        };
}

function overflowY(x) {
  return {
          TAG: /* D */0,
          _0: "overflowY",
          _1: Css_AtomicTypes.Overflow.toString(x)
        };
}

function overflowWrap(x) {
  return {
          TAG: /* D */0,
          _0: "overflowWrap",
          _1: typeof x === "string" ? (
              x === "breakWord" || x === "anywhere" || x === "normal" ? Css_AtomicTypes.OverflowWrap.toString(x) : Css_AtomicTypes.Cascading.toString(x)
            ) : Css_AtomicTypes.Var.toString(x)
        };
}

function padding(x) {
  return {
          TAG: /* D */0,
          _0: "padding",
          _1: Css_AtomicTypes.Length.toString(x)
        };
}

function padding2(v, h) {
  return {
          TAG: /* D */0,
          _0: "padding",
          _1: Css_AtomicTypes.Length.toString(v) + (" " + Css_AtomicTypes.Length.toString(h))
        };
}

function padding3(top, h, bottom) {
  return {
          TAG: /* D */0,
          _0: "padding",
          _1: Css_AtomicTypes.Length.toString(top) + (" " + (Css_AtomicTypes.Length.toString(h) + (" " + Css_AtomicTypes.Length.toString(bottom))))
        };
}

function padding4(top, right, bottom, left) {
  return {
          TAG: /* D */0,
          _0: "padding",
          _1: Css_AtomicTypes.Length.toString(top) + (" " + (Css_AtomicTypes.Length.toString(right) + (" " + (Css_AtomicTypes.Length.toString(bottom) + (" " + Css_AtomicTypes.Length.toString(left))))))
        };
}

function paddingBottom(x) {
  return {
          TAG: /* D */0,
          _0: "paddingBottom",
          _1: Css_AtomicTypes.Length.toString(x)
        };
}

function paddingLeft(x) {
  return {
          TAG: /* D */0,
          _0: "paddingLeft",
          _1: Css_AtomicTypes.Length.toString(x)
        };
}

function paddingRight(x) {
  return {
          TAG: /* D */0,
          _0: "paddingRight",
          _1: Css_AtomicTypes.Length.toString(x)
        };
}

function paddingTop(x) {
  return {
          TAG: /* D */0,
          _0: "paddingTop",
          _1: Css_AtomicTypes.Length.toString(x)
        };
}

function perspective(x) {
  var tmp;
  if (typeof x === "string") {
    tmp = x === "unset" || x === "inherit_" || x === "initial" ? Css_AtomicTypes.Cascading.toString(x) : (
        x === "zero" ? Css_AtomicTypes.Length.toString(x) : Css_AtomicTypes.Perspective.toString(x)
      );
  } else {
    var variant = x.NAME;
    tmp = variant === "var" || variant === "varDefault" ? Css_AtomicTypes.Var.toString(x) : Css_AtomicTypes.Length.toString(x);
  }
  return {
          TAG: /* D */0,
          _0: "perspective",
          _1: tmp
        };
}

function perspectiveOrigin(x, y) {
  return {
          TAG: /* D */0,
          _0: "perspectiveOrigin",
          _1: (
            typeof x === "string" && x !== "zero" ? Css_AtomicTypes.Perspective.toString(x) : Css_AtomicTypes.Length.toString(x)
          ) + (" " + (
              typeof y === "string" && y !== "zero" ? Css_AtomicTypes.Perspective.toString(y) : Css_AtomicTypes.Length.toString(y)
            ))
        };
}

function pointerEvents(x) {
  return {
          TAG: /* D */0,
          _0: "pointerEvents",
          _1: typeof x === "string" ? (
              x === "unset" || x === "inherit_" || x === "initial" ? Css_AtomicTypes.Cascading.toString(x) : Css_AtomicTypes.PointerEvents.toString(x)
            ) : Css_AtomicTypes.Var.toString(x)
        };
}

function position(x) {
  return {
          TAG: /* D */0,
          _0: "position",
          _1: typeof x === "string" ? (
              x === "unset" || x === "inherit_" || x === "initial" ? Css_AtomicTypes.Cascading.toString(x) : Css_AtomicTypes.Position.toString(x)
            ) : Css_AtomicTypes.Var.toString(x)
        };
}

function justifySelf(x) {
  return {
          TAG: /* D */0,
          _0: "justifySelf",
          _1: typeof x === "string" ? (
              x === "selfStart" || x === "flexEnd" || x === "flexStart" || x === "center" || x === "start" || x === "selfEnd" || x === "right" || x === "left" || x === "end_" ? Css_AtomicTypes.PositionalAlignment.toString(x) : (
                  x === "unset" || x === "inherit_" || x === "initial" ? Css_AtomicTypes.Cascading.toString(x) : (
                      x === "baseline" ? Css_AtomicTypes.BaselineAlignment.toString(x) : Css_AtomicTypes.JustifySelf.toString(x)
                    )
                )
            ) : Css_AtomicTypes.Var.toString(x)
        };
}

function resize(x) {
  return {
          TAG: /* D */0,
          _0: "resize",
          _1: typeof x === "string" ? (
              x === "unset" || x === "inherit_" || x === "initial" ? Css_AtomicTypes.Cascading.toString(x) : Css_AtomicTypes.Resize.toString(x)
            ) : Css_AtomicTypes.Var.toString(x)
        };
}

function right(x) {
  var tmp;
  if (typeof x === "string") {
    tmp = x === "zero" ? Css_AtomicTypes.Length.toString(x) : Css_AtomicTypes.Cascading.toString(x);
  } else {
    var variant = x.NAME;
    tmp = variant === "var" || variant === "varDefault" ? Css_AtomicTypes.Var.toString(x) : Css_AtomicTypes.Length.toString(x);
  }
  return {
          TAG: /* D */0,
          _0: "right",
          _1: tmp
        };
}

function tableLayout(x) {
  return {
          TAG: /* D */0,
          _0: "tableLayout",
          _1: typeof x === "string" ? (
              x === "unset" || x === "inherit_" || x === "initial" ? Css_AtomicTypes.Cascading.toString(x) : Css_AtomicTypes.TableLayout.toString(x)
            ) : Css_AtomicTypes.Var.toString(x)
        };
}

function textAlign(x) {
  return {
          TAG: /* D */0,
          _0: "textAlign",
          _1: typeof x === "string" ? (
              x === "unset" || x === "inherit_" || x === "initial" ? Css_AtomicTypes.Cascading.toString(x) : Css_AtomicTypes.TextAlign.toString(x)
            ) : Css_AtomicTypes.Var.toString(x)
        };
}

function textDecorationColor(x) {
  var tmp;
  if (typeof x === "string") {
    tmp = x === "transparent" || x === "currentColor" ? Css_AtomicTypes.Color.toString(x) : Css_AtomicTypes.Cascading.toString(x);
  } else {
    var variant = x.NAME;
    tmp = variant === "var" || variant === "varDefault" ? Css_AtomicTypes.Var.toString(x) : Css_AtomicTypes.Color.toString(x);
  }
  return {
          TAG: /* D */0,
          _0: "textDecorationColor",
          _1: tmp
        };
}

function textDecorationLine(x) {
  return {
          TAG: /* D */0,
          _0: "textDecorationLine",
          _1: typeof x === "string" ? (
              x === "unset" || x === "inherit_" || x === "initial" ? Css_AtomicTypes.Cascading.toString(x) : Css_AtomicTypes.TextDecorationLine.toString(x)
            ) : Css_AtomicTypes.Var.toString(x)
        };
}

function textDecorationStyle(x) {
  return {
          TAG: /* D */0,
          _0: "textDecorationStyle",
          _1: typeof x === "string" ? (
              x === "double" || x === "dotted" || x === "dashed" || x === "solid" || x === "wavy" ? Css_AtomicTypes.TextDecorationStyle.toString(x) : Css_AtomicTypes.Cascading.toString(x)
            ) : Css_AtomicTypes.Var.toString(x)
        };
}

function textIndent(x) {
  var tmp;
  if (typeof x === "string") {
    tmp = x === "zero" ? Css_AtomicTypes.Length.toString(x) : Css_AtomicTypes.Cascading.toString(x);
  } else {
    var variant = x.NAME;
    tmp = variant === "var" || variant === "varDefault" ? Css_AtomicTypes.Var.toString(x) : (
        variant === "percent" ? Css_AtomicTypes.Percentage.toString(x) : Css_AtomicTypes.Length.toString(x)
      );
  }
  return {
          TAG: /* D */0,
          _0: "textIndent",
          _1: tmp
        };
}

function textOverflow(x) {
  return {
          TAG: /* D */0,
          _0: "textOverflow",
          _1: typeof x === "string" ? (
              x === "unset" || x === "inherit_" || x === "initial" ? Css_AtomicTypes.Cascading.toString(x) : Css_AtomicTypes.TextOverflow.toString(x)
            ) : (
              x.NAME === "string" ? Css_AtomicTypes.TextOverflow.toString(x) : Css_AtomicTypes.Var.toString(x)
            )
        };
}

function textTransform(x) {
  return {
          TAG: /* D */0,
          _0: "textTransform",
          _1: typeof x === "string" ? (
              x === "unset" || x === "inherit_" || x === "initial" ? Css_AtomicTypes.Cascading.toString(x) : Css_AtomicTypes.TextTransform.toString(x)
            ) : Css_AtomicTypes.Var.toString(x)
        };
}

function top(x) {
  var tmp;
  if (typeof x === "string") {
    tmp = x === "zero" ? Css_AtomicTypes.Length.toString(x) : Css_AtomicTypes.Cascading.toString(x);
  } else {
    var variant = x.NAME;
    tmp = variant === "var" || variant === "varDefault" ? Css_AtomicTypes.Var.toString(x) : Css_AtomicTypes.Length.toString(x);
  }
  return {
          TAG: /* D */0,
          _0: "top",
          _1: tmp
        };
}

function transform(x) {
  return {
          TAG: /* D */0,
          _0: "transform",
          _1: Css_AtomicTypes.Transform.toString(x)
        };
}

function transforms(x) {
  return {
          TAG: /* D */0,
          _0: "transform",
          _1: join(Belt_Array.map(x, Css_AtomicTypes.Transform.toString), " ")
        };
}

function transformOrigin(x, y) {
  return {
          TAG: /* D */0,
          _0: "transformOrigin",
          _1: Css_AtomicTypes.Length.toString(x) + (" " + Css_AtomicTypes.Length.toString(y))
        };
}

function transformOrigin3d(x, y, z) {
  return {
          TAG: /* D */0,
          _0: "transformOrigin",
          _1: Css_AtomicTypes.Length.toString(x) + (" " + (Css_AtomicTypes.Length.toString(y) + (" " + (Css_AtomicTypes.Length.toString(z) + " "))))
        };
}

function unsafe(property, value) {
  return {
          TAG: /* D */0,
          _0: property,
          _1: value
        };
}

function userSelect(x) {
  return {
          TAG: /* D */0,
          _0: "userSelect",
          _1: typeof x === "string" ? (
              x === "unset" || x === "inherit_" || x === "initial" ? Css_AtomicTypes.Cascading.toString(x) : Css_AtomicTypes.UserSelect.toString(x)
            ) : Css_AtomicTypes.Var.toString(x)
        };
}

function verticalAlign(x) {
  var tmp;
  if (typeof x === "string") {
    tmp = x === "textTop" || x === "textBottom" || x === "baseline" || x === "super" || x === "top" || x === "sub" || x === "bottom" || x === "middle" ? Css_AtomicTypes.VerticalAlign.toString(x) : (
        x === "zero" ? Css_AtomicTypes.Length.toString(x) : Css_AtomicTypes.Cascading.toString(x)
      );
  } else {
    var variant = x.NAME;
    tmp = variant === "var" || variant === "varDefault" ? Css_AtomicTypes.Var.toString(x) : Css_AtomicTypes.Length.toString(x);
  }
  return {
          TAG: /* D */0,
          _0: "verticalAlign",
          _1: tmp
        };
}

function visibility(x) {
  return {
          TAG: /* D */0,
          _0: "visibility",
          _1: typeof x === "string" ? (
              x === "unset" || x === "inherit_" || x === "initial" ? Css_AtomicTypes.Cascading.toString(x) : Css_AtomicTypes.Visibility.toString(x)
            ) : Css_AtomicTypes.Var.toString(x)
        };
}

function width(x) {
  var tmp;
  if (typeof x === "string") {
    tmp = x === "unset" || x === "inherit_" || x === "initial" ? Css_AtomicTypes.Cascading.toString(x) : (
        x === "zero" ? Css_AtomicTypes.Length.toString(x) : Css_AtomicTypes.Width.toString(x)
      );
  } else {
    var variant = x.NAME;
    tmp = variant === "var" || variant === "varDefault" ? Css_AtomicTypes.Var.toString(x) : (
        variant === "percent" ? Css_AtomicTypes.Percentage.toString(x) : Css_AtomicTypes.Length.toString(x)
      );
  }
  return {
          TAG: /* D */0,
          _0: "width",
          _1: tmp
        };
}

function whiteSpace(x) {
  return {
          TAG: /* D */0,
          _0: "whiteSpace",
          _1: typeof x === "string" ? (
              x === "nowrap" || x === "normal" || x === "breakSpaces" || x === "preWrap" || x === "preLine" || x === "pre" ? Css_AtomicTypes.WhiteSpace.toString(x) : Css_AtomicTypes.Cascading.toString(x)
            ) : Css_AtomicTypes.Var.toString(x)
        };
}

function wordBreak(x) {
  return {
          TAG: /* D */0,
          _0: "wordBreak",
          _1: typeof x === "string" ? (
              x === "keepAll" || x === "normal" || x === "breakAll" ? Css_AtomicTypes.WordBreak.toString(x) : Css_AtomicTypes.Cascading.toString(x)
            ) : Css_AtomicTypes.Var.toString(x)
        };
}

function wordSpacing(x) {
  var tmp;
  if (typeof x === "string") {
    tmp = x === "zero" ? Css_AtomicTypes.Length.toString(x) : (
        x === "normal" ? Css_AtomicTypes.WordSpacing.toString(x) : Css_AtomicTypes.Cascading.toString(x)
      );
  } else {
    var variant = x.NAME;
    tmp = variant === "var" || variant === "varDefault" ? Css_AtomicTypes.Var.toString(x) : (
        variant === "percent" ? Css_AtomicTypes.Percentage.toString(x) : Css_AtomicTypes.Length.toString(x)
      );
  }
  return {
          TAG: /* D */0,
          _0: "wordSpacing",
          _1: tmp
        };
}

function zIndex(x) {
  return {
          TAG: /* D */0,
          _0: "zIndex",
          _1: x.toString()
        };
}

function media(query, rules) {
  return {
          TAG: /* S */1,
          _0: "@media " + query,
          _1: rules
        };
}

function selector(selector$1, rules) {
  return {
          TAG: /* S */1,
          _0: selector$1,
          _1: rules
        };
}

function active(param) {
  return {
          TAG: /* PseudoClass */2,
          _0: "active",
          _1: param
        };
}

function checked(param) {
  return {
          TAG: /* PseudoClass */2,
          _0: "checked",
          _1: param
        };
}

function $$default(param) {
  return {
          TAG: /* PseudoClass */2,
          _0: "default",
          _1: param
        };
}

function defined(param) {
  return {
          TAG: /* PseudoClass */2,
          _0: "defined",
          _1: param
        };
}

function disabled(param) {
  return {
          TAG: /* PseudoClass */2,
          _0: "disabled",
          _1: param
        };
}

function empty(param) {
  return {
          TAG: /* PseudoClass */2,
          _0: "empty",
          _1: param
        };
}

function enabled(param) {
  return {
          TAG: /* PseudoClass */2,
          _0: "enabled",
          _1: param
        };
}

function first(param) {
  return {
          TAG: /* PseudoClass */2,
          _0: "first",
          _1: param
        };
}

function firstChild(param) {
  return {
          TAG: /* PseudoClass */2,
          _0: "first-child",
          _1: param
        };
}

function firstOfType(param) {
  return {
          TAG: /* PseudoClass */2,
          _0: "first-of-type",
          _1: param
        };
}

function focus(param) {
  return {
          TAG: /* PseudoClass */2,
          _0: "focus",
          _1: param
        };
}

function focusWithin(param) {
  return {
          TAG: /* PseudoClass */2,
          _0: "focus-within",
          _1: param
        };
}

function host(selector, rules) {
  if (selector !== undefined) {
    return {
            TAG: /* PseudoClassParam */3,
            _0: "host",
            _1: selector,
            _2: rules
          };
  } else {
    return {
            TAG: /* PseudoClass */2,
            _0: "host",
            _1: rules
          };
  }
}

function hover(param) {
  return {
          TAG: /* PseudoClass */2,
          _0: "hover",
          _1: param
        };
}

function indeterminate(param) {
  return {
          TAG: /* PseudoClass */2,
          _0: "indeterminate",
          _1: param
        };
}

function inRange(param) {
  return {
          TAG: /* PseudoClass */2,
          _0: "in-range",
          _1: param
        };
}

function invalid(param) {
  return {
          TAG: /* PseudoClass */2,
          _0: "invalid",
          _1: param
        };
}

function lang(code, rules) {
  return {
          TAG: /* PseudoClassParam */3,
          _0: "lang",
          _1: code,
          _2: rules
        };
}

function lastChild(param) {
  return {
          TAG: /* PseudoClass */2,
          _0: "last-child",
          _1: param
        };
}

function lastOfType(param) {
  return {
          TAG: /* PseudoClass */2,
          _0: "last-of-type",
          _1: param
        };
}

function link(param) {
  return {
          TAG: /* PseudoClass */2,
          _0: "link",
          _1: param
        };
}

function not__(selector, rules) {
  return {
          TAG: /* PseudoClassParam */3,
          _0: "not",
          _1: selector,
          _2: rules
        };
}

function toString(param) {
  if (typeof param === "string") {
    if (param === "odd") {
      return "odd";
    } else {
      return "even";
    }
  }
  if (param.NAME !== "add") {
    return param.VAL.toString() + "n";
  }
  var match = param.VAL;
  return match[0].toString() + ("n+" + match[1].toString());
}

var Nth = {
  toString: toString
};

function nthChild(x, rules) {
  return {
          TAG: /* PseudoClassParam */3,
          _0: "nth-child",
          _1: toString(x),
          _2: rules
        };
}

function nthLastChild(x, rules) {
  return {
          TAG: /* PseudoClassParam */3,
          _0: "nth-last-child",
          _1: toString(x),
          _2: rules
        };
}

function nthLastOfType(x, rules) {
  return {
          TAG: /* PseudoClassParam */3,
          _0: "nth-last-of-type",
          _1: toString(x),
          _2: rules
        };
}

function nthOfType(x, rules) {
  return {
          TAG: /* PseudoClassParam */3,
          _0: "nth-of-type",
          _1: toString(x),
          _2: rules
        };
}

function onlyChild(param) {
  return {
          TAG: /* PseudoClass */2,
          _0: "only-child",
          _1: param
        };
}

function onlyOfType(param) {
  return {
          TAG: /* PseudoClass */2,
          _0: "only-of-type",
          _1: param
        };
}

function optional(param) {
  return {
          TAG: /* PseudoClass */2,
          _0: "optional",
          _1: param
        };
}

function outOfRange(param) {
  return {
          TAG: /* PseudoClass */2,
          _0: "out-of-range",
          _1: param
        };
}

function readOnly(param) {
  return {
          TAG: /* PseudoClass */2,
          _0: "read-only",
          _1: param
        };
}

function readWrite(param) {
  return {
          TAG: /* PseudoClass */2,
          _0: "read-write",
          _1: param
        };
}

function required(param) {
  return {
          TAG: /* PseudoClass */2,
          _0: "required",
          _1: param
        };
}

function root(param) {
  return {
          TAG: /* PseudoClass */2,
          _0: "root",
          _1: param
        };
}

function scope(param) {
  return {
          TAG: /* PseudoClass */2,
          _0: "scope",
          _1: param
        };
}

function target(param) {
  return {
          TAG: /* PseudoClass */2,
          _0: "target",
          _1: param
        };
}

function valid(param) {
  return {
          TAG: /* PseudoClass */2,
          _0: "valid",
          _1: param
        };
}

function visited(param) {
  return {
          TAG: /* PseudoClass */2,
          _0: "visited",
          _1: param
        };
}

function after(param) {
  return {
          TAG: /* S */1,
          _0: "::after",
          _1: param
        };
}

function before(param) {
  return {
          TAG: /* S */1,
          _0: "::before",
          _1: param
        };
}

function firstLetter(param) {
  return {
          TAG: /* S */1,
          _0: "::first-letter",
          _1: param
        };
}

function firstLine(param) {
  return {
          TAG: /* S */1,
          _0: "::first-line",
          _1: param
        };
}

function selection(param) {
  return {
          TAG: /* S */1,
          _0: "::selection",
          _1: param
        };
}

function child(x) {
  var partial_arg = " > " + x;
  return function (param) {
    return {
            TAG: /* S */1,
            _0: partial_arg,
            _1: param
          };
  };
}

function children(param) {
  return {
          TAG: /* S */1,
          _0: " > *",
          _1: param
        };
}

function directSibling(param) {
  return {
          TAG: /* S */1,
          _0: " + ",
          _1: param
        };
}

function placeholder(param) {
  return {
          TAG: /* S */1,
          _0: "::placeholder",
          _1: param
        };
}

function siblings(param) {
  return {
          TAG: /* S */1,
          _0: " ~ ",
          _1: param
        };
}

function anyLink(param) {
  return {
          TAG: /* S */1,
          _0: ":any-link",
          _1: param
        };
}

var initial = Css_AtomicTypes.Cascading.initial;

var inherit_ = Css_AtomicTypes.Cascading.inherit_;

var unset = Css_AtomicTypes.Cascading.unset;

var $$var = Css_AtomicTypes.Var.$$var;

var varDefault = Css_AtomicTypes.Var.varDefault;

var pct = Css_AtomicTypes.Percentage.pct;

var ch = Css_AtomicTypes.Length.ch;

var cm = Css_AtomicTypes.Length.cm;

var em = Css_AtomicTypes.Length.em;

var ex = Css_AtomicTypes.Length.ex;

var mm = Css_AtomicTypes.Length.mm;

var pt = Css_AtomicTypes.Length.pt;

var px = Css_AtomicTypes.Length.px;

var pxFloat = Css_AtomicTypes.Length.pxFloat;

var rem = Css_AtomicTypes.Length.rem;

var vh = Css_AtomicTypes.Length.vh;

var vmin = Css_AtomicTypes.Length.vmin;

var vmax = Css_AtomicTypes.Length.vmax;

var zero = Css_AtomicTypes.Length.zero;

var deg = Css_AtomicTypes.Angle.deg;

var rad = Css_AtomicTypes.Angle.rad;

var grad = Css_AtomicTypes.Angle.grad;

var turn = Css_AtomicTypes.Angle.turn;

var ltr = Css_AtomicTypes.Direction.ltr;

var rtl = Css_AtomicTypes.Direction.rtl;

var absolute = Css_AtomicTypes.Position.absolute;

var relative = Css_AtomicTypes.Position.relative;

var $$static = Css_AtomicTypes.Position.$$static;

var sticky = Css_AtomicTypes.Position.sticky;

var horizontal = Css_AtomicTypes.Resize.horizontal;

var vertical = Css_AtomicTypes.Resize.vertical;

var smallCaps = Css_AtomicTypes.FontVariant.smallCaps;

var italic = Css_AtomicTypes.FontStyle.italic;

var oblique = Css_AtomicTypes.FontStyle.oblique;

var rgb = Css_AtomicTypes.Color.rgb;

var rgba = Css_AtomicTypes.Color.rgba;

var hsl = Css_AtomicTypes.Color.hsl;

var hsla = Css_AtomicTypes.Color.hsla;

var hex = Css_AtomicTypes.Color.hex;

var currentColor = Css_AtomicTypes.Color.currentColor;

var transparent = Css_AtomicTypes.Color.transparent;

var linear = Css_AtomicTypes.TimingFunction.linear;

var ease = Css_AtomicTypes.TimingFunction.ease;

var easeIn = Css_AtomicTypes.TimingFunction.easeIn;

var easeInOut = Css_AtomicTypes.TimingFunction.easeInOut;

var easeOut = Css_AtomicTypes.TimingFunction.easeOut;

var stepStart = Css_AtomicTypes.TimingFunction.stepStart;

var stepEnd = Css_AtomicTypes.TimingFunction.stepEnd;

var steps = Css_AtomicTypes.TimingFunction.steps;

var cubicBezier = Css_AtomicTypes.TimingFunction.cubicBezier;

var marginBox = Css_AtomicTypes.GeometyBox.marginBox;

var fillBox = Css_AtomicTypes.GeometyBox.fillBox;

var strokeBox = Css_AtomicTypes.GeometyBox.strokeBox;

var viewBox = Css_AtomicTypes.GeometyBox.viewBox;

var translate = Css_AtomicTypes.Transform.translate;

var translate3d = Css_AtomicTypes.Transform.translate3d;

var translateX = Css_AtomicTypes.Transform.translateX;

var translateY = Css_AtomicTypes.Transform.translateY;

var translateZ = Css_AtomicTypes.Transform.translateZ;

var scaleX = Css_AtomicTypes.Transform.scaleX;

var scaleY = Css_AtomicTypes.Transform.scaleY;

var scaleZ = Css_AtomicTypes.Transform.scaleZ;

var rotateX = Css_AtomicTypes.Transform.rotateX;

var rotateY = Css_AtomicTypes.Transform.rotateY;

var rotateZ = Css_AtomicTypes.Transform.rotateZ;

var scale = Css_AtomicTypes.Transform.scale;

var scale3d = Css_AtomicTypes.Transform.scale3d;

var skew = Css_AtomicTypes.Transform.skew;

var skewX = Css_AtomicTypes.Transform.skewX;

var skewY = Css_AtomicTypes.Transform.skewY;

var thin = Css_AtomicTypes.FontWeight.thin;

var extraLight = Css_AtomicTypes.FontWeight.extraLight;

var light = Css_AtomicTypes.FontWeight.light;

var medium = Css_AtomicTypes.FontWeight.medium;

var semiBold = Css_AtomicTypes.FontWeight.semiBold;

var bold = Css_AtomicTypes.FontWeight.bold;

var extraBold = Css_AtomicTypes.FontWeight.extraBold;

var lighter = Css_AtomicTypes.FontWeight.lighter;

var bolder = Css_AtomicTypes.FontWeight.bolder;

var linearGradient = Css_AtomicTypes.Gradient.linearGradient;

var repeatingLinearGradient = Css_AtomicTypes.Gradient.repeatingLinearGradient;

var radialGradient = Css_AtomicTypes.Gradient.radialGradient;

var repeatingRadialGradient = Css_AtomicTypes.Gradient.repeatingRadialGradient;

var areas = Css_AtomicTypes.GridTemplateAreas.areas;

var ident = Css_AtomicTypes.GridArea.ident;

var numIdent = Css_AtomicTypes.GridArea.numIdent;

var contextMenu = Css_AtomicTypes.Cursor.contextMenu;

var help = Css_AtomicTypes.Cursor.help;

var pointer = Css_AtomicTypes.Cursor.pointer;

var progress = Css_AtomicTypes.Cursor.progress;

var wait = Css_AtomicTypes.Cursor.wait;

var cell = Css_AtomicTypes.Cursor.cell;

var crosshair = Css_AtomicTypes.Cursor.crosshair;

var verticalText = Css_AtomicTypes.Cursor.verticalText;

var alias = Css_AtomicTypes.Cursor.alias;

var copy = Css_AtomicTypes.Cursor.copy;

var move = Css_AtomicTypes.Cursor.move;

var noDrop = Css_AtomicTypes.Cursor.noDrop;

var notAllowed = Css_AtomicTypes.Cursor.notAllowed;

var grab = Css_AtomicTypes.Cursor.grab;

var grabbing = Css_AtomicTypes.Cursor.grabbing;

var allScroll = Css_AtomicTypes.Cursor.allScroll;

var colResize = Css_AtomicTypes.Cursor.colResize;

var rowResize = Css_AtomicTypes.Cursor.rowResize;

var nResize = Css_AtomicTypes.Cursor.nResize;

var eResize = Css_AtomicTypes.Cursor.eResize;

var sResize = Css_AtomicTypes.Cursor.sResize;

var wResize = Css_AtomicTypes.Cursor.wResize;

var neResize = Css_AtomicTypes.Cursor.neResize;

var nwResize = Css_AtomicTypes.Cursor.nwResize;

var seResize = Css_AtomicTypes.Cursor.seResize;

var swResize = Css_AtomicTypes.Cursor.swResize;

var ewResize = Css_AtomicTypes.Cursor.ewResize;

var nsResize = Css_AtomicTypes.Cursor.nsResize;

var neswResize = Css_AtomicTypes.Cursor.neswResize;

var nwseResize = Css_AtomicTypes.Cursor.nwseResize;

var zoomIn = Css_AtomicTypes.Cursor.zoomIn;

var zoomOut = Css_AtomicTypes.Cursor.zoomOut;

function vw(x) {
  return {
          NAME: "vw",
          VAL: x
        };
}

function fr(x) {
  return {
          NAME: "fr",
          VAL: x
        };
}

function $neg(a, b) {
  return {
          NAME: "calc",
          VAL: [
            "sub",
            a,
            b
          ]
        };
}

function $plus(a, b) {
  return {
          NAME: "calc",
          VAL: [
            "add",
            a,
            b
          ]
        };
}

var Calc = {
  $neg: $neg,
  $plus: $plus
};

function size(x, y) {
  return {
          NAME: "size",
          VAL: [
            x,
            y
          ]
        };
}

function count(x) {
  return {
          NAME: "count",
          VAL: x
        };
}

function localUrl(x) {
  return {
          NAME: "localUrl",
          VAL: x
        };
}

function rotate(a) {
  return {
          NAME: "rotate",
          VAL: a
        };
}

function rotate3d(x, y, z, a) {
  return {
          NAME: "rotate3d",
          VAL: [
            x,
            y,
            z,
            a
          ]
        };
}

function url(x) {
  return {
          NAME: "url",
          VAL: x
        };
}

function flex3(grow, shrink, basis) {
  return {
          TAG: /* D */0,
          _0: "flex",
          _1: grow.toString() + (" " + (shrink.toString() + (" " + (
                  typeof basis === "string" && basis !== "zero" ? Css_AtomicTypes.FlexBasis.toString(basis) : Css_AtomicTypes.Length.toString(basis)
                ))))
        };
}

function flexBasis(x) {
  return {
          TAG: /* D */0,
          _0: "flexBasis",
          _1: typeof x === "string" && x !== "zero" ? Css_AtomicTypes.FlexBasis.toString(x) : Css_AtomicTypes.Length.toString(x)
        };
}

function order(x) {
  return {
          TAG: /* D */0,
          _0: "order",
          _1: x.toString()
        };
}

function string_of_minmax(param) {
  if (typeof param === "string") {
    if (param === "zero") {
      return "0";
    } else if (param === "minContent") {
      return "min-content";
    } else if (param === "maxContent") {
      return "max-content";
    } else {
      return "auto";
    }
  }
  var variant = param.NAME;
  if (variant === "pxFloat") {
    return param.VAL.toString() + "px";
  }
  if (variant === "inch") {
    return param.VAL.toString() + "in";
  }
  if (variant === "vmax") {
    return param.VAL.toString() + "vmax";
  }
  if (variant === "vmin") {
    return param.VAL.toString() + "vmin";
  }
  if (variant === "percent") {
    return param.VAL.toString() + "%";
  }
  if (variant === "ch") {
    return param.VAL.toString() + "ch";
  }
  if (variant === "cm") {
    return param.VAL.toString() + "cm";
  }
  if (variant === "em") {
    return param.VAL.toString() + "em";
  }
  if (variant === "ex") {
    return param.VAL.toString() + "ex";
  }
  if (variant === "fr") {
    return param.VAL.toString() + "fr";
  }
  if (variant === "mm") {
    return param.VAL.toString() + "mm";
  }
  if (variant === "pc") {
    return param.VAL.toString() + "pc";
  }
  if (variant === "pt") {
    return param.VAL.toString() + "pt";
  }
  if (variant === "px") {
    return param.VAL.toString() + "px";
  }
  if (variant === "vh") {
    return param.VAL.toString() + "vh";
  }
  if (variant === "vw") {
    return param.VAL.toString() + "vw";
  }
  if (variant === "rem") {
    return param.VAL.toString() + "rem";
  }
  var match = param.VAL;
  if (match[0] === "sub") {
    return "calc(" + (Css_AtomicTypes.Length.toString(match[1]) + (" - " + (Css_AtomicTypes.Length.toString(match[2]) + ")")));
  } else {
    return "calc(" + (Css_AtomicTypes.Length.toString(match[1]) + (" + " + (Css_AtomicTypes.Length.toString(match[2]) + ")")));
  }
}

function string_of_dimension(param) {
  if (typeof param === "string") {
    if (param === "none") {
      return "none";
    } else if (param === "zero") {
      return "0";
    } else if (param === "minContent") {
      return "min-content";
    } else if (param === "fitContent") {
      return "fit-content";
    } else if (param === "maxContent") {
      return "max-content";
    } else {
      return "auto";
    }
  }
  var variant = param.NAME;
  if (variant === "pxFloat") {
    return param.VAL.toString() + "px";
  }
  if (variant === "inch") {
    return param.VAL.toString() + "in";
  }
  if (variant === "vmax") {
    return param.VAL.toString() + "vmax";
  }
  if (variant === "vmin") {
    return param.VAL.toString() + "vmin";
  }
  if (variant === "minmax") {
    var match = param.VAL;
    return "minmax(" + (string_of_minmax(match[0]) + ("," + (string_of_minmax(match[1]) + ")")));
  }
  if (variant === "percent") {
    return param.VAL.toString() + "%";
  }
  if (variant === "ch") {
    return param.VAL.toString() + "ch";
  }
  if (variant === "cm") {
    return param.VAL.toString() + "cm";
  }
  if (variant === "em") {
    return param.VAL.toString() + "em";
  }
  if (variant === "ex") {
    return param.VAL.toString() + "ex";
  }
  if (variant === "fr") {
    return param.VAL.toString() + "fr";
  }
  if (variant === "mm") {
    return param.VAL.toString() + "mm";
  }
  if (variant === "pc") {
    return param.VAL.toString() + "pc";
  }
  if (variant === "pt") {
    return param.VAL.toString() + "pt";
  }
  if (variant === "px") {
    return param.VAL.toString() + "px";
  }
  if (variant === "vh") {
    return param.VAL.toString() + "vh";
  }
  if (variant === "vw") {
    return param.VAL.toString() + "vw";
  }
  if (variant === "rem") {
    return param.VAL.toString() + "rem";
  }
  var match$1 = param.VAL;
  if (match$1[0] === "sub") {
    return "calc(" + (Css_AtomicTypes.Length.toString(match$1[1]) + (" - " + (Css_AtomicTypes.Length.toString(match$1[2]) + ")")));
  } else {
    return "calc(" + (Css_AtomicTypes.Length.toString(match$1[1]) + (" + " + (Css_AtomicTypes.Length.toString(match$1[2]) + ")")));
  }
}

function gridLengthToJs(param) {
  if (typeof param === "string") {
    if (param === "zero") {
      return "0";
    } else if (param === "minContent") {
      return "min-content";
    } else if (param === "maxContent") {
      return "max-content";
    } else {
      return "auto";
    }
  }
  var variant = param.NAME;
  if (variant === "pxFloat") {
    return param.VAL.toString() + "px";
  }
  if (variant === "inch") {
    return param.VAL.toString() + "in";
  }
  if (variant === "vmax") {
    return param.VAL.toString() + "vmax";
  }
  if (variant === "vmin") {
    return param.VAL.toString() + "vmin";
  }
  if (variant === "minmax") {
    var match = param.VAL;
    return "minmax(" + (string_of_minmax(match[0]) + ("," + (string_of_minmax(match[1]) + ")")));
  }
  if (variant === "percent") {
    return param.VAL.toString() + "%";
  }
  if (variant === "ch") {
    return param.VAL.toString() + "ch";
  }
  if (variant === "cm") {
    return param.VAL.toString() + "cm";
  }
  if (variant === "em") {
    return param.VAL.toString() + "em";
  }
  if (variant === "ex") {
    return param.VAL.toString() + "ex";
  }
  if (variant === "fr") {
    return param.VAL.toString() + "fr";
  }
  if (variant === "mm") {
    return param.VAL.toString() + "mm";
  }
  if (variant === "pc") {
    return param.VAL.toString() + "pc";
  }
  if (variant === "pt") {
    return param.VAL.toString() + "pt";
  }
  if (variant === "px") {
    return param.VAL.toString() + "px";
  }
  if (variant === "vh") {
    return param.VAL.toString() + "vh";
  }
  if (variant === "vw") {
    return param.VAL.toString() + "vw";
  }
  if (variant === "rem") {
    return param.VAL.toString() + "rem";
  }
  if (variant === "repeat") {
    var match$1 = param.VAL;
    return "repeat(" + (Css_AtomicTypes.RepeatValue.toString(match$1[0]) + (", " + (string_of_dimension(match$1[1]) + ")")));
  }
  var match$2 = param.VAL;
  if (match$2[0] === "sub") {
    return "calc(" + (Css_AtomicTypes.Length.toString(match$2[1]) + (" - " + (Css_AtomicTypes.Length.toString(match$2[2]) + ")")));
  } else {
    return "calc(" + (Css_AtomicTypes.Length.toString(match$2[1]) + (" + " + (Css_AtomicTypes.Length.toString(match$2[2]) + ")")));
  }
}

function string_of_dimensions(dimensions) {
  return join(Belt_Array.map(dimensions, gridLengthToJs), " ");
}

function gridTemplateColumns(dimensions) {
  return {
          TAG: /* D */0,
          _0: "gridTemplateColumns",
          _1: string_of_dimensions(dimensions)
        };
}

function gridTemplateRows(dimensions) {
  return {
          TAG: /* D */0,
          _0: "gridTemplateRows",
          _1: string_of_dimensions(dimensions)
        };
}

function gridAutoColumns(dimensions) {
  return {
          TAG: /* D */0,
          _0: "gridAutoColumns",
          _1: string_of_dimension(dimensions)
        };
}

function gridAutoRows(dimensions) {
  return {
          TAG: /* D */0,
          _0: "gridAutoRows",
          _1: string_of_dimension(dimensions)
        };
}

function gridArea(s) {
  var tmp;
  if (typeof s === "string") {
    tmp = s === "unset" || s === "inherit_" || s === "initial" ? Css_AtomicTypes.Cascading.toString(s) : Css_AtomicTypes.GridArea.toString(s);
  } else {
    var variant = s.NAME;
    tmp = variant === "var" || variant === "varDefault" ? Css_AtomicTypes.Var.toString(s) : Css_AtomicTypes.GridArea.toString(s);
  }
  return {
          TAG: /* D */0,
          _0: "gridArea",
          _1: tmp
        };
}

function gridArea2(s, s2) {
  return {
          TAG: /* D */0,
          _0: "gridArea",
          _1: Css_AtomicTypes.GridArea.toString(s) + (" / " + Css_AtomicTypes.GridArea.toString(s2))
        };
}

function gridArea3(s, s2, s3) {
  return {
          TAG: /* D */0,
          _0: "gridArea",
          _1: Css_AtomicTypes.GridArea.toString(s) + (" / " + (Css_AtomicTypes.GridArea.toString(s2) + (" / " + Css_AtomicTypes.GridArea.toString(s3))))
        };
}

function gridArea4(s, s2, s3, s4) {
  return {
          TAG: /* D */0,
          _0: "gridArea",
          _1: Css_AtomicTypes.GridArea.toString(s) + (" / " + (Css_AtomicTypes.GridArea.toString(s2) + (" / " + (Css_AtomicTypes.GridArea.toString(s3) + (" / " + Css_AtomicTypes.GridArea.toString(s4))))))
        };
}

function gridTemplateAreas(l) {
  return {
          TAG: /* D */0,
          _0: "gridTemplateAreas",
          _1: typeof l === "string" ? (
              l === "unset" || l === "inherit_" || l === "initial" ? Css_AtomicTypes.Cascading.toString(l) : Css_AtomicTypes.GridTemplateAreas.toString(l)
            ) : (
              l.NAME === "areas" ? Css_AtomicTypes.GridTemplateAreas.toString(l) : Css_AtomicTypes.Var.toString(l)
            )
        };
}

function string_of_filter(u) {
  if (typeof u === "string") {
    if (u === "unset" || u === "inherit_" || u === "initial") {
      return Css_AtomicTypes.Cascading.toString(u);
    } else {
      return "none";
    }
  }
  var variant = u.NAME;
  if (variant !== "dropShadow") {
    if (variant === "brightness") {
      return "brightness(" + (u.VAL.toString() + "%)");
    } else if (variant === "opacity") {
      return "opacity(" + (u.VAL.toString() + "%)");
    } else if (variant === "var" || variant === "varDefault") {
      return Css_AtomicTypes.Var.toString(u);
    } else if (variant === "grayscale") {
      return "grayscale(" + (u.VAL.toString() + "%)");
    } else if (variant === "sepia") {
      return "sepia(" + (u.VAL.toString() + "%)");
    } else if (variant === "saturate") {
      return "saturate(" + (u.VAL.toString() + "%)");
    } else if (variant === "url") {
      return Css_AtomicTypes.Url.toString(u);
    } else if (variant === "invert") {
      return "invert(" + (u.VAL.toString() + "%)");
    } else if (variant === "contrast") {
      return "contrast(" + (u.VAL.toString() + "%)");
    } else if (variant === "hueRotate") {
      return "hue-rotate(" + (Css_AtomicTypes.Angle.toString(u.VAL) + ")");
    } else {
      return "blur(" + (Css_AtomicTypes.Length.toString(u.VAL) + ")");
    }
  }
  var match = u.VAL;
  return "drop-shadow(" + (Css_AtomicTypes.Length.toString(match[0]) + (" " + (Css_AtomicTypes.Length.toString(match[1]) + (" " + (Css_AtomicTypes.Length.toString(match[2]) + (" " + (Css_AtomicTypes.Color.toString(match[3]) + ")")))))));
}

function filter(x) {
  return {
          TAG: /* D */0,
          _0: "filter",
          _1: join(Belt_Array.map(x, string_of_filter), " ")
        };
}

function box(xOpt, yOpt, blurOpt, spreadOpt, insetOpt, color) {
  var x = xOpt !== undefined ? xOpt : zero;
  var y = yOpt !== undefined ? yOpt : zero;
  var blur = blurOpt !== undefined ? blurOpt : zero;
  var spread = spreadOpt !== undefined ? spreadOpt : zero;
  var inset = insetOpt !== undefined ? insetOpt : false;
  return {
          NAME: "shadow",
          VAL: Css_AtomicTypes.Length.toString(x) + (" " + (Css_AtomicTypes.Length.toString(y) + (" " + (Css_AtomicTypes.Length.toString(blur) + (" " + (Css_AtomicTypes.Length.toString(spread) + (" " + (Css_AtomicTypes.Color.toString(color) + (
                            inset ? " inset" : ""
                          )))))))))
        };
}

function text(xOpt, yOpt, blurOpt, color) {
  var x = xOpt !== undefined ? xOpt : zero;
  var y = yOpt !== undefined ? yOpt : zero;
  var blur = blurOpt !== undefined ? blurOpt : zero;
  return {
          NAME: "shadow",
          VAL: Css_AtomicTypes.Length.toString(x) + (" " + (Css_AtomicTypes.Length.toString(y) + (" " + (Css_AtomicTypes.Length.toString(blur) + (" " + Css_AtomicTypes.Color.toString(color))))))
        };
}

function toString$1(param) {
  if (typeof param === "string") {
    return "none";
  } else {
    return param.VAL;
  }
}

var Shadow = {
  box: box,
  text: text,
  toString: toString$1
};

function boxShadow(x) {
  return {
          TAG: /* D */0,
          _0: "boxShadow",
          _1: typeof x === "string" ? (
              x === "unset" || x === "inherit_" || x === "initial" ? Css_AtomicTypes.Cascading.toString(x) : toString$1(x)
            ) : (
              x.NAME === "shadow" ? toString$1(x) : Css_AtomicTypes.Var.toString(x)
            )
        };
}

function boxShadows(x) {
  return {
          TAG: /* D */0,
          _0: "boxShadow",
          _1: join(Belt_Array.map(x, toString$1), ", ")
        };
}

function string_of_borderstyle(b) {
  if (typeof b === "string") {
    if (b === "unset" || b === "inherit_" || b === "initial") {
      return Css_AtomicTypes.Cascading.toString(b);
    } else {
      return Css_AtomicTypes.BorderStyle.toString(b);
    }
  } else {
    return Css_AtomicTypes.Var.toString(b);
  }
}

function border(px, style, color) {
  return {
          TAG: /* D */0,
          _0: "border",
          _1: Css_AtomicTypes.Length.toString(px) + (" " + (string_of_borderstyle(style) + (" " + Css_AtomicTypes.Color.toString(color))))
        };
}

function borderStyle(x) {
  return {
          TAG: /* D */0,
          _0: "borderStyle",
          _1: string_of_borderstyle(x)
        };
}

function borderLeft(px, style, color) {
  return {
          TAG: /* D */0,
          _0: "borderLeft",
          _1: Css_AtomicTypes.Length.toString(px) + (" " + (string_of_borderstyle(style) + (" " + Css_AtomicTypes.Color.toString(color))))
        };
}

function borderLeftStyle(x) {
  return {
          TAG: /* D */0,
          _0: "borderLeftStyle",
          _1: string_of_borderstyle(x)
        };
}

function borderRight(px, style, color) {
  return {
          TAG: /* D */0,
          _0: "borderRight",
          _1: Css_AtomicTypes.Length.toString(px) + (" " + (string_of_borderstyle(style) + (" " + Css_AtomicTypes.Color.toString(color))))
        };
}

function borderRightStyle(x) {
  return {
          TAG: /* D */0,
          _0: "borderRightStyle",
          _1: string_of_borderstyle(x)
        };
}

function borderTop(px, style, color) {
  return {
          TAG: /* D */0,
          _0: "borderTop",
          _1: Css_AtomicTypes.Length.toString(px) + (" " + (string_of_borderstyle(style) + (" " + Css_AtomicTypes.Color.toString(color))))
        };
}

function borderTopStyle(x) {
  return {
          TAG: /* D */0,
          _0: "borderTopStyle",
          _1: string_of_borderstyle(x)
        };
}

function borderBottom(px, style, color) {
  return {
          TAG: /* D */0,
          _0: "borderBottom",
          _1: Css_AtomicTypes.Length.toString(px) + (" " + (string_of_borderstyle(style) + (" " + Css_AtomicTypes.Color.toString(color))))
        };
}

function borderBottomStyle(x) {
  return {
          TAG: /* D */0,
          _0: "borderBottomStyle",
          _1: string_of_borderstyle(x)
        };
}

function background(x) {
  var tmp;
  if (typeof x === "string") {
    tmp = x === "transparent" || x === "currentColor" ? Css_AtomicTypes.Color.toString(x) : "none";
  } else {
    var variant = x.NAME;
    tmp = variant === "linearGradient" || variant === "radialGradient" || variant === "repeatingLinearGradient" || variant === "repeatingRadialGradient" ? Css_AtomicTypes.Gradient.toString(x) : (
        variant === "url" ? Css_AtomicTypes.Url.toString(x) : Css_AtomicTypes.Color.toString(x)
      );
  }
  return {
          TAG: /* D */0,
          _0: "background",
          _1: tmp
        };
}

function backgrounds(x) {
  return {
          TAG: /* D */0,
          _0: "background",
          _1: join(Belt_Array.map(x, (function (item) {
                      if (typeof item === "string") {
                        if (item === "transparent" || item === "currentColor") {
                          return Css_AtomicTypes.Color.toString(item);
                        } else {
                          return "none";
                        }
                      }
                      var variant = item.NAME;
                      if (variant === "linearGradient" || variant === "radialGradient" || variant === "repeatingLinearGradient" || variant === "repeatingRadialGradient") {
                        return Css_AtomicTypes.Gradient.toString(item);
                      } else if (variant === "url") {
                        return Css_AtomicTypes.Url.toString(item);
                      } else {
                        return Css_AtomicTypes.Color.toString(item);
                      }
                    })), ", ")
        };
}

function backgroundSize(x) {
  var tmp;
  if (typeof x === "string") {
    tmp = x === "cover" ? "cover" : (
        x === "contain" ? "contain" : "auto"
      );
  } else {
    var match = x.VAL;
    tmp = Css_AtomicTypes.Length.toString(match[0]) + (" " + Css_AtomicTypes.Length.toString(match[1]));
  }
  return {
          TAG: /* D */0,
          _0: "backgroundSize",
          _1: tmp
        };
}

function fontFace(fontFamily, src, fontStyle, fontWeight, fontDisplay, param) {
  var fontStyle$1 = Js_option.map((function (value) {
          return Css_AtomicTypes.FontStyle.toString(value);
        }), fontStyle);
  var src$1 = join(Belt_Array.map(src, (function (param) {
              if (param.NAME === "url") {
                return "url(\"" + param.VAL + "\")";
              } else {
                return "local(\"" + param.VAL + "\")";
              }
            })), ", ");
  var fontStyle$2 = Belt_Option.mapWithDefault(fontStyle$1, "", (function (s) {
          return "font-style: " + (s + ";");
        }));
  var fontWeight$1 = Belt_Option.mapWithDefault(fontWeight, "", (function (w) {
          return "font-weight: " + ((
                    typeof w === "string" ? (
                        w === "unset" || w === "inherit_" || w === "initial" ? Css_AtomicTypes.Cascading.toString(w) : Css_AtomicTypes.FontWeight.toString(w)
                      ) : (
                        w.NAME === "num" ? Css_AtomicTypes.FontWeight.toString(w) : Css_AtomicTypes.Var.toString(w)
                      )
                  ) + ";");
        }));
  var fontDisplay$1 = Belt_Option.mapWithDefault(fontDisplay, "", (function (f) {
          return "font-display: " + (Css_AtomicTypes.FontDisplay.toString(f) + ";");
        }));
  return "@font-face {\r\n     font-family: " + fontFamily + ";\r\n     src: " + src$1 + ";\r\n     " + fontStyle$2 + "\r\n     " + fontWeight$1 + "\r\n     " + fontDisplay$1 + "\r\n   }";
}

function textDecoration(x) {
  return {
          TAG: /* D */0,
          _0: "textDecoration",
          _1: typeof x === "string" ? (
              x === "none" ? "none" : (
                  x === "initial" ? "initial" : (
                      x === "inherit_" ? "inherit" : (
                          x === "underline" ? "underline" : (
                              x === "lineThrough" ? "line-through" : (
                                  x === "unset" ? "unset" : "overline"
                                )
                            )
                        )
                    )
                )
            ) : Css_AtomicTypes.Var.toString(x)
        };
}

function textShadow(x) {
  return {
          TAG: /* D */0,
          _0: "textShadow",
          _1: typeof x === "string" ? (
              x === "unset" || x === "inherit_" || x === "initial" ? Css_AtomicTypes.Cascading.toString(x) : toString$1(x)
            ) : (
              x.NAME === "shadow" ? toString$1(x) : Css_AtomicTypes.Var.toString(x)
            )
        };
}

function textShadows(x) {
  return {
          TAG: /* D */0,
          _0: "textShadow",
          _1: join(Belt_Array.map(x, toString$1), ", ")
        };
}

function transformStyle(x) {
  return {
          TAG: /* D */0,
          _0: "transformStyle",
          _1: typeof x === "string" ? (
              x === "unset" || x === "inherit_" || x === "initial" ? Css_AtomicTypes.Cascading.toString(x) : Css_AtomicTypes.TransformStyle.toString(x)
            ) : Css_AtomicTypes.Var.toString(x)
        };
}

function shorthand(durationOpt, delayOpt, timingFunctionOpt, property) {
  var duration = durationOpt !== undefined ? durationOpt : 0;
  var delay = delayOpt !== undefined ? delayOpt : 0;
  var timingFunction = timingFunctionOpt !== undefined ? timingFunctionOpt : "ease";
  return {
          NAME: "value",
          VAL: duration.toString() + "ms " + (Css_AtomicTypes.TimingFunction.toString(timingFunction) + (" " + (delay.toString() + "ms " + property)))
        };
}

function toString$2(param) {
  return param.VAL;
}

var Transition = {
  shorthand: shorthand,
  toString: toString$2
};

function transitionValue(x) {
  return {
          TAG: /* D */0,
          _0: "transition",
          _1: x.VAL
        };
}

function transitionList(x) {
  return {
          TAG: /* D */0,
          _0: "transition",
          _1: join(Belt_Array.map(x, toString$2), ", ")
        };
}

function transition(duration, delay, timingFunction, property) {
  var x = shorthand(duration, delay, timingFunction, property);
  return {
          TAG: /* D */0,
          _0: "transition",
          _1: x.VAL
        };
}

function transitionDelay(i) {
  return {
          TAG: /* D */0,
          _0: "transitionDelay",
          _1: i.toString() + "ms"
        };
}

function transitionDuration(i) {
  return {
          TAG: /* D */0,
          _0: "transitionDuration",
          _1: i.toString() + "ms"
        };
}

function transitionTimingFunction(x) {
  return {
          TAG: /* D */0,
          _0: "transitionTimingFunction",
          _1: Css_AtomicTypes.TimingFunction.toString(x)
        };
}

function transitionProperty(x) {
  return {
          TAG: /* D */0,
          _0: "transitionProperty",
          _1: x
        };
}

function shorthand$1(durationOpt, delayOpt, directionOpt, timingFunctionOpt, fillModeOpt, playStateOpt, iterationCountOpt, name) {
  var duration = durationOpt !== undefined ? durationOpt : 0;
  var delay = delayOpt !== undefined ? delayOpt : 0;
  var direction = directionOpt !== undefined ? directionOpt : "normal";
  var timingFunction = timingFunctionOpt !== undefined ? timingFunctionOpt : "ease";
  var fillMode = fillModeOpt !== undefined ? fillModeOpt : "none";
  var playState = playStateOpt !== undefined ? playStateOpt : "running";
  var iterationCount = iterationCountOpt !== undefined ? iterationCountOpt : ({
        NAME: "count",
        VAL: 1
      });
  return {
          NAME: "value",
          VAL: name + (" " + (duration.toString() + "ms " + (Css_AtomicTypes.TimingFunction.toString(timingFunction) + (" " + (delay.toString() + "ms " + (Css_AtomicTypes.AnimationIterationCount.toString(iterationCount) + (" " + (Css_AtomicTypes.AnimationDirection.toString(direction) + (" " + (Css_AtomicTypes.AnimationFillMode.toString(fillMode) + (" " + Css_AtomicTypes.AnimationPlayState.toString(playState))))))))))))
        };
}

function toString$3(param) {
  return param.VAL;
}

var Animation = {
  shorthand: shorthand$1,
  toString: toString$3
};

function animationValue(x) {
  return {
          TAG: /* D */0,
          _0: "animation",
          _1: x.VAL
        };
}

function animation(duration, delay, direction, timingFunction, fillMode, playState, iterationCount, name) {
  var x = shorthand$1(duration, delay, direction, timingFunction, fillMode, playState, iterationCount, name);
  return {
          TAG: /* D */0,
          _0: "animation",
          _1: x.VAL
        };
}

function animations(x) {
  return {
          TAG: /* D */0,
          _0: "animation",
          _1: join(Belt_Array.map(x, toString$3), ", ")
        };
}

function animationName(x) {
  return {
          TAG: /* D */0,
          _0: "animationName",
          _1: x
        };
}

function fill(x) {
  return {
          TAG: /* D */0,
          _0: "fill",
          _1: typeof x === "string" ? (
              x === "transparent" || x === "currentColor" ? Css_AtomicTypes.Color.toString(x) : Curry._1(Css_AtomicTypes.SVG.Fill.toString, x)
            ) : (
              x.NAME === "url" ? Css_AtomicTypes.Url.toString(x) : Css_AtomicTypes.Color.toString(x)
            )
        };
}

function fillOpacity(opacity) {
  return {
          TAG: /* D */0,
          _0: "fillOpacity",
          _1: opacity.toString()
        };
}

function fillRule(x) {
  return {
          TAG: /* D */0,
          _0: "fillRule",
          _1: x === "evenodd" ? "evenodd" : "nonzero"
        };
}

function stroke(x) {
  return {
          TAG: /* D */0,
          _0: "stroke",
          _1: Css_AtomicTypes.Color.toString(x)
        };
}

function strokeWidth(x) {
  return {
          TAG: /* D */0,
          _0: "strokeWidth",
          _1: Css_AtomicTypes.Length.toString(x)
        };
}

function strokeOpacity(opacity) {
  return {
          TAG: /* D */0,
          _0: "strokeOpacity",
          _1: opacity.toString()
        };
}

function strokeMiterlimit(x) {
  return {
          TAG: /* D */0,
          _0: "strokeMiterlimit",
          _1: x.toString()
        };
}

function strokeLinecap(x) {
  return {
          TAG: /* D */0,
          _0: "strokeLinecap",
          _1: x === "square" ? "square" : (
              x === "round" ? "round" : "butt"
            )
        };
}

function strokeLinejoin(x) {
  return {
          TAG: /* D */0,
          _0: "strokeLinejoin",
          _1: x === "miter" ? "miter" : (
              x === "bevel" ? "bevel" : "round"
            )
        };
}

function stopColor(x) {
  return {
          TAG: /* D */0,
          _0: "stopColor",
          _1: Css_AtomicTypes.Color.toString(x)
        };
}

function stopOpacity(x) {
  return {
          TAG: /* D */0,
          _0: "stopOpacity",
          _1: x.toString()
        };
}

var Types;

function Make(funarg) {
  var merge = function (stylenames) {
    return funarg.mergeStyles(stylenames);
  };
  var insertRule = function (rule) {
    return funarg.injectRaw(rule);
  };
  var style = function (rules) {
    return funarg.make(toJson(rules));
  };
  var $$global = function (selector, rules) {
    return funarg.injectRule(Js_dict.fromArray([[
                      selector,
                      toJson(rules)
                    ]]));
  };
  var keyframes = function (frames) {
    return funarg.makeKeyFrames(Belt_Array.reduceU(frames, {}, (function (dict, param) {
                      dict[param[0].toString() + "%"] = toJson(param[1]);
                      return dict;
                    })));
  };
  return {
          $$global: $$global,
          insertRule: insertRule,
          merge: merge,
          style: style,
          keyframes: keyframes
        };
}

var wordWrap = overflowWrap;

var auto = "auto";

var none = "none";

var text$1 = "text";

var fixed = "fixed";

var hidden = "hidden";

var visible = "visible";

var scroll = "scroll";

var local = "local";

var paddingBox = "paddingBox";

var borderBox = "borderBox";

var contentBox = "contentBox";

var noRepeat = "noRepeat";

var space = "space";

var repeat = "repeat";

var minmax = "minmax";

var repeatX = "repeatX";

var repeatY = "repeatY";

var contain = "contain";

var cover = "cover";

var row = "row";

var rowReverse = "rowReverse";

var column = "column";

var columnReverse = "columnReverse";

var wrap = "wrap";

var nowrap = "nowrap";

var wrapReverse = "wrapReverse";

var inline = "inline";

var block = "block";

var contents = "contents";

var flexBox = "flex";

var grid = "grid";

var inlineBlock = "inlineBlock";

var inlineFlex = "inlineFlex";

var inlineGrid = "inlineGrid";

var inlineTable = "inlineTable";

var listItem = "listItem";

var runIn = "runIn";

var table = "table";

var tableCaption = "tableCaption";

var tableColumnGroup = "tableColumnGroup";

var tableHeaderGroup = "tableHeaderGroup";

var tableFooterGroup = "tableFooterGroup";

var tableRowGroup = "tableRowGroup";

var tableCell = "tableCell";

var tableColumn = "tableColumn";

var tableRow = "tableRow";

var flexStart = "flexStart";

var flexEnd = "flexEnd";

var center = "center";

var stretch = "stretch";

var spaceBetween = "spaceBetween";

var spaceAround = "spaceAround";

var spaceEvenly = "spaceEvenly";

var baseline = "baseline";

var forwards = "forwards";

var backwards = "backwards";

var both = "both";

var infinite = "infinite";

var paused = "paused";

var running = "running";

var inside = "inside";

var outside = "outside";

var solid = "solid";

var dotted = "dotted";

var dashed = "dashed";

var underline = "underline";

var overline = "overline";

var lineThrough = "lineThrough";

var clip = "clip";

var ellipsis = "ellipsis";

var wavy = "wavy";

var $$double = "double";

var uppercase = "uppercase";

var lowercase = "lowercase";

var capitalize = "capitalize";

var sub = "sub";

var $$super = "super";

var textTop = "textTop";

var textBottom = "textBottom";

var middle = "middle";

var normal = "normal";

var breakAll = "breakAll";

var keepAll = "keepAll";

var breakWord = "breakWord";

var reverse = "reverse";

var alternate = "alternate";

var alternateReverse = "alternateReverse";

var fill$1 = "fill";

var content = "content";

var maxContent = "maxContent";

var minContent = "minContent";

var fitContent = "fitContent";

var all = "all";

var round = "round";

var miter = "miter";

var bevel = "bevel";

var butt = "butt";

var square = "square";

var transitions = transitionList;

var SVG = {
  fill: fill,
  fillRule: fillRule,
  fillOpacity: fillOpacity,
  stroke: stroke,
  strokeLinecap: strokeLinecap,
  strokeLinejoin: strokeLinejoin,
  strokeMiterlimit: strokeMiterlimit,
  strokeWidth: strokeWidth,
  strokeOpacity: strokeOpacity,
  stopColor: stopColor,
  stopOpacity: stopOpacity
};

exports.Types = Types;
exports.Make = Make;
exports.toJson = toJson;
exports.important = important;
exports.label = label;
exports.Shadow = Shadow;
exports.unsafe = unsafe;
exports.alignContent = alignContent;
exports.alignItems = alignItems;
exports.alignSelf = alignSelf;
exports.animationDelay = animationDelay;
exports.animationDirection = animationDirection;
exports.animationDuration = animationDuration;
exports.animationFillMode = animationFillMode;
exports.animationIterationCount = animationIterationCount;
exports.animationPlayState = animationPlayState;
exports.animationTimingFunction = animationTimingFunction;
exports.backdropFilter = backdropFilter;
exports.backfaceVisibility = backfaceVisibility;
exports.backgroundAttachment = backgroundAttachment;
exports.backgroundColor = backgroundColor;
exports.backgroundClip = backgroundClip;
exports.backgroundImage = backgroundImage;
exports.backgroundOrigin = backgroundOrigin;
exports.backgroundPosition = backgroundPosition;
exports.backgroundPositions = backgroundPositions;
exports.backgroundPosition4 = backgroundPosition4;
exports.backgroundRepeat = backgroundRepeat;
exports.borderBottom = borderBottom;
exports.borderBottomColor = borderBottomColor;
exports.borderBottomLeftRadius = borderBottomLeftRadius;
exports.borderBottomRightRadius = borderBottomRightRadius;
exports.borderBottomStyle = borderBottomStyle;
exports.borderBottomWidth = borderBottomWidth;
exports.borderCollapse = borderCollapse;
exports.borderColor = borderColor;
exports.borderLeft = borderLeft;
exports.borderLeftColor = borderLeftColor;
exports.borderLeftStyle = borderLeftStyle;
exports.borderLeftWidth = borderLeftWidth;
exports.borderRight = borderRight;
exports.borderRightColor = borderRightColor;
exports.borderRightStyle = borderRightStyle;
exports.borderRightWidth = borderRightWidth;
exports.borderRadius = borderRadius;
exports.borderSpacing = borderSpacing;
exports.borderStyle = borderStyle;
exports.borderTopColor = borderTopColor;
exports.borderTopLeftRadius = borderTopLeftRadius;
exports.borderTopRightRadius = borderTopRightRadius;
exports.borderTopStyle = borderTopStyle;
exports.borderTopWidth = borderTopWidth;
exports.borderWidth = borderWidth;
exports.bottom = bottom;
exports.boxSizing = boxSizing;
exports.boxShadow = boxShadow;
exports.boxShadows = boxShadows;
exports.clear = clear;
exports.clipPath = clipPath;
exports.color = color;
exports.columnCount = columnCount;
exports.contentRule = contentRule;
exports.contentRules = contentRules;
exports.counterIncrement = counterIncrement;
exports.countersIncrement = countersIncrement;
exports.counterReset = counterReset;
exports.countersReset = countersReset;
exports.counterSet = counterSet;
exports.countersSet = countersSet;
exports.cursor = cursor;
exports.direction = direction;
exports.display = display;
exports.flex = flex;
exports.flexBasis = flexBasis;
exports.flexDirection = flexDirection;
exports.flexGrow = flexGrow;
exports.flexShrink = flexShrink;
exports.flexWrap = flexWrap;
exports.$$float = $$float;
exports.fontFamily = fontFamily;
exports.fontFamilies = fontFamilies;
exports.fontSize = fontSize;
exports.fontStyle = fontStyle;
exports.fontVariant = fontVariant;
exports.fontWeight = fontWeight;
exports.gridArea = gridArea;
exports.gridArea2 = gridArea2;
exports.gridArea3 = gridArea3;
exports.gridArea4 = gridArea4;
exports.gridAutoFlow = gridAutoFlow;
exports.gridColumn = gridColumn;
exports.gridColumnEnd = gridColumnEnd;
exports.columnGap = columnGap;
exports.gridColumnGap = gridColumnGap;
exports.gridColumnStart = gridColumnStart;
exports.gridGap = gridGap;
exports.gridRow = gridRow;
exports.gridRowEnd = gridRowEnd;
exports.gridRowGap = gridRowGap;
exports.gridRowStart = gridRowStart;
exports.gridTemplateAreas = gridTemplateAreas;
exports.height = height;
exports.justifyContent = justifyContent;
exports.justifySelf = justifySelf;
exports.left = left;
exports.letterSpacing = letterSpacing;
exports.lineHeight = lineHeight;
exports.listStyle = listStyle;
exports.listStyleImage = listStyleImage;
exports.listStyleType = listStyleType;
exports.listStylePosition = listStylePosition;
exports.margin = margin;
exports.margin2 = margin2;
exports.margin3 = margin3;
exports.margin4 = margin4;
exports.marginLeft = marginLeft;
exports.marginRight = marginRight;
exports.marginTop = marginTop;
exports.marginBottom = marginBottom;
exports.maxHeight = maxHeight;
exports.maxWidth = maxWidth;
exports.minHeight = minHeight;
exports.minWidth = minWidth;
exports.objectFit = objectFit;
exports.objectPosition = objectPosition;
exports.opacity = opacity;
exports.order = order;
exports.outline = outline;
exports.outlineColor = outlineColor;
exports.outlineOffset = outlineOffset;
exports.outlineStyle = outlineStyle;
exports.outlineWidth = outlineWidth;
exports.overflow = overflow;
exports.overflowX = overflowX;
exports.overflowY = overflowY;
exports.overflowWrap = overflowWrap;
exports.padding = padding;
exports.padding2 = padding2;
exports.padding3 = padding3;
exports.padding4 = padding4;
exports.paddingLeft = paddingLeft;
exports.paddingRight = paddingRight;
exports.paddingTop = paddingTop;
exports.paddingBottom = paddingBottom;
exports.perspective = perspective;
exports.perspectiveOrigin = perspectiveOrigin;
exports.pointerEvents = pointerEvents;
exports.position = position;
exports.resize = resize;
exports.right = right;
exports.tableLayout = tableLayout;
exports.textAlign = textAlign;
exports.textDecorationColor = textDecorationColor;
exports.textDecorationLine = textDecorationLine;
exports.textDecorationStyle = textDecorationStyle;
exports.textIndent = textIndent;
exports.textOverflow = textOverflow;
exports.textShadow = textShadow;
exports.textShadows = textShadows;
exports.textTransform = textTransform;
exports.top = top;
exports.transform = transform;
exports.transforms = transforms;
exports.transformOrigin = transformOrigin;
exports.transformOrigin3d = transformOrigin3d;
exports.transitionDelay = transitionDelay;
exports.transitionDuration = transitionDuration;
exports.transitionProperty = transitionProperty;
exports.transformStyle = transformStyle;
exports.transitionTimingFunction = transitionTimingFunction;
exports.userSelect = userSelect;
exports.verticalAlign = verticalAlign;
exports.visibility = visibility;
exports.width = width;
exports.whiteSpace = whiteSpace;
exports.wordBreak = wordBreak;
exports.wordSpacing = wordSpacing;
exports.wordWrap = wordWrap;
exports.zIndex = zIndex;
exports.selector = selector;
exports.media = media;
exports.active = active;
exports.checked = checked;
exports.$$default = $$default;
exports.default = $$default;
exports.__esModule = true;
exports.defined = defined;
exports.disabled = disabled;
exports.empty = empty;
exports.enabled = enabled;
exports.first = first;
exports.firstChild = firstChild;
exports.firstOfType = firstOfType;
exports.focus = focus;
exports.focusWithin = focusWithin;
exports.host = host;
exports.hover = hover;
exports.indeterminate = indeterminate;
exports.inRange = inRange;
exports.invalid = invalid;
exports.lang = lang;
exports.lastChild = lastChild;
exports.lastOfType = lastOfType;
exports.link = link;
exports.not__ = not__;
exports.Nth = Nth;
exports.nthChild = nthChild;
exports.nthLastChild = nthLastChild;
exports.nthLastOfType = nthLastOfType;
exports.nthOfType = nthOfType;
exports.onlyChild = onlyChild;
exports.onlyOfType = onlyOfType;
exports.optional = optional;
exports.outOfRange = outOfRange;
exports.readOnly = readOnly;
exports.readWrite = readWrite;
exports.required = required;
exports.root = root;
exports.scope = scope;
exports.target = target;
exports.valid = valid;
exports.visited = visited;
exports.after = after;
exports.before = before;
exports.firstLetter = firstLetter;
exports.firstLine = firstLine;
exports.placeholder = placeholder;
exports.selection = selection;
exports.child = child;
exports.children = children;
exports.directSibling = directSibling;
exports.siblings = siblings;
exports.anyLink = anyLink;
exports.initial = initial;
exports.inherit_ = inherit_;
exports.unset = unset;
exports.$$var = $$var;
exports.varDefault = varDefault;
exports.auto = auto;
exports.none = none;
exports.text = text$1;
exports.pct = pct;
exports.ch = ch;
exports.cm = cm;
exports.em = em;
exports.ex = ex;
exports.mm = mm;
exports.pt = pt;
exports.px = px;
exports.pxFloat = pxFloat;
exports.rem = rem;
exports.vh = vh;
exports.vmin = vmin;
exports.vmax = vmax;
exports.zero = zero;
exports.deg = deg;
exports.rad = rad;
exports.grad = grad;
exports.turn = turn;
exports.ltr = ltr;
exports.rtl = rtl;
exports.absolute = absolute;
exports.relative = relative;
exports.$$static = $$static;
exports.fixed = fixed;
exports.sticky = sticky;
exports.horizontal = horizontal;
exports.vertical = vertical;
exports.smallCaps = smallCaps;
exports.italic = italic;
exports.oblique = oblique;
exports.hidden = hidden;
exports.visible = visible;
exports.scroll = scroll;
exports.rgb = rgb;
exports.rgba = rgba;
exports.hsl = hsl;
exports.hsla = hsla;
exports.hex = hex;
exports.transparent = transparent;
exports.currentColor = currentColor;
exports.local = local;
exports.paddingBox = paddingBox;
exports.borderBox = borderBox;
exports.contentBox = contentBox;
exports.noRepeat = noRepeat;
exports.space = space;
exports.repeat = repeat;
exports.minmax = minmax;
exports.repeatX = repeatX;
exports.repeatY = repeatY;
exports.contain = contain;
exports.cover = cover;
exports.row = row;
exports.rowReverse = rowReverse;
exports.column = column;
exports.columnReverse = columnReverse;
exports.wrap = wrap;
exports.nowrap = nowrap;
exports.wrapReverse = wrapReverse;
exports.inline = inline;
exports.block = block;
exports.contents = contents;
exports.flexBox = flexBox;
exports.grid = grid;
exports.inlineBlock = inlineBlock;
exports.inlineFlex = inlineFlex;
exports.inlineGrid = inlineGrid;
exports.inlineTable = inlineTable;
exports.listItem = listItem;
exports.runIn = runIn;
exports.table = table;
exports.tableCaption = tableCaption;
exports.tableColumnGroup = tableColumnGroup;
exports.tableHeaderGroup = tableHeaderGroup;
exports.tableFooterGroup = tableFooterGroup;
exports.tableRowGroup = tableRowGroup;
exports.tableCell = tableCell;
exports.tableColumn = tableColumn;
exports.tableRow = tableRow;
exports.flexStart = flexStart;
exports.flexEnd = flexEnd;
exports.center = center;
exports.stretch = stretch;
exports.spaceBetween = spaceBetween;
exports.spaceAround = spaceAround;
exports.spaceEvenly = spaceEvenly;
exports.baseline = baseline;
exports.forwards = forwards;
exports.backwards = backwards;
exports.both = both;
exports.infinite = infinite;
exports.count = count;
exports.paused = paused;
exports.running = running;
exports.inside = inside;
exports.outside = outside;
exports.solid = solid;
exports.dotted = dotted;
exports.dashed = dashed;
exports.underline = underline;
exports.overline = overline;
exports.lineThrough = lineThrough;
exports.clip = clip;
exports.ellipsis = ellipsis;
exports.wavy = wavy;
exports.$$double = $$double;
exports.uppercase = uppercase;
exports.lowercase = lowercase;
exports.capitalize = capitalize;
exports.sub = sub;
exports.$$super = $$super;
exports.textTop = textTop;
exports.textBottom = textBottom;
exports.middle = middle;
exports.normal = normal;
exports.breakAll = breakAll;
exports.keepAll = keepAll;
exports.breakWord = breakWord;
exports.reverse = reverse;
exports.alternate = alternate;
exports.alternateReverse = alternateReverse;
exports.fill = fill$1;
exports.content = content;
exports.maxContent = maxContent;
exports.minContent = minContent;
exports.fitContent = fitContent;
exports.all = all;
exports.round = round;
exports.miter = miter;
exports.bevel = bevel;
exports.butt = butt;
exports.square = square;
exports.thin = thin;
exports.extraLight = extraLight;
exports.light = light;
exports.medium = medium;
exports.semiBold = semiBold;
exports.bold = bold;
exports.extraBold = extraBold;
exports.lighter = lighter;
exports.bolder = bolder;
exports.fr = fr;
exports.vw = vw;
exports.localUrl = localUrl;
exports.url = url;
exports.linear = linear;
exports.ease = ease;
exports.easeIn = easeIn;
exports.easeOut = easeOut;
exports.easeInOut = easeInOut;
exports.stepStart = stepStart;
exports.stepEnd = stepEnd;
exports.steps = steps;
exports.cubicBezier = cubicBezier;
exports.marginBox = marginBox;
exports.fillBox = fillBox;
exports.strokeBox = strokeBox;
exports.viewBox = viewBox;
exports.translate = translate;
exports.translate3d = translate3d;
exports.translateX = translateX;
exports.translateY = translateY;
exports.translateZ = translateZ;
exports.scale = scale;
exports.scale3d = scale3d;
exports.scaleX = scaleX;
exports.scaleY = scaleY;
exports.scaleZ = scaleZ;
exports.rotate = rotate;
exports.rotate3d = rotate3d;
exports.rotateX = rotateX;
exports.rotateY = rotateY;
exports.rotateZ = rotateZ;
exports.skew = skew;
exports.skewX = skewX;
exports.skewY = skewY;
exports.linearGradient = linearGradient;
exports.repeatingLinearGradient = repeatingLinearGradient;
exports.radialGradient = radialGradient;
exports.repeatingRadialGradient = repeatingRadialGradient;
exports.areas = areas;
exports.ident = ident;
exports.numIdent = numIdent;
exports.contextMenu = contextMenu;
exports.help = help;
exports.pointer = pointer;
exports.progress = progress;
exports.wait = wait;
exports.cell = cell;
exports.crosshair = crosshair;
exports.verticalText = verticalText;
exports.alias = alias;
exports.copy = copy;
exports.move = move;
exports.noDrop = noDrop;
exports.notAllowed = notAllowed;
exports.grab = grab;
exports.grabbing = grabbing;
exports.allScroll = allScroll;
exports.colResize = colResize;
exports.rowResize = rowResize;
exports.nResize = nResize;
exports.eResize = eResize;
exports.sResize = sResize;
exports.wResize = wResize;
exports.neResize = neResize;
exports.nwResize = nwResize;
exports.seResize = seResize;
exports.swResize = swResize;
exports.ewResize = ewResize;
exports.nsResize = nsResize;
exports.neswResize = neswResize;
exports.nwseResize = nwseResize;
exports.zoomIn = zoomIn;
exports.zoomOut = zoomOut;
exports.flex3 = flex3;
exports.border = border;
exports.borderTop = borderTop;
exports.backgroundSize = backgroundSize;
exports.textDecoration = textDecoration;
exports.background = background;
exports.backgrounds = backgrounds;
exports.gridAutoColumns = gridAutoColumns;
exports.gridAutoRows = gridAutoRows;
exports.gridTemplateColumns = gridTemplateColumns;
exports.gridTemplateRows = gridTemplateRows;
exports.Calc = Calc;
exports.size = size;
exports.filter = filter;
exports.fontFace = fontFace;
exports.Transition = Transition;
exports.transitionValue = transitionValue;
exports.transitionList = transitionList;
exports.transition = transition;
exports.transitions = transitions;
exports.Animation = Animation;
exports.animationValue = animationValue;
exports.animation = animation;
exports.animations = animations;
exports.animationName = animationName;
exports.SVG = SVG;
/* No side effect */


/***/ }),

/***/ "./node_modules/bs-platform/lib/js/belt_Array.js":
/*!*******************************************************!*\
  !*** ./node_modules/bs-platform/lib/js/belt_Array.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Curry = __webpack_require__(/*! ./curry.js */ "./node_modules/bs-platform/lib/js/curry.js");
var Js_math = __webpack_require__(/*! ./js_math.js */ "./node_modules/bs-platform/lib/js/js_math.js");
var Caml_option = __webpack_require__(/*! ./caml_option.js */ "./node_modules/bs-platform/lib/js/caml_option.js");
var Caml_primitive = __webpack_require__(/*! ./caml_primitive.js */ "./node_modules/bs-platform/lib/js/caml_primitive.js");

function get(arr, i) {
  if (i >= 0 && i < arr.length) {
    return Caml_option.some(arr[i]);
  }
  
}

function getExn(arr, i) {
  if (!(i >= 0 && i < arr.length)) {
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "belt_Array.ml",
            27,
            4
          ],
          Error: new Error()
        };
  }
  return arr[i];
}

function set(arr, i, v) {
  if (i >= 0 && i < arr.length) {
    arr[i] = v;
    return true;
  } else {
    return false;
  }
}

function setExn(arr, i, v) {
  if (!(i >= 0 && i < arr.length)) {
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "belt_Array.ml",
            33,
            2
          ],
          Error: new Error()
        };
  }
  arr[i] = v;
  
}

function swapUnsafe(xs, i, j) {
  var tmp = xs[i];
  xs[i] = xs[j];
  xs[j] = tmp;
  
}

function shuffleInPlace(xs) {
  var len = xs.length;
  for(var i = 0; i < len; ++i){
    swapUnsafe(xs, i, Js_math.random_int(i, len));
  }
  
}

function shuffle(xs) {
  var result = xs.slice(0);
  shuffleInPlace(result);
  return result;
}

function reverseInPlace(xs) {
  var len = xs.length;
  var ofs = 0;
  for(var i = 0 ,i_finish = len / 2 | 0; i < i_finish; ++i){
    swapUnsafe(xs, ofs + i | 0, ((ofs + len | 0) - i | 0) - 1 | 0);
  }
  
}

function reverse(xs) {
  var len = xs.length;
  var result = new Array(len);
  for(var i = 0; i < len; ++i){
    result[i] = xs[(len - 1 | 0) - i | 0];
  }
  return result;
}

function make(l, f) {
  if (l <= 0) {
    return [];
  }
  var res = new Array(l);
  for(var i = 0; i < l; ++i){
    res[i] = f;
  }
  return res;
}

function makeByU(l, f) {
  if (l <= 0) {
    return [];
  }
  var res = new Array(l);
  for(var i = 0; i < l; ++i){
    res[i] = f(i);
  }
  return res;
}

function makeBy(l, f) {
  return makeByU(l, Curry.__1(f));
}

function makeByAndShuffleU(l, f) {
  var u = makeByU(l, f);
  shuffleInPlace(u);
  return u;
}

function makeByAndShuffle(l, f) {
  return makeByAndShuffleU(l, Curry.__1(f));
}

function range(start, finish) {
  var cut = finish - start | 0;
  if (cut < 0) {
    return [];
  }
  var arr = new Array(cut + 1 | 0);
  for(var i = 0; i <= cut; ++i){
    arr[i] = start + i | 0;
  }
  return arr;
}

function rangeBy(start, finish, step) {
  var cut = finish - start | 0;
  if (cut < 0 || step <= 0) {
    return [];
  }
  var nb = (cut / step | 0) + 1 | 0;
  var arr = new Array(nb);
  var cur = start;
  for(var i = 0; i < nb; ++i){
    arr[i] = cur;
    cur = cur + step | 0;
  }
  return arr;
}

function zip(xs, ys) {
  var lenx = xs.length;
  var leny = ys.length;
  var len = lenx < leny ? lenx : leny;
  var s = new Array(len);
  for(var i = 0; i < len; ++i){
    s[i] = [
      xs[i],
      ys[i]
    ];
  }
  return s;
}

function zipByU(xs, ys, f) {
  var lenx = xs.length;
  var leny = ys.length;
  var len = lenx < leny ? lenx : leny;
  var s = new Array(len);
  for(var i = 0; i < len; ++i){
    s[i] = f(xs[i], ys[i]);
  }
  return s;
}

function zipBy(xs, ys, f) {
  return zipByU(xs, ys, Curry.__2(f));
}

function concat(a1, a2) {
  var l1 = a1.length;
  var l2 = a2.length;
  var a1a2 = new Array(l1 + l2 | 0);
  for(var i = 0; i < l1; ++i){
    a1a2[i] = a1[i];
  }
  for(var i$1 = 0; i$1 < l2; ++i$1){
    a1a2[l1 + i$1 | 0] = a2[i$1];
  }
  return a1a2;
}

function concatMany(arrs) {
  var lenArrs = arrs.length;
  var totalLen = 0;
  for(var i = 0; i < lenArrs; ++i){
    totalLen = totalLen + arrs[i].length | 0;
  }
  var result = new Array(totalLen);
  totalLen = 0;
  for(var j = 0; j < lenArrs; ++j){
    var cur = arrs[j];
    for(var k = 0 ,k_finish = cur.length; k < k_finish; ++k){
      result[totalLen] = cur[k];
      totalLen = totalLen + 1 | 0;
    }
  }
  return result;
}

function slice(a, offset, len) {
  if (len <= 0) {
    return [];
  }
  var lena = a.length;
  var ofs = offset < 0 ? Caml_primitive.caml_int_max(lena + offset | 0, 0) : offset;
  var hasLen = lena - ofs | 0;
  var copyLength = hasLen < len ? hasLen : len;
  if (copyLength <= 0) {
    return [];
  }
  var result = new Array(copyLength);
  for(var i = 0; i < copyLength; ++i){
    result[i] = a[ofs + i | 0];
  }
  return result;
}

function sliceToEnd(a, offset) {
  var lena = a.length;
  var ofs = offset < 0 ? Caml_primitive.caml_int_max(lena + offset | 0, 0) : offset;
  var len = lena - ofs | 0;
  var result = new Array(len);
  for(var i = 0; i < len; ++i){
    result[i] = a[ofs + i | 0];
  }
  return result;
}

function fill(a, offset, len, v) {
  if (len <= 0) {
    return ;
  }
  var lena = a.length;
  var ofs = offset < 0 ? Caml_primitive.caml_int_max(lena + offset | 0, 0) : offset;
  var hasLen = lena - ofs | 0;
  var fillLength = hasLen < len ? hasLen : len;
  if (fillLength <= 0) {
    return ;
  }
  for(var i = ofs ,i_finish = ofs + fillLength | 0; i < i_finish; ++i){
    a[i] = v;
  }
  
}

function blitUnsafe(a1, srcofs1, a2, srcofs2, blitLength) {
  if (srcofs2 <= srcofs1) {
    for(var j = 0; j < blitLength; ++j){
      a2[j + srcofs2 | 0] = a1[j + srcofs1 | 0];
    }
    return ;
  }
  for(var j$1 = blitLength - 1 | 0; j$1 >= 0; --j$1){
    a2[j$1 + srcofs2 | 0] = a1[j$1 + srcofs1 | 0];
  }
  
}

function blit(a1, ofs1, a2, ofs2, len) {
  var lena1 = a1.length;
  var lena2 = a2.length;
  var srcofs1 = ofs1 < 0 ? Caml_primitive.caml_int_max(lena1 + ofs1 | 0, 0) : ofs1;
  var srcofs2 = ofs2 < 0 ? Caml_primitive.caml_int_max(lena2 + ofs2 | 0, 0) : ofs2;
  var blitLength = Caml_primitive.caml_int_min(len, Caml_primitive.caml_int_min(lena1 - srcofs1 | 0, lena2 - srcofs2 | 0));
  if (srcofs2 <= srcofs1) {
    for(var j = 0; j < blitLength; ++j){
      a2[j + srcofs2 | 0] = a1[j + srcofs1 | 0];
    }
    return ;
  }
  for(var j$1 = blitLength - 1 | 0; j$1 >= 0; --j$1){
    a2[j$1 + srcofs2 | 0] = a1[j$1 + srcofs1 | 0];
  }
  
}

function forEachU(a, f) {
  for(var i = 0 ,i_finish = a.length; i < i_finish; ++i){
    f(a[i]);
  }
  
}

function forEach(a, f) {
  return forEachU(a, Curry.__1(f));
}

function mapU(a, f) {
  var l = a.length;
  var r = new Array(l);
  for(var i = 0; i < l; ++i){
    r[i] = f(a[i]);
  }
  return r;
}

function map(a, f) {
  return mapU(a, Curry.__1(f));
}

function getByU(a, p) {
  var l = a.length;
  var i = 0;
  var r;
  while(r === undefined && i < l) {
    var v = a[i];
    if (p(v)) {
      r = Caml_option.some(v);
    }
    i = i + 1 | 0;
  };
  return r;
}

function getBy(a, p) {
  return getByU(a, Curry.__1(p));
}

function getIndexByU(a, p) {
  var l = a.length;
  var i = 0;
  var r;
  while(r === undefined && i < l) {
    var v = a[i];
    if (p(v)) {
      r = i;
    }
    i = i + 1 | 0;
  };
  return r;
}

function getIndexBy(a, p) {
  return getIndexByU(a, Curry.__1(p));
}

function keepU(a, f) {
  var l = a.length;
  var r = new Array(l);
  var j = 0;
  for(var i = 0; i < l; ++i){
    var v = a[i];
    if (f(v)) {
      r[j] = v;
      j = j + 1 | 0;
    }
    
  }
  r.length = j;
  return r;
}

function keep(a, f) {
  return keepU(a, Curry.__1(f));
}

function keepWithIndexU(a, f) {
  var l = a.length;
  var r = new Array(l);
  var j = 0;
  for(var i = 0; i < l; ++i){
    var v = a[i];
    if (f(v, i)) {
      r[j] = v;
      j = j + 1 | 0;
    }
    
  }
  r.length = j;
  return r;
}

function keepWithIndex(a, f) {
  return keepWithIndexU(a, Curry.__2(f));
}

function keepMapU(a, f) {
  var l = a.length;
  var r = new Array(l);
  var j = 0;
  for(var i = 0; i < l; ++i){
    var v = a[i];
    var v$1 = f(v);
    if (v$1 !== undefined) {
      r[j] = Caml_option.valFromOption(v$1);
      j = j + 1 | 0;
    }
    
  }
  r.length = j;
  return r;
}

function keepMap(a, f) {
  return keepMapU(a, Curry.__1(f));
}

function forEachWithIndexU(a, f) {
  for(var i = 0 ,i_finish = a.length; i < i_finish; ++i){
    f(i, a[i]);
  }
  
}

function forEachWithIndex(a, f) {
  return forEachWithIndexU(a, Curry.__2(f));
}

function mapWithIndexU(a, f) {
  var l = a.length;
  var r = new Array(l);
  for(var i = 0; i < l; ++i){
    r[i] = f(i, a[i]);
  }
  return r;
}

function mapWithIndex(a, f) {
  return mapWithIndexU(a, Curry.__2(f));
}

function reduceU(a, x, f) {
  var r = x;
  for(var i = 0 ,i_finish = a.length; i < i_finish; ++i){
    r = f(r, a[i]);
  }
  return r;
}

function reduce(a, x, f) {
  return reduceU(a, x, Curry.__2(f));
}

function reduceReverseU(a, x, f) {
  var r = x;
  for(var i = a.length - 1 | 0; i >= 0; --i){
    r = f(r, a[i]);
  }
  return r;
}

function reduceReverse(a, x, f) {
  return reduceReverseU(a, x, Curry.__2(f));
}

function reduceReverse2U(a, b, x, f) {
  var r = x;
  var len = Caml_primitive.caml_int_min(a.length, b.length);
  for(var i = len - 1 | 0; i >= 0; --i){
    r = f(r, a[i], b[i]);
  }
  return r;
}

function reduceReverse2(a, b, x, f) {
  return reduceReverse2U(a, b, x, Curry.__3(f));
}

function reduceWithIndexU(a, x, f) {
  var r = x;
  for(var i = 0 ,i_finish = a.length; i < i_finish; ++i){
    r = f(r, a[i], i);
  }
  return r;
}

function reduceWithIndex(a, x, f) {
  return reduceWithIndexU(a, x, Curry.__3(f));
}

function everyU(arr, b) {
  var len = arr.length;
  var _i = 0;
  while(true) {
    var i = _i;
    if (i === len) {
      return true;
    }
    if (!b(arr[i])) {
      return false;
    }
    _i = i + 1 | 0;
    continue ;
  };
}

function every(arr, f) {
  return everyU(arr, Curry.__1(f));
}

function someU(arr, b) {
  var len = arr.length;
  var _i = 0;
  while(true) {
    var i = _i;
    if (i === len) {
      return false;
    }
    if (b(arr[i])) {
      return true;
    }
    _i = i + 1 | 0;
    continue ;
  };
}

function some(arr, f) {
  return someU(arr, Curry.__1(f));
}

function everyAux2(arr1, arr2, _i, b, len) {
  while(true) {
    var i = _i;
    if (i === len) {
      return true;
    }
    if (!b(arr1[i], arr2[i])) {
      return false;
    }
    _i = i + 1 | 0;
    continue ;
  };
}

function every2U(a, b, p) {
  return everyAux2(a, b, 0, p, Caml_primitive.caml_int_min(a.length, b.length));
}

function every2(a, b, p) {
  return every2U(a, b, Curry.__2(p));
}

function some2U(a, b, p) {
  var _i = 0;
  var len = Caml_primitive.caml_int_min(a.length, b.length);
  while(true) {
    var i = _i;
    if (i === len) {
      return false;
    }
    if (p(a[i], b[i])) {
      return true;
    }
    _i = i + 1 | 0;
    continue ;
  };
}

function some2(a, b, p) {
  return some2U(a, b, Curry.__2(p));
}

function eqU(a, b, p) {
  var lena = a.length;
  var lenb = b.length;
  if (lena === lenb) {
    return everyAux2(a, b, 0, p, lena);
  } else {
    return false;
  }
}

function eq(a, b, p) {
  return eqU(a, b, Curry.__2(p));
}

function cmpU(a, b, p) {
  var lena = a.length;
  var lenb = b.length;
  if (lena > lenb) {
    return 1;
  } else if (lena < lenb) {
    return -1;
  } else {
    var _i = 0;
    while(true) {
      var i = _i;
      if (i === lena) {
        return 0;
      }
      var c = p(a[i], b[i]);
      if (c !== 0) {
        return c;
      }
      _i = i + 1 | 0;
      continue ;
    };
  }
}

function cmp(a, b, p) {
  return cmpU(a, b, Curry.__2(p));
}

function partitionU(a, f) {
  var l = a.length;
  var i = 0;
  var j = 0;
  var a1 = new Array(l);
  var a2 = new Array(l);
  for(var ii = 0; ii < l; ++ii){
    var v = a[ii];
    if (f(v)) {
      a1[i] = v;
      i = i + 1 | 0;
    } else {
      a2[j] = v;
      j = j + 1 | 0;
    }
  }
  a1.length = i;
  a2.length = j;
  return [
          a1,
          a2
        ];
}

function partition(a, f) {
  return partitionU(a, Curry.__1(f));
}

function unzip(a) {
  var l = a.length;
  var a1 = new Array(l);
  var a2 = new Array(l);
  for(var i = 0; i < l; ++i){
    var match = a[i];
    a1[i] = match[0];
    a2[i] = match[1];
  }
  return [
          a1,
          a2
        ];
}

exports.get = get;
exports.getExn = getExn;
exports.set = set;
exports.setExn = setExn;
exports.shuffleInPlace = shuffleInPlace;
exports.shuffle = shuffle;
exports.reverseInPlace = reverseInPlace;
exports.reverse = reverse;
exports.make = make;
exports.range = range;
exports.rangeBy = rangeBy;
exports.makeByU = makeByU;
exports.makeBy = makeBy;
exports.makeByAndShuffleU = makeByAndShuffleU;
exports.makeByAndShuffle = makeByAndShuffle;
exports.zip = zip;
exports.zipByU = zipByU;
exports.zipBy = zipBy;
exports.unzip = unzip;
exports.concat = concat;
exports.concatMany = concatMany;
exports.slice = slice;
exports.sliceToEnd = sliceToEnd;
exports.fill = fill;
exports.blit = blit;
exports.blitUnsafe = blitUnsafe;
exports.forEachU = forEachU;
exports.forEach = forEach;
exports.mapU = mapU;
exports.map = map;
exports.getByU = getByU;
exports.getBy = getBy;
exports.getIndexByU = getIndexByU;
exports.getIndexBy = getIndexBy;
exports.keepU = keepU;
exports.keep = keep;
exports.keepWithIndexU = keepWithIndexU;
exports.keepWithIndex = keepWithIndex;
exports.keepMapU = keepMapU;
exports.keepMap = keepMap;
exports.forEachWithIndexU = forEachWithIndexU;
exports.forEachWithIndex = forEachWithIndex;
exports.mapWithIndexU = mapWithIndexU;
exports.mapWithIndex = mapWithIndex;
exports.partitionU = partitionU;
exports.partition = partition;
exports.reduceU = reduceU;
exports.reduce = reduce;
exports.reduceReverseU = reduceReverseU;
exports.reduceReverse = reduceReverse;
exports.reduceReverse2U = reduceReverse2U;
exports.reduceReverse2 = reduceReverse2;
exports.reduceWithIndexU = reduceWithIndexU;
exports.reduceWithIndex = reduceWithIndex;
exports.someU = someU;
exports.some = some;
exports.everyU = everyU;
exports.every = every;
exports.every2U = every2U;
exports.every2 = every2;
exports.some2U = some2U;
exports.some2 = some2;
exports.cmpU = cmpU;
exports.cmp = cmp;
exports.eqU = eqU;
exports.eq = eq;
/* No side effect */


/***/ }),

/***/ "./node_modules/bs-platform/lib/js/belt_Int.js":
/*!*****************************************************!*\
  !*** ./node_modules/bs-platform/lib/js/belt_Int.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";



function fromString(i) {
  var i$1 = parseInt(i, 10);
  if (isNaN(i$1)) {
    return ;
  } else {
    return i$1;
  }
}

exports.fromString = fromString;
/* No side effect */


/***/ }),

/***/ "./node_modules/bs-platform/lib/js/belt_List.js":
/*!******************************************************!*\
  !*** ./node_modules/bs-platform/lib/js/belt_List.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Curry = __webpack_require__(/*! ./curry.js */ "./node_modules/bs-platform/lib/js/curry.js");
var Belt_Array = __webpack_require__(/*! ./belt_Array.js */ "./node_modules/bs-platform/lib/js/belt_Array.js");
var Caml_option = __webpack_require__(/*! ./caml_option.js */ "./node_modules/bs-platform/lib/js/caml_option.js");
var Belt_SortArray = __webpack_require__(/*! ./belt_SortArray.js */ "./node_modules/bs-platform/lib/js/belt_SortArray.js");

function head(x) {
  if (x) {
    return Caml_option.some(x.hd);
  }
  
}

function headExn(x) {
  if (x) {
    return x.hd;
  }
  throw {
        RE_EXN_ID: "Not_found",
        Error: new Error()
      };
}

function tail(x) {
  if (x) {
    return x.tl;
  }
  
}

function tailExn(x) {
  if (x) {
    return x.tl;
  }
  throw {
        RE_EXN_ID: "Not_found",
        Error: new Error()
      };
}

function add(xs, x) {
  return {
          hd: x,
          tl: xs
        };
}

function get(x, n) {
  if (n < 0) {
    return ;
  } else {
    var _x = x;
    var _n = n;
    while(true) {
      var n$1 = _n;
      var x$1 = _x;
      if (!x$1) {
        return ;
      }
      if (n$1 === 0) {
        return Caml_option.some(x$1.hd);
      }
      _n = n$1 - 1 | 0;
      _x = x$1.tl;
      continue ;
    };
  }
}

function getExn(x, n) {
  if (n < 0) {
    throw {
          RE_EXN_ID: "Not_found",
          Error: new Error()
        };
  }
  var _x = x;
  var _n = n;
  while(true) {
    var n$1 = _n;
    var x$1 = _x;
    if (x$1) {
      if (n$1 === 0) {
        return x$1.hd;
      }
      _n = n$1 - 1 | 0;
      _x = x$1.tl;
      continue ;
    }
    throw {
          RE_EXN_ID: "Not_found",
          Error: new Error()
        };
  };
}

function partitionAux(p, _cell, _precX, _precY) {
  while(true) {
    var precY = _precY;
    var precX = _precX;
    var cell = _cell;
    if (!cell) {
      return ;
    }
    var t = cell.tl;
    var h = cell.hd;
    var next = {
      hd: h,
      tl: /* [] */0
    };
    if (p(h)) {
      precX.tl = next;
      _precX = next;
      _cell = t;
      continue ;
    }
    precY.tl = next;
    _precY = next;
    _cell = t;
    continue ;
  };
}

function splitAux(_cell, _precX, _precY) {
  while(true) {
    var precY = _precY;
    var precX = _precX;
    var cell = _cell;
    if (!cell) {
      return ;
    }
    var match = cell.hd;
    var nextA = {
      hd: match[0],
      tl: /* [] */0
    };
    var nextB = {
      hd: match[1],
      tl: /* [] */0
    };
    precX.tl = nextA;
    precY.tl = nextB;
    _precY = nextB;
    _precX = nextA;
    _cell = cell.tl;
    continue ;
  };
}

function copyAuxCont(_cellX, _prec) {
  while(true) {
    var prec = _prec;
    var cellX = _cellX;
    if (!cellX) {
      return prec;
    }
    var next = {
      hd: cellX.hd,
      tl: /* [] */0
    };
    prec.tl = next;
    _prec = next;
    _cellX = cellX.tl;
    continue ;
  };
}

function copyAuxWitFilter(f, _cellX, _prec) {
  while(true) {
    var prec = _prec;
    var cellX = _cellX;
    if (!cellX) {
      return ;
    }
    var t = cellX.tl;
    var h = cellX.hd;
    if (f(h)) {
      var next = {
        hd: h,
        tl: /* [] */0
      };
      prec.tl = next;
      _prec = next;
      _cellX = t;
      continue ;
    }
    _cellX = t;
    continue ;
  };
}

function copyAuxWithFilterIndex(f, _cellX, _prec, _i) {
  while(true) {
    var i = _i;
    var prec = _prec;
    var cellX = _cellX;
    if (!cellX) {
      return ;
    }
    var t = cellX.tl;
    var h = cellX.hd;
    if (f(h, i)) {
      var next = {
        hd: h,
        tl: /* [] */0
      };
      prec.tl = next;
      _i = i + 1 | 0;
      _prec = next;
      _cellX = t;
      continue ;
    }
    _i = i + 1 | 0;
    _cellX = t;
    continue ;
  };
}

function copyAuxWitFilterMap(f, _cellX, _prec) {
  while(true) {
    var prec = _prec;
    var cellX = _cellX;
    if (!cellX) {
      return ;
    }
    var t = cellX.tl;
    var h = f(cellX.hd);
    if (h !== undefined) {
      var next = {
        hd: Caml_option.valFromOption(h),
        tl: /* [] */0
      };
      prec.tl = next;
      _prec = next;
      _cellX = t;
      continue ;
    }
    _cellX = t;
    continue ;
  };
}

function removeAssocAuxWithMap(_cellX, x, _prec, f) {
  while(true) {
    var prec = _prec;
    var cellX = _cellX;
    if (!cellX) {
      return false;
    }
    var t = cellX.tl;
    var h = cellX.hd;
    if (f(h[0], x)) {
      prec.tl = t;
      return true;
    }
    var next = {
      hd: h,
      tl: /* [] */0
    };
    prec.tl = next;
    _prec = next;
    _cellX = t;
    continue ;
  };
}

function setAssocAuxWithMap(_cellX, x, k, _prec, eq) {
  while(true) {
    var prec = _prec;
    var cellX = _cellX;
    if (!cellX) {
      return false;
    }
    var t = cellX.tl;
    var h = cellX.hd;
    if (eq(h[0], x)) {
      prec.tl = {
        hd: [
          x,
          k
        ],
        tl: t
      };
      return true;
    }
    var next = {
      hd: h,
      tl: /* [] */0
    };
    prec.tl = next;
    _prec = next;
    _cellX = t;
    continue ;
  };
}

function copyAuxWithMap(_cellX, _prec, f) {
  while(true) {
    var prec = _prec;
    var cellX = _cellX;
    if (!cellX) {
      return ;
    }
    var next = {
      hd: f(cellX.hd),
      tl: /* [] */0
    };
    prec.tl = next;
    _prec = next;
    _cellX = cellX.tl;
    continue ;
  };
}

function zipAux(_cellX, _cellY, _prec) {
  while(true) {
    var prec = _prec;
    var cellY = _cellY;
    var cellX = _cellX;
    if (!cellX) {
      return ;
    }
    if (!cellY) {
      return ;
    }
    var next = {
      hd: [
        cellX.hd,
        cellY.hd
      ],
      tl: /* [] */0
    };
    prec.tl = next;
    _prec = next;
    _cellY = cellY.tl;
    _cellX = cellX.tl;
    continue ;
  };
}

function copyAuxWithMap2(f, _cellX, _cellY, _prec) {
  while(true) {
    var prec = _prec;
    var cellY = _cellY;
    var cellX = _cellX;
    if (!cellX) {
      return ;
    }
    if (!cellY) {
      return ;
    }
    var next = {
      hd: f(cellX.hd, cellY.hd),
      tl: /* [] */0
    };
    prec.tl = next;
    _prec = next;
    _cellY = cellY.tl;
    _cellX = cellX.tl;
    continue ;
  };
}

function copyAuxWithMapI(f, _i, _cellX, _prec) {
  while(true) {
    var prec = _prec;
    var cellX = _cellX;
    var i = _i;
    if (!cellX) {
      return ;
    }
    var next = {
      hd: f(i, cellX.hd),
      tl: /* [] */0
    };
    prec.tl = next;
    _prec = next;
    _cellX = cellX.tl;
    _i = i + 1 | 0;
    continue ;
  };
}

function takeAux(_n, _cell, _prec) {
  while(true) {
    var prec = _prec;
    var cell = _cell;
    var n = _n;
    if (n === 0) {
      return true;
    }
    if (!cell) {
      return false;
    }
    var cell$1 = {
      hd: cell.hd,
      tl: /* [] */0
    };
    prec.tl = cell$1;
    _prec = cell$1;
    _cell = cell.tl;
    _n = n - 1 | 0;
    continue ;
  };
}

function splitAtAux(_n, _cell, _prec) {
  while(true) {
    var prec = _prec;
    var cell = _cell;
    var n = _n;
    if (n === 0) {
      return cell;
    }
    if (!cell) {
      return ;
    }
    var cell$1 = {
      hd: cell.hd,
      tl: /* [] */0
    };
    prec.tl = cell$1;
    _prec = cell$1;
    _cell = cell.tl;
    _n = n - 1 | 0;
    continue ;
  };
}

function take(lst, n) {
  if (n < 0) {
    return ;
  }
  if (n === 0) {
    return /* [] */0;
  }
  if (!lst) {
    return ;
  }
  var cell = {
    hd: lst.hd,
    tl: /* [] */0
  };
  var has = takeAux(n - 1 | 0, lst.tl, cell);
  if (has) {
    return cell;
  }
  
}

function drop(lst, n) {
  if (n < 0) {
    return ;
  } else {
    var _l = lst;
    var _n = n;
    while(true) {
      var n$1 = _n;
      var l = _l;
      if (n$1 === 0) {
        return l;
      }
      if (!l) {
        return ;
      }
      _n = n$1 - 1 | 0;
      _l = l.tl;
      continue ;
    };
  }
}

function splitAt(lst, n) {
  if (n < 0) {
    return ;
  }
  if (n === 0) {
    return [
            /* [] */0,
            lst
          ];
  }
  if (!lst) {
    return ;
  }
  var cell = {
    hd: lst.hd,
    tl: /* [] */0
  };
  var rest = splitAtAux(n - 1 | 0, lst.tl, cell);
  if (rest !== undefined) {
    return [
            cell,
            rest
          ];
  }
  
}

function concat(xs, ys) {
  if (!xs) {
    return ys;
  }
  var cell = {
    hd: xs.hd,
    tl: /* [] */0
  };
  copyAuxCont(xs.tl, cell).tl = ys;
  return cell;
}

function mapU(xs, f) {
  if (!xs) {
    return /* [] */0;
  }
  var cell = {
    hd: f(xs.hd),
    tl: /* [] */0
  };
  copyAuxWithMap(xs.tl, cell, f);
  return cell;
}

function map(xs, f) {
  return mapU(xs, Curry.__1(f));
}

function zipByU(l1, l2, f) {
  if (!l1) {
    return /* [] */0;
  }
  if (!l2) {
    return /* [] */0;
  }
  var cell = {
    hd: f(l1.hd, l2.hd),
    tl: /* [] */0
  };
  copyAuxWithMap2(f, l1.tl, l2.tl, cell);
  return cell;
}

function zipBy(l1, l2, f) {
  return zipByU(l1, l2, Curry.__2(f));
}

function mapWithIndexU(xs, f) {
  if (!xs) {
    return /* [] */0;
  }
  var cell = {
    hd: f(0, xs.hd),
    tl: /* [] */0
  };
  copyAuxWithMapI(f, 1, xs.tl, cell);
  return cell;
}

function mapWithIndex(xs, f) {
  return mapWithIndexU(xs, Curry.__2(f));
}

function makeByU(n, f) {
  if (n <= 0) {
    return /* [] */0;
  }
  var headX = {
    hd: f(0),
    tl: /* [] */0
  };
  var cur = headX;
  var i = 1;
  while(i < n) {
    var v = {
      hd: f(i),
      tl: /* [] */0
    };
    cur.tl = v;
    cur = v;
    i = i + 1 | 0;
  };
  return headX;
}

function makeBy(n, f) {
  return makeByU(n, Curry.__1(f));
}

function make(n, v) {
  if (n <= 0) {
    return /* [] */0;
  }
  var headX = {
    hd: v,
    tl: /* [] */0
  };
  var cur = headX;
  var i = 1;
  while(i < n) {
    var v$1 = {
      hd: v,
      tl: /* [] */0
    };
    cur.tl = v$1;
    cur = v$1;
    i = i + 1 | 0;
  };
  return headX;
}

function length(xs) {
  var _x = xs;
  var _acc = 0;
  while(true) {
    var acc = _acc;
    var x = _x;
    if (!x) {
      return acc;
    }
    _acc = acc + 1 | 0;
    _x = x.tl;
    continue ;
  };
}

function fillAux(arr, _i, _x) {
  while(true) {
    var x = _x;
    var i = _i;
    if (!x) {
      return ;
    }
    arr[i] = x.hd;
    _x = x.tl;
    _i = i + 1 | 0;
    continue ;
  };
}

function fromArray(a) {
  var _i = a.length - 1 | 0;
  var _res = /* [] */0;
  while(true) {
    var res = _res;
    var i = _i;
    if (i < 0) {
      return res;
    }
    _res = {
      hd: a[i],
      tl: res
    };
    _i = i - 1 | 0;
    continue ;
  };
}

function toArray(x) {
  var len = length(x);
  var arr = new Array(len);
  fillAux(arr, 0, x);
  return arr;
}

function shuffle(xs) {
  var v = toArray(xs);
  Belt_Array.shuffleInPlace(v);
  return fromArray(v);
}

function reverseConcat(_l1, _l2) {
  while(true) {
    var l2 = _l2;
    var l1 = _l1;
    if (!l1) {
      return l2;
    }
    _l2 = {
      hd: l1.hd,
      tl: l2
    };
    _l1 = l1.tl;
    continue ;
  };
}

function reverse(l) {
  return reverseConcat(l, /* [] */0);
}

function flattenAux(_prec, _xs) {
  while(true) {
    var xs = _xs;
    var prec = _prec;
    if (xs) {
      _xs = xs.tl;
      _prec = copyAuxCont(xs.hd, prec);
      continue ;
    }
    prec.tl = /* [] */0;
    return ;
  };
}

function flatten(_xs) {
  while(true) {
    var xs = _xs;
    if (!xs) {
      return /* [] */0;
    }
    var match = xs.hd;
    if (match) {
      var cell = {
        hd: match.hd,
        tl: /* [] */0
      };
      flattenAux(copyAuxCont(match.tl, cell), xs.tl);
      return cell;
    }
    _xs = xs.tl;
    continue ;
  };
}

function concatMany(xs) {
  var len = xs.length;
  if (len === 1) {
    return xs[0];
  }
  if (len === 0) {
    return /* [] */0;
  }
  var len$1 = xs.length;
  var v = xs[len$1 - 1 | 0];
  for(var i = len$1 - 2 | 0; i >= 0; --i){
    v = concat(xs[i], v);
  }
  return v;
}

function mapReverseU(l, f) {
  var _accu = /* [] */0;
  var _xs = l;
  while(true) {
    var xs = _xs;
    var accu = _accu;
    if (!xs) {
      return accu;
    }
    _xs = xs.tl;
    _accu = {
      hd: f(xs.hd),
      tl: accu
    };
    continue ;
  };
}

function mapReverse(l, f) {
  return mapReverseU(l, Curry.__1(f));
}

function forEachU(_xs, f) {
  while(true) {
    var xs = _xs;
    if (!xs) {
      return ;
    }
    f(xs.hd);
    _xs = xs.tl;
    continue ;
  };
}

function forEach(xs, f) {
  return forEachU(xs, Curry.__1(f));
}

function forEachWithIndexU(l, f) {
  var _xs = l;
  var _i = 0;
  while(true) {
    var i = _i;
    var xs = _xs;
    if (!xs) {
      return ;
    }
    f(i, xs.hd);
    _i = i + 1 | 0;
    _xs = xs.tl;
    continue ;
  };
}

function forEachWithIndex(l, f) {
  return forEachWithIndexU(l, Curry.__2(f));
}

function reduceU(_l, _accu, f) {
  while(true) {
    var accu = _accu;
    var l = _l;
    if (!l) {
      return accu;
    }
    _accu = f(accu, l.hd);
    _l = l.tl;
    continue ;
  };
}

function reduce(l, accu, f) {
  return reduceU(l, accu, Curry.__2(f));
}

function reduceReverseUnsafeU(l, accu, f) {
  if (l) {
    return f(reduceReverseUnsafeU(l.tl, accu, f), l.hd);
  } else {
    return accu;
  }
}

function reduceReverseU(l, acc, f) {
  var len = length(l);
  if (len < 1000) {
    return reduceReverseUnsafeU(l, acc, f);
  } else {
    return Belt_Array.reduceReverseU(toArray(l), acc, f);
  }
}

function reduceReverse(l, accu, f) {
  return reduceReverseU(l, accu, Curry.__2(f));
}

function reduceWithIndexU(l, acc, f) {
  var _l = l;
  var _acc = acc;
  var _i = 0;
  while(true) {
    var i = _i;
    var acc$1 = _acc;
    var l$1 = _l;
    if (!l$1) {
      return acc$1;
    }
    _i = i + 1 | 0;
    _acc = f(acc$1, l$1.hd, i);
    _l = l$1.tl;
    continue ;
  };
}

function reduceWithIndex(l, acc, f) {
  return reduceWithIndexU(l, acc, Curry.__3(f));
}

function mapReverse2U(l1, l2, f) {
  var _l1 = l1;
  var _l2 = l2;
  var _accu = /* [] */0;
  while(true) {
    var accu = _accu;
    var l2$1 = _l2;
    var l1$1 = _l1;
    if (!l1$1) {
      return accu;
    }
    if (!l2$1) {
      return accu;
    }
    _accu = {
      hd: f(l1$1.hd, l2$1.hd),
      tl: accu
    };
    _l2 = l2$1.tl;
    _l1 = l1$1.tl;
    continue ;
  };
}

function mapReverse2(l1, l2, f) {
  return mapReverse2U(l1, l2, Curry.__2(f));
}

function forEach2U(_l1, _l2, f) {
  while(true) {
    var l2 = _l2;
    var l1 = _l1;
    if (!l1) {
      return ;
    }
    if (!l2) {
      return ;
    }
    f(l1.hd, l2.hd);
    _l2 = l2.tl;
    _l1 = l1.tl;
    continue ;
  };
}

function forEach2(l1, l2, f) {
  return forEach2U(l1, l2, Curry.__2(f));
}

function reduce2U(_l1, _l2, _accu, f) {
  while(true) {
    var accu = _accu;
    var l2 = _l2;
    var l1 = _l1;
    if (!l1) {
      return accu;
    }
    if (!l2) {
      return accu;
    }
    _accu = f(accu, l1.hd, l2.hd);
    _l2 = l2.tl;
    _l1 = l1.tl;
    continue ;
  };
}

function reduce2(l1, l2, acc, f) {
  return reduce2U(l1, l2, acc, Curry.__3(f));
}

function reduceReverse2UnsafeU(l1, l2, accu, f) {
  if (l1 && l2) {
    return f(reduceReverse2UnsafeU(l1.tl, l2.tl, accu, f), l1.hd, l2.hd);
  } else {
    return accu;
  }
}

function reduceReverse2U(l1, l2, acc, f) {
  var len = length(l1);
  if (len < 1000) {
    return reduceReverse2UnsafeU(l1, l2, acc, f);
  } else {
    return Belt_Array.reduceReverse2U(toArray(l1), toArray(l2), acc, f);
  }
}

function reduceReverse2(l1, l2, acc, f) {
  return reduceReverse2U(l1, l2, acc, Curry.__3(f));
}

function everyU(_xs, p) {
  while(true) {
    var xs = _xs;
    if (!xs) {
      return true;
    }
    if (!p(xs.hd)) {
      return false;
    }
    _xs = xs.tl;
    continue ;
  };
}

function every(xs, p) {
  return everyU(xs, Curry.__1(p));
}

function someU(_xs, p) {
  while(true) {
    var xs = _xs;
    if (!xs) {
      return false;
    }
    if (p(xs.hd)) {
      return true;
    }
    _xs = xs.tl;
    continue ;
  };
}

function some(xs, p) {
  return someU(xs, Curry.__1(p));
}

function every2U(_l1, _l2, p) {
  while(true) {
    var l2 = _l2;
    var l1 = _l1;
    if (!l1) {
      return true;
    }
    if (!l2) {
      return true;
    }
    if (!p(l1.hd, l2.hd)) {
      return false;
    }
    _l2 = l2.tl;
    _l1 = l1.tl;
    continue ;
  };
}

function every2(l1, l2, p) {
  return every2U(l1, l2, Curry.__2(p));
}

function cmpByLength(_l1, _l2) {
  while(true) {
    var l2 = _l2;
    var l1 = _l1;
    if (!l1) {
      if (l2) {
        return -1;
      } else {
        return 0;
      }
    }
    if (!l2) {
      return 1;
    }
    _l2 = l2.tl;
    _l1 = l1.tl;
    continue ;
  };
}

function cmpU(_l1, _l2, p) {
  while(true) {
    var l2 = _l2;
    var l1 = _l1;
    if (!l1) {
      if (l2) {
        return -1;
      } else {
        return 0;
      }
    }
    if (!l2) {
      return 1;
    }
    var c = p(l1.hd, l2.hd);
    if (c !== 0) {
      return c;
    }
    _l2 = l2.tl;
    _l1 = l1.tl;
    continue ;
  };
}

function cmp(l1, l2, f) {
  return cmpU(l1, l2, Curry.__2(f));
}

function eqU(_l1, _l2, p) {
  while(true) {
    var l2 = _l2;
    var l1 = _l1;
    if (!l1) {
      if (l2) {
        return false;
      } else {
        return true;
      }
    }
    if (!l2) {
      return false;
    }
    if (!p(l1.hd, l2.hd)) {
      return false;
    }
    _l2 = l2.tl;
    _l1 = l1.tl;
    continue ;
  };
}

function eq(l1, l2, f) {
  return eqU(l1, l2, Curry.__2(f));
}

function some2U(_l1, _l2, p) {
  while(true) {
    var l2 = _l2;
    var l1 = _l1;
    if (!l1) {
      return false;
    }
    if (!l2) {
      return false;
    }
    if (p(l1.hd, l2.hd)) {
      return true;
    }
    _l2 = l2.tl;
    _l1 = l1.tl;
    continue ;
  };
}

function some2(l1, l2, p) {
  return some2U(l1, l2, Curry.__2(p));
}

function hasU(_xs, x, eq) {
  while(true) {
    var xs = _xs;
    if (!xs) {
      return false;
    }
    if (eq(xs.hd, x)) {
      return true;
    }
    _xs = xs.tl;
    continue ;
  };
}

function has(xs, x, eq) {
  return hasU(xs, x, Curry.__2(eq));
}

function getAssocU(_xs, x, eq) {
  while(true) {
    var xs = _xs;
    if (!xs) {
      return ;
    }
    var match = xs.hd;
    if (eq(match[0], x)) {
      return Caml_option.some(match[1]);
    }
    _xs = xs.tl;
    continue ;
  };
}

function getAssoc(xs, x, eq) {
  return getAssocU(xs, x, Curry.__2(eq));
}

function hasAssocU(_xs, x, eq) {
  while(true) {
    var xs = _xs;
    if (!xs) {
      return false;
    }
    if (eq(xs.hd[0], x)) {
      return true;
    }
    _xs = xs.tl;
    continue ;
  };
}

function hasAssoc(xs, x, eq) {
  return hasAssocU(xs, x, Curry.__2(eq));
}

function removeAssocU(xs, x, eq) {
  if (!xs) {
    return /* [] */0;
  }
  var l = xs.tl;
  var pair = xs.hd;
  if (eq(pair[0], x)) {
    return l;
  }
  var cell = {
    hd: pair,
    tl: /* [] */0
  };
  var removed = removeAssocAuxWithMap(l, x, cell, eq);
  if (removed) {
    return cell;
  } else {
    return xs;
  }
}

function removeAssoc(xs, x, eq) {
  return removeAssocU(xs, x, Curry.__2(eq));
}

function setAssocU(xs, x, k, eq) {
  if (!xs) {
    return {
            hd: [
              x,
              k
            ],
            tl: /* [] */0
          };
  }
  var l = xs.tl;
  var pair = xs.hd;
  if (eq(pair[0], x)) {
    return {
            hd: [
              x,
              k
            ],
            tl: l
          };
  }
  var cell = {
    hd: pair,
    tl: /* [] */0
  };
  var replaced = setAssocAuxWithMap(l, x, k, cell, eq);
  if (replaced) {
    return cell;
  } else {
    return {
            hd: [
              x,
              k
            ],
            tl: xs
          };
  }
}

function setAssoc(xs, x, k, eq) {
  return setAssocU(xs, x, k, Curry.__2(eq));
}

function sortU(xs, cmp) {
  var arr = toArray(xs);
  Belt_SortArray.stableSortInPlaceByU(arr, cmp);
  return fromArray(arr);
}

function sort(xs, cmp) {
  return sortU(xs, Curry.__2(cmp));
}

function getByU(_xs, p) {
  while(true) {
    var xs = _xs;
    if (!xs) {
      return ;
    }
    var x = xs.hd;
    if (p(x)) {
      return Caml_option.some(x);
    }
    _xs = xs.tl;
    continue ;
  };
}

function getBy(xs, p) {
  return getByU(xs, Curry.__1(p));
}

function keepU(_xs, p) {
  while(true) {
    var xs = _xs;
    if (!xs) {
      return /* [] */0;
    }
    var t = xs.tl;
    var h = xs.hd;
    if (p(h)) {
      var cell = {
        hd: h,
        tl: /* [] */0
      };
      copyAuxWitFilter(p, t, cell);
      return cell;
    }
    _xs = t;
    continue ;
  };
}

function keep(xs, p) {
  return keepU(xs, Curry.__1(p));
}

function keepWithIndexU(xs, p) {
  var _xs = xs;
  var _i = 0;
  while(true) {
    var i = _i;
    var xs$1 = _xs;
    if (!xs$1) {
      return /* [] */0;
    }
    var t = xs$1.tl;
    var h = xs$1.hd;
    if (p(h, i)) {
      var cell = {
        hd: h,
        tl: /* [] */0
      };
      copyAuxWithFilterIndex(p, t, cell, i + 1 | 0);
      return cell;
    }
    _i = i + 1 | 0;
    _xs = t;
    continue ;
  };
}

function keepWithIndex(xs, p) {
  return keepWithIndexU(xs, Curry.__2(p));
}

function keepMapU(_xs, p) {
  while(true) {
    var xs = _xs;
    if (!xs) {
      return /* [] */0;
    }
    var t = xs.tl;
    var h = p(xs.hd);
    if (h !== undefined) {
      var cell = {
        hd: Caml_option.valFromOption(h),
        tl: /* [] */0
      };
      copyAuxWitFilterMap(p, t, cell);
      return cell;
    }
    _xs = t;
    continue ;
  };
}

function keepMap(xs, p) {
  return keepMapU(xs, Curry.__1(p));
}

function partitionU(l, p) {
  if (!l) {
    return [
            /* [] */0,
            /* [] */0
          ];
  }
  var h = l.hd;
  var nextX = {
    hd: h,
    tl: /* [] */0
  };
  var nextY = {
    hd: h,
    tl: /* [] */0
  };
  var b = p(h);
  partitionAux(p, l.tl, nextX, nextY);
  if (b) {
    return [
            nextX,
            nextY.tl
          ];
  } else {
    return [
            nextX.tl,
            nextY
          ];
  }
}

function partition(l, p) {
  return partitionU(l, Curry.__1(p));
}

function unzip(xs) {
  if (!xs) {
    return [
            /* [] */0,
            /* [] */0
          ];
  }
  var match = xs.hd;
  var cellX = {
    hd: match[0],
    tl: /* [] */0
  };
  var cellY = {
    hd: match[1],
    tl: /* [] */0
  };
  splitAux(xs.tl, cellX, cellY);
  return [
          cellX,
          cellY
        ];
}

function zip(l1, l2) {
  if (!l1) {
    return /* [] */0;
  }
  if (!l2) {
    return /* [] */0;
  }
  var cell = {
    hd: [
      l1.hd,
      l2.hd
    ],
    tl: /* [] */0
  };
  zipAux(l1.tl, l2.tl, cell);
  return cell;
}

var size = length;

var filter = keep;

var filterWithIndex = keepWithIndex;

exports.length = length;
exports.size = size;
exports.head = head;
exports.headExn = headExn;
exports.tail = tail;
exports.tailExn = tailExn;
exports.add = add;
exports.get = get;
exports.getExn = getExn;
exports.make = make;
exports.makeByU = makeByU;
exports.makeBy = makeBy;
exports.shuffle = shuffle;
exports.drop = drop;
exports.take = take;
exports.splitAt = splitAt;
exports.concat = concat;
exports.concatMany = concatMany;
exports.reverseConcat = reverseConcat;
exports.flatten = flatten;
exports.mapU = mapU;
exports.map = map;
exports.zip = zip;
exports.zipByU = zipByU;
exports.zipBy = zipBy;
exports.mapWithIndexU = mapWithIndexU;
exports.mapWithIndex = mapWithIndex;
exports.fromArray = fromArray;
exports.toArray = toArray;
exports.reverse = reverse;
exports.mapReverseU = mapReverseU;
exports.mapReverse = mapReverse;
exports.forEachU = forEachU;
exports.forEach = forEach;
exports.forEachWithIndexU = forEachWithIndexU;
exports.forEachWithIndex = forEachWithIndex;
exports.reduceU = reduceU;
exports.reduce = reduce;
exports.reduceWithIndexU = reduceWithIndexU;
exports.reduceWithIndex = reduceWithIndex;
exports.reduceReverseU = reduceReverseU;
exports.reduceReverse = reduceReverse;
exports.mapReverse2U = mapReverse2U;
exports.mapReverse2 = mapReverse2;
exports.forEach2U = forEach2U;
exports.forEach2 = forEach2;
exports.reduce2U = reduce2U;
exports.reduce2 = reduce2;
exports.reduceReverse2U = reduceReverse2U;
exports.reduceReverse2 = reduceReverse2;
exports.everyU = everyU;
exports.every = every;
exports.someU = someU;
exports.some = some;
exports.every2U = every2U;
exports.every2 = every2;
exports.some2U = some2U;
exports.some2 = some2;
exports.cmpByLength = cmpByLength;
exports.cmpU = cmpU;
exports.cmp = cmp;
exports.eqU = eqU;
exports.eq = eq;
exports.hasU = hasU;
exports.has = has;
exports.getByU = getByU;
exports.getBy = getBy;
exports.keepU = keepU;
exports.keep = keep;
exports.filter = filter;
exports.keepWithIndexU = keepWithIndexU;
exports.keepWithIndex = keepWithIndex;
exports.filterWithIndex = filterWithIndex;
exports.keepMapU = keepMapU;
exports.keepMap = keepMap;
exports.partitionU = partitionU;
exports.partition = partition;
exports.unzip = unzip;
exports.getAssocU = getAssocU;
exports.getAssoc = getAssoc;
exports.hasAssocU = hasAssocU;
exports.hasAssoc = hasAssoc;
exports.removeAssocU = removeAssocU;
exports.removeAssoc = removeAssoc;
exports.setAssocU = setAssocU;
exports.setAssoc = setAssoc;
exports.sortU = sortU;
exports.sort = sort;
/* No side effect */


/***/ }),

/***/ "./node_modules/bs-platform/lib/js/belt_MapInt.js":
/*!********************************************************!*\
  !*** ./node_modules/bs-platform/lib/js/belt_MapInt.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Curry = __webpack_require__(/*! ./curry.js */ "./node_modules/bs-platform/lib/js/curry.js");
var Caml_option = __webpack_require__(/*! ./caml_option.js */ "./node_modules/bs-platform/lib/js/caml_option.js");
var Belt_internalMapInt = __webpack_require__(/*! ./belt_internalMapInt.js */ "./node_modules/bs-platform/lib/js/belt_internalMapInt.js");
var Belt_internalAVLtree = __webpack_require__(/*! ./belt_internalAVLtree.js */ "./node_modules/bs-platform/lib/js/belt_internalAVLtree.js");

function set(t, newK, newD) {
  if (t === undefined) {
    return Belt_internalAVLtree.singleton(newK, newD);
  }
  var k = t.k;
  if (newK === k) {
    return Belt_internalAVLtree.updateValue(t, newD);
  }
  var v = t.v;
  if (newK < k) {
    return Belt_internalAVLtree.bal(set(t.l, newK, newD), k, v, t.r);
  } else {
    return Belt_internalAVLtree.bal(t.l, k, v, set(t.r, newK, newD));
  }
}

function updateU(t, x, f) {
  if (t !== undefined) {
    var k = t.k;
    if (x === k) {
      var data = f(Caml_option.some(t.v));
      if (data !== undefined) {
        return Belt_internalAVLtree.updateValue(t, Caml_option.valFromOption(data));
      }
      var l = t.l;
      var r = t.r;
      if (l === undefined) {
        return r;
      }
      if (r === undefined) {
        return l;
      }
      var kr = {
        contents: r.k
      };
      var vr = {
        contents: r.v
      };
      var r$1 = Belt_internalAVLtree.removeMinAuxWithRef(r, kr, vr);
      return Belt_internalAVLtree.bal(l, kr.contents, vr.contents, r$1);
    }
    var v = t.v;
    var l$1 = t.l;
    var r$2 = t.r;
    if (x < k) {
      var ll = updateU(l$1, x, f);
      if (l$1 === ll) {
        return t;
      } else {
        return Belt_internalAVLtree.bal(ll, k, v, r$2);
      }
    }
    var rr = updateU(r$2, x, f);
    if (r$2 === rr) {
      return t;
    } else {
      return Belt_internalAVLtree.bal(l$1, k, v, rr);
    }
  }
  var data$1 = f(undefined);
  if (data$1 !== undefined) {
    return Belt_internalAVLtree.singleton(x, Caml_option.valFromOption(data$1));
  } else {
    return t;
  }
}

function update(t, x, f) {
  return updateU(t, x, Curry.__1(f));
}

function removeAux(n, x) {
  var v = n.k;
  var l = n.l;
  var r = n.r;
  if (x === v) {
    if (l === undefined) {
      return r;
    }
    if (r === undefined) {
      return l;
    }
    var kr = {
      contents: r.k
    };
    var vr = {
      contents: r.v
    };
    var r$1 = Belt_internalAVLtree.removeMinAuxWithRef(r, kr, vr);
    return Belt_internalAVLtree.bal(l, kr.contents, vr.contents, r$1);
  }
  if (x < v) {
    if (l === undefined) {
      return n;
    }
    var ll = removeAux(l, x);
    if (ll === l) {
      return n;
    } else {
      return Belt_internalAVLtree.bal(ll, v, n.v, r);
    }
  }
  if (r === undefined) {
    return n;
  }
  var rr = removeAux(r, x);
  return Belt_internalAVLtree.bal(l, v, n.v, rr);
}

function remove(n, x) {
  if (n !== undefined) {
    return removeAux(n, x);
  }
  
}

function removeMany(t, keys) {
  var len = keys.length;
  if (t !== undefined) {
    var _t = t;
    var _i = 0;
    while(true) {
      var i = _i;
      var t$1 = _t;
      if (i >= len) {
        return t$1;
      }
      var ele = keys[i];
      var u = removeAux(t$1, ele);
      if (u === undefined) {
        return u;
      }
      _i = i + 1 | 0;
      _t = u;
      continue ;
    };
  }
  
}

function mergeMany(h, arr) {
  var len = arr.length;
  var v = h;
  for(var i = 0; i < len; ++i){
    var match = arr[i];
    v = set(v, match[0], match[1]);
  }
  return v;
}

var empty;

var isEmpty = Belt_internalAVLtree.isEmpty;

var has = Belt_internalMapInt.has;

var cmpU = Belt_internalMapInt.cmpU;

var cmp = Belt_internalMapInt.cmp;

var eqU = Belt_internalMapInt.eqU;

var eq = Belt_internalMapInt.eq;

var findFirstByU = Belt_internalAVLtree.findFirstByU;

var findFirstBy = Belt_internalAVLtree.findFirstBy;

var forEachU = Belt_internalAVLtree.forEachU;

var forEach = Belt_internalAVLtree.forEach;

var reduceU = Belt_internalAVLtree.reduceU;

var reduce = Belt_internalAVLtree.reduce;

var everyU = Belt_internalAVLtree.everyU;

var every = Belt_internalAVLtree.every;

var someU = Belt_internalAVLtree.someU;

var some = Belt_internalAVLtree.some;

var size = Belt_internalAVLtree.size;

var toList = Belt_internalAVLtree.toList;

var toArray = Belt_internalAVLtree.toArray;

var fromArray = Belt_internalMapInt.fromArray;

var keysToArray = Belt_internalAVLtree.keysToArray;

var valuesToArray = Belt_internalAVLtree.valuesToArray;

var minKey = Belt_internalAVLtree.minKey;

var minKeyUndefined = Belt_internalAVLtree.minKeyUndefined;

var maxKey = Belt_internalAVLtree.maxKey;

var maxKeyUndefined = Belt_internalAVLtree.maxKeyUndefined;

var minimum = Belt_internalAVLtree.minimum;

var minUndefined = Belt_internalAVLtree.minUndefined;

var maximum = Belt_internalAVLtree.maximum;

var maxUndefined = Belt_internalAVLtree.maxUndefined;

var get = Belt_internalMapInt.get;

var getUndefined = Belt_internalMapInt.getUndefined;

var getWithDefault = Belt_internalMapInt.getWithDefault;

var getExn = Belt_internalMapInt.getExn;

var checkInvariantInternal = Belt_internalAVLtree.checkInvariantInternal;

var mergeU = Belt_internalMapInt.mergeU;

var merge = Belt_internalMapInt.merge;

var keepU = Belt_internalAVLtree.keepSharedU;

var keep = Belt_internalAVLtree.keepShared;

var partitionU = Belt_internalAVLtree.partitionSharedU;

var partition = Belt_internalAVLtree.partitionShared;

var split = Belt_internalMapInt.split;

var mapU = Belt_internalAVLtree.mapU;

var map = Belt_internalAVLtree.map;

var mapWithKeyU = Belt_internalAVLtree.mapWithKeyU;

var mapWithKey = Belt_internalAVLtree.mapWithKey;

exports.empty = empty;
exports.isEmpty = isEmpty;
exports.has = has;
exports.cmpU = cmpU;
exports.cmp = cmp;
exports.eqU = eqU;
exports.eq = eq;
exports.findFirstByU = findFirstByU;
exports.findFirstBy = findFirstBy;
exports.forEachU = forEachU;
exports.forEach = forEach;
exports.reduceU = reduceU;
exports.reduce = reduce;
exports.everyU = everyU;
exports.every = every;
exports.someU = someU;
exports.some = some;
exports.size = size;
exports.toList = toList;
exports.toArray = toArray;
exports.fromArray = fromArray;
exports.keysToArray = keysToArray;
exports.valuesToArray = valuesToArray;
exports.minKey = minKey;
exports.minKeyUndefined = minKeyUndefined;
exports.maxKey = maxKey;
exports.maxKeyUndefined = maxKeyUndefined;
exports.minimum = minimum;
exports.minUndefined = minUndefined;
exports.maximum = maximum;
exports.maxUndefined = maxUndefined;
exports.get = get;
exports.getUndefined = getUndefined;
exports.getWithDefault = getWithDefault;
exports.getExn = getExn;
exports.checkInvariantInternal = checkInvariantInternal;
exports.remove = remove;
exports.removeMany = removeMany;
exports.set = set;
exports.updateU = updateU;
exports.update = update;
exports.mergeU = mergeU;
exports.merge = merge;
exports.mergeMany = mergeMany;
exports.keepU = keepU;
exports.keep = keep;
exports.partitionU = partitionU;
exports.partition = partition;
exports.split = split;
exports.mapU = mapU;
exports.map = map;
exports.mapWithKeyU = mapWithKeyU;
exports.mapWithKey = mapWithKey;
/* No side effect */


/***/ }),

/***/ "./node_modules/bs-platform/lib/js/belt_MapString.js":
/*!***********************************************************!*\
  !*** ./node_modules/bs-platform/lib/js/belt_MapString.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Curry = __webpack_require__(/*! ./curry.js */ "./node_modules/bs-platform/lib/js/curry.js");
var Caml_option = __webpack_require__(/*! ./caml_option.js */ "./node_modules/bs-platform/lib/js/caml_option.js");
var Belt_internalAVLtree = __webpack_require__(/*! ./belt_internalAVLtree.js */ "./node_modules/bs-platform/lib/js/belt_internalAVLtree.js");
var Belt_internalMapString = __webpack_require__(/*! ./belt_internalMapString.js */ "./node_modules/bs-platform/lib/js/belt_internalMapString.js");

function set(t, newK, newD) {
  if (t === undefined) {
    return Belt_internalAVLtree.singleton(newK, newD);
  }
  var k = t.k;
  if (newK === k) {
    return Belt_internalAVLtree.updateValue(t, newD);
  }
  var v = t.v;
  if (newK < k) {
    return Belt_internalAVLtree.bal(set(t.l, newK, newD), k, v, t.r);
  } else {
    return Belt_internalAVLtree.bal(t.l, k, v, set(t.r, newK, newD));
  }
}

function updateU(t, x, f) {
  if (t !== undefined) {
    var k = t.k;
    if (x === k) {
      var data = f(Caml_option.some(t.v));
      if (data !== undefined) {
        return Belt_internalAVLtree.updateValue(t, Caml_option.valFromOption(data));
      }
      var l = t.l;
      var r = t.r;
      if (l === undefined) {
        return r;
      }
      if (r === undefined) {
        return l;
      }
      var kr = {
        contents: r.k
      };
      var vr = {
        contents: r.v
      };
      var r$1 = Belt_internalAVLtree.removeMinAuxWithRef(r, kr, vr);
      return Belt_internalAVLtree.bal(l, kr.contents, vr.contents, r$1);
    }
    var v = t.v;
    var l$1 = t.l;
    var r$2 = t.r;
    if (x < k) {
      var ll = updateU(l$1, x, f);
      if (l$1 === ll) {
        return t;
      } else {
        return Belt_internalAVLtree.bal(ll, k, v, r$2);
      }
    }
    var rr = updateU(r$2, x, f);
    if (r$2 === rr) {
      return t;
    } else {
      return Belt_internalAVLtree.bal(l$1, k, v, rr);
    }
  }
  var data$1 = f(undefined);
  if (data$1 !== undefined) {
    return Belt_internalAVLtree.singleton(x, Caml_option.valFromOption(data$1));
  } else {
    return t;
  }
}

function update(t, x, f) {
  return updateU(t, x, Curry.__1(f));
}

function removeAux(n, x) {
  var v = n.k;
  var l = n.l;
  var r = n.r;
  if (x === v) {
    if (l === undefined) {
      return r;
    }
    if (r === undefined) {
      return l;
    }
    var kr = {
      contents: r.k
    };
    var vr = {
      contents: r.v
    };
    var r$1 = Belt_internalAVLtree.removeMinAuxWithRef(r, kr, vr);
    return Belt_internalAVLtree.bal(l, kr.contents, vr.contents, r$1);
  }
  if (x < v) {
    if (l === undefined) {
      return n;
    }
    var ll = removeAux(l, x);
    if (ll === l) {
      return n;
    } else {
      return Belt_internalAVLtree.bal(ll, v, n.v, r);
    }
  }
  if (r === undefined) {
    return n;
  }
  var rr = removeAux(r, x);
  return Belt_internalAVLtree.bal(l, v, n.v, rr);
}

function remove(n, x) {
  if (n !== undefined) {
    return removeAux(n, x);
  }
  
}

function removeMany(t, keys) {
  var len = keys.length;
  if (t !== undefined) {
    var _t = t;
    var _i = 0;
    while(true) {
      var i = _i;
      var t$1 = _t;
      if (i >= len) {
        return t$1;
      }
      var ele = keys[i];
      var u = removeAux(t$1, ele);
      if (u === undefined) {
        return u;
      }
      _i = i + 1 | 0;
      _t = u;
      continue ;
    };
  }
  
}

function mergeMany(h, arr) {
  var len = arr.length;
  var v = h;
  for(var i = 0; i < len; ++i){
    var match = arr[i];
    v = set(v, match[0], match[1]);
  }
  return v;
}

var empty;

var isEmpty = Belt_internalAVLtree.isEmpty;

var has = Belt_internalMapString.has;

var cmpU = Belt_internalMapString.cmpU;

var cmp = Belt_internalMapString.cmp;

var eqU = Belt_internalMapString.eqU;

var eq = Belt_internalMapString.eq;

var findFirstByU = Belt_internalAVLtree.findFirstByU;

var findFirstBy = Belt_internalAVLtree.findFirstBy;

var forEachU = Belt_internalAVLtree.forEachU;

var forEach = Belt_internalAVLtree.forEach;

var reduceU = Belt_internalAVLtree.reduceU;

var reduce = Belt_internalAVLtree.reduce;

var everyU = Belt_internalAVLtree.everyU;

var every = Belt_internalAVLtree.every;

var someU = Belt_internalAVLtree.someU;

var some = Belt_internalAVLtree.some;

var size = Belt_internalAVLtree.size;

var toList = Belt_internalAVLtree.toList;

var toArray = Belt_internalAVLtree.toArray;

var fromArray = Belt_internalMapString.fromArray;

var keysToArray = Belt_internalAVLtree.keysToArray;

var valuesToArray = Belt_internalAVLtree.valuesToArray;

var minKey = Belt_internalAVLtree.minKey;

var minKeyUndefined = Belt_internalAVLtree.minKeyUndefined;

var maxKey = Belt_internalAVLtree.maxKey;

var maxKeyUndefined = Belt_internalAVLtree.maxKeyUndefined;

var minimum = Belt_internalAVLtree.minimum;

var minUndefined = Belt_internalAVLtree.minUndefined;

var maximum = Belt_internalAVLtree.maximum;

var maxUndefined = Belt_internalAVLtree.maxUndefined;

var get = Belt_internalMapString.get;

var getUndefined = Belt_internalMapString.getUndefined;

var getWithDefault = Belt_internalMapString.getWithDefault;

var getExn = Belt_internalMapString.getExn;

var checkInvariantInternal = Belt_internalAVLtree.checkInvariantInternal;

var mergeU = Belt_internalMapString.mergeU;

var merge = Belt_internalMapString.merge;

var keepU = Belt_internalAVLtree.keepSharedU;

var keep = Belt_internalAVLtree.keepShared;

var partitionU = Belt_internalAVLtree.partitionSharedU;

var partition = Belt_internalAVLtree.partitionShared;

var split = Belt_internalMapString.split;

var mapU = Belt_internalAVLtree.mapU;

var map = Belt_internalAVLtree.map;

var mapWithKeyU = Belt_internalAVLtree.mapWithKeyU;

var mapWithKey = Belt_internalAVLtree.mapWithKey;

exports.empty = empty;
exports.isEmpty = isEmpty;
exports.has = has;
exports.cmpU = cmpU;
exports.cmp = cmp;
exports.eqU = eqU;
exports.eq = eq;
exports.findFirstByU = findFirstByU;
exports.findFirstBy = findFirstBy;
exports.forEachU = forEachU;
exports.forEach = forEach;
exports.reduceU = reduceU;
exports.reduce = reduce;
exports.everyU = everyU;
exports.every = every;
exports.someU = someU;
exports.some = some;
exports.size = size;
exports.toList = toList;
exports.toArray = toArray;
exports.fromArray = fromArray;
exports.keysToArray = keysToArray;
exports.valuesToArray = valuesToArray;
exports.minKey = minKey;
exports.minKeyUndefined = minKeyUndefined;
exports.maxKey = maxKey;
exports.maxKeyUndefined = maxKeyUndefined;
exports.minimum = minimum;
exports.minUndefined = minUndefined;
exports.maximum = maximum;
exports.maxUndefined = maxUndefined;
exports.get = get;
exports.getUndefined = getUndefined;
exports.getWithDefault = getWithDefault;
exports.getExn = getExn;
exports.checkInvariantInternal = checkInvariantInternal;
exports.remove = remove;
exports.removeMany = removeMany;
exports.set = set;
exports.updateU = updateU;
exports.update = update;
exports.mergeU = mergeU;
exports.merge = merge;
exports.mergeMany = mergeMany;
exports.keepU = keepU;
exports.keep = keep;
exports.partitionU = partitionU;
exports.partition = partition;
exports.split = split;
exports.mapU = mapU;
exports.map = map;
exports.mapWithKeyU = mapWithKeyU;
exports.mapWithKey = mapWithKey;
/* No side effect */


/***/ }),

/***/ "./node_modules/bs-platform/lib/js/belt_MutableMapString.js":
/*!******************************************************************!*\
  !*** ./node_modules/bs-platform/lib/js/belt_MutableMapString.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Curry = __webpack_require__(/*! ./curry.js */ "./node_modules/bs-platform/lib/js/curry.js");
var Caml_option = __webpack_require__(/*! ./caml_option.js */ "./node_modules/bs-platform/lib/js/caml_option.js");
var Belt_internalAVLtree = __webpack_require__(/*! ./belt_internalAVLtree.js */ "./node_modules/bs-platform/lib/js/belt_internalAVLtree.js");
var Belt_internalMapString = __webpack_require__(/*! ./belt_internalMapString.js */ "./node_modules/bs-platform/lib/js/belt_internalMapString.js");

function make(param) {
  return {
          data: undefined
        };
}

function isEmpty(m) {
  var x = m.data;
  return x === undefined;
}

function clear(m) {
  m.data = undefined;
  
}

function minKeyUndefined(m) {
  return Belt_internalAVLtree.minKeyUndefined(m.data);
}

function minKey(m) {
  return Belt_internalAVLtree.minKey(m.data);
}

function maxKeyUndefined(m) {
  return Belt_internalAVLtree.maxKeyUndefined(m.data);
}

function maxKey(m) {
  return Belt_internalAVLtree.maxKey(m.data);
}

function minimum(m) {
  return Belt_internalAVLtree.minimum(m.data);
}

function minUndefined(m) {
  return Belt_internalAVLtree.minUndefined(m.data);
}

function maximum(m) {
  return Belt_internalAVLtree.maximum(m.data);
}

function maxUndefined(m) {
  return Belt_internalAVLtree.maxUndefined(m.data);
}

function set(m, k, v) {
  var old_data = m.data;
  var v$1 = Belt_internalMapString.addMutate(old_data, k, v);
  if (v$1 !== old_data) {
    m.data = v$1;
    return ;
  }
  
}

function forEachU(d, f) {
  return Belt_internalAVLtree.forEachU(d.data, f);
}

function forEach(d, f) {
  return Belt_internalAVLtree.forEachU(d.data, Curry.__2(f));
}

function mapU(d, f) {
  return {
          data: Belt_internalAVLtree.mapU(d.data, f)
        };
}

function map(d, f) {
  return mapU(d, Curry.__1(f));
}

function mapWithKeyU(d, f) {
  return {
          data: Belt_internalAVLtree.mapWithKeyU(d.data, f)
        };
}

function mapWithKey(d, f) {
  return mapWithKeyU(d, Curry.__2(f));
}

function reduceU(d, acc, f) {
  return Belt_internalAVLtree.reduceU(d.data, acc, f);
}

function reduce(d, acc, f) {
  return reduceU(d, acc, Curry.__3(f));
}

function everyU(d, f) {
  return Belt_internalAVLtree.everyU(d.data, f);
}

function every(d, f) {
  return Belt_internalAVLtree.everyU(d.data, Curry.__2(f));
}

function someU(d, f) {
  return Belt_internalAVLtree.someU(d.data, f);
}

function some(d, f) {
  return Belt_internalAVLtree.someU(d.data, Curry.__2(f));
}

function size(d) {
  return Belt_internalAVLtree.size(d.data);
}

function toList(d) {
  return Belt_internalAVLtree.toList(d.data);
}

function toArray(d) {
  return Belt_internalAVLtree.toArray(d.data);
}

function keysToArray(d) {
  return Belt_internalAVLtree.keysToArray(d.data);
}

function valuesToArray(d) {
  return Belt_internalAVLtree.valuesToArray(d.data);
}

function checkInvariantInternal(d) {
  return Belt_internalAVLtree.checkInvariantInternal(d.data);
}

function has(d, v) {
  return Belt_internalMapString.has(d.data, v);
}

function removeMutateAux(nt, x) {
  var k = nt.k;
  if (x === k) {
    var l = nt.l;
    var r = nt.r;
    if (l !== undefined) {
      if (r !== undefined) {
        nt.r = Belt_internalAVLtree.removeMinAuxWithRootMutate(nt, r);
        return Belt_internalAVLtree.balMutate(nt);
      } else {
        return l;
      }
    } else {
      return r;
    }
  }
  if (x < k) {
    var l$1 = nt.l;
    if (l$1 !== undefined) {
      nt.l = removeMutateAux(l$1, x);
      return Belt_internalAVLtree.balMutate(nt);
    } else {
      return nt;
    }
  }
  var r$1 = nt.r;
  if (r$1 !== undefined) {
    nt.r = removeMutateAux(r$1, x);
    return Belt_internalAVLtree.balMutate(nt);
  } else {
    return nt;
  }
}

function remove(d, v) {
  var oldRoot = d.data;
  if (oldRoot === undefined) {
    return ;
  }
  var newRoot = removeMutateAux(oldRoot, v);
  if (newRoot !== oldRoot) {
    d.data = newRoot;
    return ;
  }
  
}

function updateDone(t, x, f) {
  if (t !== undefined) {
    var k = t.k;
    if (k === x) {
      var data = f(Caml_option.some(t.v));
      if (data !== undefined) {
        t.v = Caml_option.valFromOption(data);
        return t;
      }
      var l = t.l;
      var r = t.r;
      if (l !== undefined) {
        if (r !== undefined) {
          t.r = Belt_internalAVLtree.removeMinAuxWithRootMutate(t, r);
          return Belt_internalAVLtree.balMutate(t);
        } else {
          return l;
        }
      } else {
        return r;
      }
    }
    var l$1 = t.l;
    var r$1 = t.r;
    if (x < k) {
      var ll = updateDone(l$1, x, f);
      t.l = ll;
    } else {
      t.r = updateDone(r$1, x, f);
    }
    return Belt_internalAVLtree.balMutate(t);
  }
  var data$1 = f(undefined);
  if (data$1 !== undefined) {
    return Belt_internalAVLtree.singleton(x, Caml_option.valFromOption(data$1));
  } else {
    return t;
  }
}

function updateU(t, x, f) {
  var oldRoot = t.data;
  var newRoot = updateDone(oldRoot, x, f);
  if (newRoot !== oldRoot) {
    t.data = newRoot;
    return ;
  }
  
}

function update(t, x, f) {
  return updateU(t, x, Curry.__1(f));
}

function removeArrayMutateAux(_t, xs, _i, len) {
  while(true) {
    var i = _i;
    var t = _t;
    if (i >= len) {
      return t;
    }
    var ele = xs[i];
    var u = removeMutateAux(t, ele);
    if (u === undefined) {
      return ;
    }
    _i = i + 1 | 0;
    _t = u;
    continue ;
  };
}

function removeMany(d, xs) {
  var oldRoot = d.data;
  if (oldRoot === undefined) {
    return ;
  }
  var len = xs.length;
  var newRoot = removeArrayMutateAux(oldRoot, xs, 0, len);
  if (newRoot !== oldRoot) {
    d.data = newRoot;
    return ;
  }
  
}

function fromArray(xs) {
  return {
          data: Belt_internalMapString.fromArray(xs)
        };
}

function cmpU(d0, d1, f) {
  return Belt_internalMapString.cmpU(d0.data, d1.data, f);
}

function cmp(d0, d1, f) {
  return cmpU(d0, d1, Curry.__2(f));
}

function eqU(d0, d1, f) {
  return Belt_internalMapString.eqU(d0.data, d1.data, f);
}

function eq(d0, d1, f) {
  return eqU(d0, d1, Curry.__2(f));
}

function get(d, x) {
  return Belt_internalMapString.get(d.data, x);
}

function getUndefined(d, x) {
  return Belt_internalMapString.getUndefined(d.data, x);
}

function getWithDefault(d, x, def) {
  return Belt_internalMapString.getWithDefault(d.data, x, def);
}

function getExn(d, x) {
  return Belt_internalMapString.getExn(d.data, x);
}

exports.make = make;
exports.clear = clear;
exports.isEmpty = isEmpty;
exports.has = has;
exports.cmpU = cmpU;
exports.cmp = cmp;
exports.eqU = eqU;
exports.eq = eq;
exports.forEachU = forEachU;
exports.forEach = forEach;
exports.reduceU = reduceU;
exports.reduce = reduce;
exports.everyU = everyU;
exports.every = every;
exports.someU = someU;
exports.some = some;
exports.size = size;
exports.toList = toList;
exports.toArray = toArray;
exports.fromArray = fromArray;
exports.keysToArray = keysToArray;
exports.valuesToArray = valuesToArray;
exports.minKey = minKey;
exports.minKeyUndefined = minKeyUndefined;
exports.maxKey = maxKey;
exports.maxKeyUndefined = maxKeyUndefined;
exports.minimum = minimum;
exports.minUndefined = minUndefined;
exports.maximum = maximum;
exports.maxUndefined = maxUndefined;
exports.get = get;
exports.getUndefined = getUndefined;
exports.getWithDefault = getWithDefault;
exports.getExn = getExn;
exports.checkInvariantInternal = checkInvariantInternal;
exports.remove = remove;
exports.removeMany = removeMany;
exports.set = set;
exports.updateU = updateU;
exports.update = update;
exports.mapU = mapU;
exports.map = map;
exports.mapWithKeyU = mapWithKeyU;
exports.mapWithKey = mapWithKey;
/* No side effect */


/***/ }),

/***/ "./node_modules/bs-platform/lib/js/belt_MutableQueue.js":
/*!**************************************************************!*\
  !*** ./node_modules/bs-platform/lib/js/belt_MutableQueue.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Curry = __webpack_require__(/*! ./curry.js */ "./node_modules/bs-platform/lib/js/curry.js");
var Caml_option = __webpack_require__(/*! ./caml_option.js */ "./node_modules/bs-platform/lib/js/caml_option.js");

function make(param) {
  return {
          length: 0,
          first: undefined,
          last: undefined
        };
}

function clear(q) {
  q.length = 0;
  q.first = undefined;
  q.last = undefined;
  
}

function add(q, x) {
  var cell = {
    content: x,
    next: undefined
  };
  var last = q.last;
  if (last !== undefined) {
    q.length = q.length + 1 | 0;
    last.next = cell;
    q.last = cell;
  } else {
    q.length = 1;
    q.first = cell;
    q.last = cell;
  }
  
}

function peek(q) {
  var v = q.first;
  if (v !== undefined) {
    return Caml_option.some(v.content);
  }
  
}

function peekUndefined(q) {
  var v = q.first;
  if (v !== undefined) {
    return v.content;
  }
  
}

function peekExn(q) {
  var v = q.first;
  if (v !== undefined) {
    return v.content;
  }
  throw {
        RE_EXN_ID: "Not_found",
        Error: new Error()
      };
}

function pop(q) {
  var x = q.first;
  if (x === undefined) {
    return ;
  }
  var next = x.next;
  if (next === undefined) {
    clear(q);
    return Caml_option.some(x.content);
  } else {
    q.length = q.length - 1 | 0;
    q.first = next;
    return Caml_option.some(x.content);
  }
}

function popExn(q) {
  var x = q.first;
  if (x !== undefined) {
    var next = x.next;
    if (next === undefined) {
      clear(q);
      return x.content;
    } else {
      q.length = q.length - 1 | 0;
      q.first = next;
      return x.content;
    }
  }
  throw {
        RE_EXN_ID: "Not_found",
        Error: new Error()
      };
}

function popUndefined(q) {
  var x = q.first;
  if (x === undefined) {
    return ;
  }
  var next = x.next;
  if (next === undefined) {
    clear(q);
    return x.content;
  } else {
    q.length = q.length - 1 | 0;
    q.first = next;
    return x.content;
  }
}

function copy(q) {
  var qRes = {
    length: q.length,
    first: undefined,
    last: undefined
  };
  var _prev;
  var _cell = q.first;
  while(true) {
    var cell = _cell;
    var prev = _prev;
    if (cell !== undefined) {
      var content = cell.content;
      var res = {
        content: content,
        next: undefined
      };
      if (prev !== undefined) {
        prev.next = res;
      } else {
        qRes.first = res;
      }
      _cell = cell.next;
      _prev = res;
      continue ;
    }
    qRes.last = prev;
    return qRes;
  };
}

function mapU(q, f) {
  var qRes = {
    length: q.length,
    first: undefined,
    last: undefined
  };
  var _prev;
  var _cell = q.first;
  while(true) {
    var cell = _cell;
    var prev = _prev;
    if (cell !== undefined) {
      var content = f(cell.content);
      var res = {
        content: content,
        next: undefined
      };
      if (prev !== undefined) {
        prev.next = res;
      } else {
        qRes.first = res;
      }
      _cell = cell.next;
      _prev = res;
      continue ;
    }
    qRes.last = prev;
    return qRes;
  };
}

function map(q, f) {
  return mapU(q, Curry.__1(f));
}

function isEmpty(q) {
  return q.length === 0;
}

function size(q) {
  return q.length;
}

function forEachU(q, f) {
  var _cell = q.first;
  while(true) {
    var cell = _cell;
    if (cell === undefined) {
      return ;
    }
    f(cell.content);
    _cell = cell.next;
    continue ;
  };
}

function forEach(q, f) {
  return forEachU(q, Curry.__1(f));
}

function reduceU(q, accu, f) {
  var _accu = accu;
  var _cell = q.first;
  while(true) {
    var cell = _cell;
    var accu$1 = _accu;
    if (cell === undefined) {
      return accu$1;
    }
    var accu$2 = f(accu$1, cell.content);
    _cell = cell.next;
    _accu = accu$2;
    continue ;
  };
}

function reduce(q, accu, f) {
  return reduceU(q, accu, Curry.__2(f));
}

function transfer(q1, q2) {
  if (q1.length <= 0) {
    return ;
  }
  var l = q2.last;
  if (l !== undefined) {
    q2.length = q2.length + q1.length | 0;
    l.next = q1.first;
    q2.last = q1.last;
    return clear(q1);
  } else {
    q2.length = q1.length;
    q2.first = q1.first;
    q2.last = q1.last;
    return clear(q1);
  }
}

function fillAux(_i, arr, _cell) {
  while(true) {
    var cell = _cell;
    var i = _i;
    if (cell === undefined) {
      return ;
    }
    arr[i] = cell.content;
    _cell = cell.next;
    _i = i + 1 | 0;
    continue ;
  };
}

function toArray(x) {
  var v = new Array(x.length);
  fillAux(0, v, x.first);
  return v;
}

function fromArray(arr) {
  var q = {
    length: 0,
    first: undefined,
    last: undefined
  };
  for(var i = 0 ,i_finish = arr.length; i < i_finish; ++i){
    add(q, arr[i]);
  }
  return q;
}

exports.make = make;
exports.clear = clear;
exports.isEmpty = isEmpty;
exports.fromArray = fromArray;
exports.add = add;
exports.peek = peek;
exports.peekUndefined = peekUndefined;
exports.peekExn = peekExn;
exports.pop = pop;
exports.popUndefined = popUndefined;
exports.popExn = popExn;
exports.copy = copy;
exports.size = size;
exports.mapU = mapU;
exports.map = map;
exports.forEachU = forEachU;
exports.forEach = forEach;
exports.reduceU = reduceU;
exports.reduce = reduce;
exports.transfer = transfer;
exports.toArray = toArray;
/* No side effect */


/***/ }),

/***/ "./node_modules/bs-platform/lib/js/belt_Option.js":
/*!********************************************************!*\
  !*** ./node_modules/bs-platform/lib/js/belt_Option.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Curry = __webpack_require__(/*! ./curry.js */ "./node_modules/bs-platform/lib/js/curry.js");
var Caml_option = __webpack_require__(/*! ./caml_option.js */ "./node_modules/bs-platform/lib/js/caml_option.js");

function forEachU(opt, f) {
  if (opt !== undefined) {
    return f(Caml_option.valFromOption(opt));
  }
  
}

function forEach(opt, f) {
  return forEachU(opt, Curry.__1(f));
}

function getExn(x) {
  if (x !== undefined) {
    return Caml_option.valFromOption(x);
  }
  throw {
        RE_EXN_ID: "Not_found",
        Error: new Error()
      };
}

function mapWithDefaultU(opt, $$default, f) {
  if (opt !== undefined) {
    return f(Caml_option.valFromOption(opt));
  } else {
    return $$default;
  }
}

function mapWithDefault(opt, $$default, f) {
  return mapWithDefaultU(opt, $$default, Curry.__1(f));
}

function mapU(opt, f) {
  if (opt !== undefined) {
    return Caml_option.some(f(Caml_option.valFromOption(opt)));
  }
  
}

function map(opt, f) {
  return mapU(opt, Curry.__1(f));
}

function flatMapU(opt, f) {
  if (opt !== undefined) {
    return f(Caml_option.valFromOption(opt));
  }
  
}

function flatMap(opt, f) {
  return flatMapU(opt, Curry.__1(f));
}

function getWithDefault(opt, $$default) {
  if (opt !== undefined) {
    return Caml_option.valFromOption(opt);
  } else {
    return $$default;
  }
}

function isSome(param) {
  return param !== undefined;
}

function isNone(x) {
  return x === undefined;
}

function eqU(a, b, f) {
  if (a !== undefined) {
    if (b !== undefined) {
      return f(Caml_option.valFromOption(a), Caml_option.valFromOption(b));
    } else {
      return false;
    }
  } else {
    return b === undefined;
  }
}

function eq(a, b, f) {
  return eqU(a, b, Curry.__2(f));
}

function cmpU(a, b, f) {
  if (a !== undefined) {
    if (b !== undefined) {
      return f(Caml_option.valFromOption(a), Caml_option.valFromOption(b));
    } else {
      return 1;
    }
  } else if (b !== undefined) {
    return -1;
  } else {
    return 0;
  }
}

function cmp(a, b, f) {
  return cmpU(a, b, Curry.__2(f));
}

exports.forEachU = forEachU;
exports.forEach = forEach;
exports.getExn = getExn;
exports.mapWithDefaultU = mapWithDefaultU;
exports.mapWithDefault = mapWithDefault;
exports.mapU = mapU;
exports.map = map;
exports.flatMapU = flatMapU;
exports.flatMap = flatMap;
exports.getWithDefault = getWithDefault;
exports.isSome = isSome;
exports.isNone = isNone;
exports.eqU = eqU;
exports.eq = eq;
exports.cmpU = cmpU;
exports.cmp = cmp;
/* No side effect */


/***/ }),

/***/ "./node_modules/bs-platform/lib/js/belt_SetInt.js":
/*!********************************************************!*\
  !*** ./node_modules/bs-platform/lib/js/belt_SetInt.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Belt_internalAVLset = __webpack_require__(/*! ./belt_internalAVLset.js */ "./node_modules/bs-platform/lib/js/belt_internalAVLset.js");
var Belt_internalSetInt = __webpack_require__(/*! ./belt_internalSetInt.js */ "./node_modules/bs-platform/lib/js/belt_internalSetInt.js");

function add(t, x) {
  if (t === undefined) {
    return Belt_internalAVLset.singleton(x);
  }
  var v = t.v;
  if (x === v) {
    return t;
  }
  var l = t.l;
  var r = t.r;
  if (x < v) {
    var ll = add(l, x);
    if (ll === l) {
      return t;
    } else {
      return Belt_internalAVLset.bal(ll, v, r);
    }
  }
  var rr = add(r, x);
  if (rr === r) {
    return t;
  } else {
    return Belt_internalAVLset.bal(l, v, rr);
  }
}

function mergeMany(h, arr) {
  var len = arr.length;
  var v = h;
  for(var i = 0; i < len; ++i){
    var key = arr[i];
    v = add(v, key);
  }
  return v;
}

function remove(t, x) {
  if (t === undefined) {
    return t;
  }
  var v = t.v;
  var l = t.l;
  var r = t.r;
  if (x === v) {
    if (l === undefined) {
      return r;
    }
    if (r === undefined) {
      return l;
    }
    var v$1 = {
      contents: r.v
    };
    var r$1 = Belt_internalAVLset.removeMinAuxWithRef(r, v$1);
    return Belt_internalAVLset.bal(l, v$1.contents, r$1);
  }
  if (x < v) {
    var ll = remove(l, x);
    if (ll === l) {
      return t;
    } else {
      return Belt_internalAVLset.bal(ll, v, r);
    }
  }
  var rr = remove(r, x);
  if (rr === r) {
    return t;
  } else {
    return Belt_internalAVLset.bal(l, v, rr);
  }
}

function removeMany(h, arr) {
  var len = arr.length;
  var v = h;
  for(var i = 0; i < len; ++i){
    var key = arr[i];
    v = remove(v, key);
  }
  return v;
}

function splitAuxNoPivot(n, x) {
  var v = n.v;
  var l = n.l;
  var r = n.r;
  if (x === v) {
    return [
            l,
            r
          ];
  }
  if (x < v) {
    if (l === undefined) {
      return [
              undefined,
              n
            ];
    }
    var match = splitAuxNoPivot(l, x);
    return [
            match[0],
            Belt_internalAVLset.joinShared(match[1], v, r)
          ];
  }
  if (r === undefined) {
    return [
            n,
            undefined
          ];
  }
  var match$1 = splitAuxNoPivot(r, x);
  return [
          Belt_internalAVLset.joinShared(l, v, match$1[0]),
          match$1[1]
        ];
}

function splitAuxPivot(n, x, pres) {
  var v = n.v;
  var l = n.l;
  var r = n.r;
  if (x === v) {
    pres.contents = true;
    return [
            l,
            r
          ];
  }
  if (x < v) {
    if (l === undefined) {
      return [
              undefined,
              n
            ];
    }
    var match = splitAuxPivot(l, x, pres);
    return [
            match[0],
            Belt_internalAVLset.joinShared(match[1], v, r)
          ];
  }
  if (r === undefined) {
    return [
            n,
            undefined
          ];
  }
  var match$1 = splitAuxPivot(r, x, pres);
  return [
          Belt_internalAVLset.joinShared(l, v, match$1[0]),
          match$1[1]
        ];
}

function split(t, x) {
  if (t === undefined) {
    return [
            [
              undefined,
              undefined
            ],
            false
          ];
  }
  var pres = {
    contents: false
  };
  var v = splitAuxPivot(t, x, pres);
  return [
          v,
          pres.contents
        ];
}

function union(s1, s2) {
  if (s1 === undefined) {
    return s2;
  }
  if (s2 === undefined) {
    return s1;
  }
  var h1 = s1.h;
  var h2 = s2.h;
  if (h1 >= h2) {
    if (h2 === 1) {
      return add(s1, s2.v);
    }
    var v1 = s1.v;
    var l1 = s1.l;
    var r1 = s1.r;
    var match = splitAuxNoPivot(s2, v1);
    return Belt_internalAVLset.joinShared(union(l1, match[0]), v1, union(r1, match[1]));
  }
  if (h1 === 1) {
    return add(s2, s1.v);
  }
  var v2 = s2.v;
  var l2 = s2.l;
  var r2 = s2.r;
  var match$1 = splitAuxNoPivot(s1, v2);
  return Belt_internalAVLset.joinShared(union(match$1[0], l2), v2, union(match$1[1], r2));
}

function intersect(s1, s2) {
  if (s1 === undefined) {
    return ;
  }
  if (s2 === undefined) {
    return ;
  }
  var v1 = s1.v;
  var l1 = s1.l;
  var r1 = s1.r;
  var pres = {
    contents: false
  };
  var match = splitAuxPivot(s2, v1, pres);
  var ll = intersect(l1, match[0]);
  var rr = intersect(r1, match[1]);
  if (pres.contents) {
    return Belt_internalAVLset.joinShared(ll, v1, rr);
  } else {
    return Belt_internalAVLset.concatShared(ll, rr);
  }
}

function diff(s1, s2) {
  if (s1 === undefined) {
    return s1;
  }
  if (s2 === undefined) {
    return s1;
  }
  var v1 = s1.v;
  var l1 = s1.l;
  var r1 = s1.r;
  var pres = {
    contents: false
  };
  var match = splitAuxPivot(s2, v1, pres);
  var ll = diff(l1, match[0]);
  var rr = diff(r1, match[1]);
  if (pres.contents) {
    return Belt_internalAVLset.concatShared(ll, rr);
  } else {
    return Belt_internalAVLset.joinShared(ll, v1, rr);
  }
}

var empty;

var fromArray = Belt_internalSetInt.fromArray;

var fromSortedArrayUnsafe = Belt_internalAVLset.fromSortedArrayUnsafe;

var isEmpty = Belt_internalAVLset.isEmpty;

var has = Belt_internalSetInt.has;

var subset = Belt_internalSetInt.subset;

var cmp = Belt_internalSetInt.cmp;

var eq = Belt_internalSetInt.eq;

var forEachU = Belt_internalAVLset.forEachU;

var forEach = Belt_internalAVLset.forEach;

var reduceU = Belt_internalAVLset.reduceU;

var reduce = Belt_internalAVLset.reduce;

var everyU = Belt_internalAVLset.everyU;

var every = Belt_internalAVLset.every;

var someU = Belt_internalAVLset.someU;

var some = Belt_internalAVLset.some;

var keepU = Belt_internalAVLset.keepSharedU;

var keep = Belt_internalAVLset.keepShared;

var partitionU = Belt_internalAVLset.partitionSharedU;

var partition = Belt_internalAVLset.partitionShared;

var size = Belt_internalAVLset.size;

var toList = Belt_internalAVLset.toList;

var toArray = Belt_internalAVLset.toArray;

var minimum = Belt_internalAVLset.minimum;

var minUndefined = Belt_internalAVLset.minUndefined;

var maximum = Belt_internalAVLset.maximum;

var maxUndefined = Belt_internalAVLset.maxUndefined;

var get = Belt_internalSetInt.get;

var getUndefined = Belt_internalSetInt.getUndefined;

var getExn = Belt_internalSetInt.getExn;

var checkInvariantInternal = Belt_internalAVLset.checkInvariantInternal;

exports.empty = empty;
exports.fromArray = fromArray;
exports.fromSortedArrayUnsafe = fromSortedArrayUnsafe;
exports.isEmpty = isEmpty;
exports.has = has;
exports.add = add;
exports.mergeMany = mergeMany;
exports.remove = remove;
exports.removeMany = removeMany;
exports.union = union;
exports.intersect = intersect;
exports.diff = diff;
exports.subset = subset;
exports.cmp = cmp;
exports.eq = eq;
exports.forEachU = forEachU;
exports.forEach = forEach;
exports.reduceU = reduceU;
exports.reduce = reduce;
exports.everyU = everyU;
exports.every = every;
exports.someU = someU;
exports.some = some;
exports.keepU = keepU;
exports.keep = keep;
exports.partitionU = partitionU;
exports.partition = partition;
exports.size = size;
exports.toList = toList;
exports.toArray = toArray;
exports.minimum = minimum;
exports.minUndefined = minUndefined;
exports.maximum = maximum;
exports.maxUndefined = maxUndefined;
exports.get = get;
exports.getUndefined = getUndefined;
exports.getExn = getExn;
exports.split = split;
exports.checkInvariantInternal = checkInvariantInternal;
/* No side effect */


/***/ }),

/***/ "./node_modules/bs-platform/lib/js/belt_SetString.js":
/*!***********************************************************!*\
  !*** ./node_modules/bs-platform/lib/js/belt_SetString.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Belt_internalAVLset = __webpack_require__(/*! ./belt_internalAVLset.js */ "./node_modules/bs-platform/lib/js/belt_internalAVLset.js");
var Belt_internalSetString = __webpack_require__(/*! ./belt_internalSetString.js */ "./node_modules/bs-platform/lib/js/belt_internalSetString.js");

function add(t, x) {
  if (t === undefined) {
    return Belt_internalAVLset.singleton(x);
  }
  var v = t.v;
  if (x === v) {
    return t;
  }
  var l = t.l;
  var r = t.r;
  if (x < v) {
    var ll = add(l, x);
    if (ll === l) {
      return t;
    } else {
      return Belt_internalAVLset.bal(ll, v, r);
    }
  }
  var rr = add(r, x);
  if (rr === r) {
    return t;
  } else {
    return Belt_internalAVLset.bal(l, v, rr);
  }
}

function mergeMany(h, arr) {
  var len = arr.length;
  var v = h;
  for(var i = 0; i < len; ++i){
    var key = arr[i];
    v = add(v, key);
  }
  return v;
}

function remove(t, x) {
  if (t === undefined) {
    return t;
  }
  var v = t.v;
  var l = t.l;
  var r = t.r;
  if (x === v) {
    if (l === undefined) {
      return r;
    }
    if (r === undefined) {
      return l;
    }
    var v$1 = {
      contents: r.v
    };
    var r$1 = Belt_internalAVLset.removeMinAuxWithRef(r, v$1);
    return Belt_internalAVLset.bal(l, v$1.contents, r$1);
  }
  if (x < v) {
    var ll = remove(l, x);
    if (ll === l) {
      return t;
    } else {
      return Belt_internalAVLset.bal(ll, v, r);
    }
  }
  var rr = remove(r, x);
  if (rr === r) {
    return t;
  } else {
    return Belt_internalAVLset.bal(l, v, rr);
  }
}

function removeMany(h, arr) {
  var len = arr.length;
  var v = h;
  for(var i = 0; i < len; ++i){
    var key = arr[i];
    v = remove(v, key);
  }
  return v;
}

function splitAuxNoPivot(n, x) {
  var v = n.v;
  var l = n.l;
  var r = n.r;
  if (x === v) {
    return [
            l,
            r
          ];
  }
  if (x < v) {
    if (l === undefined) {
      return [
              undefined,
              n
            ];
    }
    var match = splitAuxNoPivot(l, x);
    return [
            match[0],
            Belt_internalAVLset.joinShared(match[1], v, r)
          ];
  }
  if (r === undefined) {
    return [
            n,
            undefined
          ];
  }
  var match$1 = splitAuxNoPivot(r, x);
  return [
          Belt_internalAVLset.joinShared(l, v, match$1[0]),
          match$1[1]
        ];
}

function splitAuxPivot(n, x, pres) {
  var v = n.v;
  var l = n.l;
  var r = n.r;
  if (x === v) {
    pres.contents = true;
    return [
            l,
            r
          ];
  }
  if (x < v) {
    if (l === undefined) {
      return [
              undefined,
              n
            ];
    }
    var match = splitAuxPivot(l, x, pres);
    return [
            match[0],
            Belt_internalAVLset.joinShared(match[1], v, r)
          ];
  }
  if (r === undefined) {
    return [
            n,
            undefined
          ];
  }
  var match$1 = splitAuxPivot(r, x, pres);
  return [
          Belt_internalAVLset.joinShared(l, v, match$1[0]),
          match$1[1]
        ];
}

function split(t, x) {
  if (t === undefined) {
    return [
            [
              undefined,
              undefined
            ],
            false
          ];
  }
  var pres = {
    contents: false
  };
  var v = splitAuxPivot(t, x, pres);
  return [
          v,
          pres.contents
        ];
}

function union(s1, s2) {
  if (s1 === undefined) {
    return s2;
  }
  if (s2 === undefined) {
    return s1;
  }
  var h1 = s1.h;
  var h2 = s2.h;
  if (h1 >= h2) {
    if (h2 === 1) {
      return add(s1, s2.v);
    }
    var v1 = s1.v;
    var l1 = s1.l;
    var r1 = s1.r;
    var match = splitAuxNoPivot(s2, v1);
    return Belt_internalAVLset.joinShared(union(l1, match[0]), v1, union(r1, match[1]));
  }
  if (h1 === 1) {
    return add(s2, s1.v);
  }
  var v2 = s2.v;
  var l2 = s2.l;
  var r2 = s2.r;
  var match$1 = splitAuxNoPivot(s1, v2);
  return Belt_internalAVLset.joinShared(union(match$1[0], l2), v2, union(match$1[1], r2));
}

function intersect(s1, s2) {
  if (s1 === undefined) {
    return ;
  }
  if (s2 === undefined) {
    return ;
  }
  var v1 = s1.v;
  var l1 = s1.l;
  var r1 = s1.r;
  var pres = {
    contents: false
  };
  var match = splitAuxPivot(s2, v1, pres);
  var ll = intersect(l1, match[0]);
  var rr = intersect(r1, match[1]);
  if (pres.contents) {
    return Belt_internalAVLset.joinShared(ll, v1, rr);
  } else {
    return Belt_internalAVLset.concatShared(ll, rr);
  }
}

function diff(s1, s2) {
  if (s1 === undefined) {
    return s1;
  }
  if (s2 === undefined) {
    return s1;
  }
  var v1 = s1.v;
  var l1 = s1.l;
  var r1 = s1.r;
  var pres = {
    contents: false
  };
  var match = splitAuxPivot(s2, v1, pres);
  var ll = diff(l1, match[0]);
  var rr = diff(r1, match[1]);
  if (pres.contents) {
    return Belt_internalAVLset.concatShared(ll, rr);
  } else {
    return Belt_internalAVLset.joinShared(ll, v1, rr);
  }
}

var empty;

var fromArray = Belt_internalSetString.fromArray;

var fromSortedArrayUnsafe = Belt_internalAVLset.fromSortedArrayUnsafe;

var isEmpty = Belt_internalAVLset.isEmpty;

var has = Belt_internalSetString.has;

var subset = Belt_internalSetString.subset;

var cmp = Belt_internalSetString.cmp;

var eq = Belt_internalSetString.eq;

var forEachU = Belt_internalAVLset.forEachU;

var forEach = Belt_internalAVLset.forEach;

var reduceU = Belt_internalAVLset.reduceU;

var reduce = Belt_internalAVLset.reduce;

var everyU = Belt_internalAVLset.everyU;

var every = Belt_internalAVLset.every;

var someU = Belt_internalAVLset.someU;

var some = Belt_internalAVLset.some;

var keepU = Belt_internalAVLset.keepSharedU;

var keep = Belt_internalAVLset.keepShared;

var partitionU = Belt_internalAVLset.partitionSharedU;

var partition = Belt_internalAVLset.partitionShared;

var size = Belt_internalAVLset.size;

var toList = Belt_internalAVLset.toList;

var toArray = Belt_internalAVLset.toArray;

var minimum = Belt_internalAVLset.minimum;

var minUndefined = Belt_internalAVLset.minUndefined;

var maximum = Belt_internalAVLset.maximum;

var maxUndefined = Belt_internalAVLset.maxUndefined;

var get = Belt_internalSetString.get;

var getUndefined = Belt_internalSetString.getUndefined;

var getExn = Belt_internalSetString.getExn;

var checkInvariantInternal = Belt_internalAVLset.checkInvariantInternal;

exports.empty = empty;
exports.fromArray = fromArray;
exports.fromSortedArrayUnsafe = fromSortedArrayUnsafe;
exports.isEmpty = isEmpty;
exports.has = has;
exports.add = add;
exports.mergeMany = mergeMany;
exports.remove = remove;
exports.removeMany = removeMany;
exports.union = union;
exports.intersect = intersect;
exports.diff = diff;
exports.subset = subset;
exports.cmp = cmp;
exports.eq = eq;
exports.forEachU = forEachU;
exports.forEach = forEach;
exports.reduceU = reduceU;
exports.reduce = reduce;
exports.everyU = everyU;
exports.every = every;
exports.someU = someU;
exports.some = some;
exports.keepU = keepU;
exports.keep = keep;
exports.partitionU = partitionU;
exports.partition = partition;
exports.size = size;
exports.toList = toList;
exports.toArray = toArray;
exports.minimum = minimum;
exports.minUndefined = minUndefined;
exports.maximum = maximum;
exports.maxUndefined = maxUndefined;
exports.get = get;
exports.getUndefined = getUndefined;
exports.getExn = getExn;
exports.split = split;
exports.checkInvariantInternal = checkInvariantInternal;
/* No side effect */


/***/ }),

/***/ "./node_modules/bs-platform/lib/js/belt_SortArray.js":
/*!***********************************************************!*\
  !*** ./node_modules/bs-platform/lib/js/belt_SortArray.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Curry = __webpack_require__(/*! ./curry.js */ "./node_modules/bs-platform/lib/js/curry.js");
var Belt_Array = __webpack_require__(/*! ./belt_Array.js */ "./node_modules/bs-platform/lib/js/belt_Array.js");

function sortedLengthAuxMore(xs, _prec, _acc, len, lt) {
  while(true) {
    var acc = _acc;
    var prec = _prec;
    if (acc >= len) {
      return acc;
    }
    var v = xs[acc];
    if (!lt(v, prec)) {
      return acc;
    }
    _acc = acc + 1 | 0;
    _prec = v;
    continue ;
  };
}

function strictlySortedLengthU(xs, lt) {
  var len = xs.length;
  if (len === 0 || len === 1) {
    return len;
  }
  var x0 = xs[0];
  var x1 = xs[1];
  if (lt(x0, x1)) {
    var _prec = x1;
    var _acc = 2;
    while(true) {
      var acc = _acc;
      var prec = _prec;
      if (acc >= len) {
        return acc;
      }
      var v = xs[acc];
      if (!lt(prec, v)) {
        return acc;
      }
      _acc = acc + 1 | 0;
      _prec = v;
      continue ;
    };
  } else if (lt(x1, x0)) {
    return -sortedLengthAuxMore(xs, x1, 2, len, lt) | 0;
  } else {
    return 1;
  }
}

function strictlySortedLength(xs, lt) {
  return strictlySortedLengthU(xs, Curry.__2(lt));
}

function isSortedU(a, cmp) {
  var len = a.length;
  if (len === 0) {
    return true;
  } else {
    var _i = 0;
    var last_bound = len - 1 | 0;
    while(true) {
      var i = _i;
      if (i === last_bound) {
        return true;
      }
      if (cmp(a[i], a[i + 1 | 0]) > 0) {
        return false;
      }
      _i = i + 1 | 0;
      continue ;
    };
  }
}

function isSorted(a, cmp) {
  return isSortedU(a, Curry.__2(cmp));
}

function merge(src, src1ofs, src1len, src2, src2ofs, src2len, dst, dstofs, cmp) {
  var src1r = src1ofs + src1len | 0;
  var src2r = src2ofs + src2len | 0;
  var _i1 = src1ofs;
  var _s1 = src[src1ofs];
  var _i2 = src2ofs;
  var _s2 = src2[src2ofs];
  var _d = dstofs;
  while(true) {
    var d = _d;
    var s2 = _s2;
    var i2 = _i2;
    var s1 = _s1;
    var i1 = _i1;
    if (cmp(s1, s2) <= 0) {
      dst[d] = s1;
      var i1$1 = i1 + 1 | 0;
      if (i1$1 >= src1r) {
        return Belt_Array.blitUnsafe(src2, i2, dst, d + 1 | 0, src2r - i2 | 0);
      }
      _d = d + 1 | 0;
      _s1 = src[i1$1];
      _i1 = i1$1;
      continue ;
    }
    dst[d] = s2;
    var i2$1 = i2 + 1 | 0;
    if (i2$1 >= src2r) {
      return Belt_Array.blitUnsafe(src, i1, dst, d + 1 | 0, src1r - i1 | 0);
    }
    _d = d + 1 | 0;
    _s2 = src2[i2$1];
    _i2 = i2$1;
    continue ;
  };
}

function unionU(src, src1ofs, src1len, src2, src2ofs, src2len, dst, dstofs, cmp) {
  var src1r = src1ofs + src1len | 0;
  var src2r = src2ofs + src2len | 0;
  var _i1 = src1ofs;
  var _s1 = src[src1ofs];
  var _i2 = src2ofs;
  var _s2 = src2[src2ofs];
  var _d = dstofs;
  while(true) {
    var d = _d;
    var s2 = _s2;
    var i2 = _i2;
    var s1 = _s1;
    var i1 = _i1;
    var c = cmp(s1, s2);
    if (c < 0) {
      dst[d] = s1;
      var i1$1 = i1 + 1 | 0;
      var d$1 = d + 1 | 0;
      if (i1$1 < src1r) {
        _d = d$1;
        _s1 = src[i1$1];
        _i1 = i1$1;
        continue ;
      }
      Belt_Array.blitUnsafe(src2, i2, dst, d$1, src2r - i2 | 0);
      return (d$1 + src2r | 0) - i2 | 0;
    }
    if (c === 0) {
      dst[d] = s1;
      var i1$2 = i1 + 1 | 0;
      var i2$1 = i2 + 1 | 0;
      var d$2 = d + 1 | 0;
      if (!(i1$2 < src1r && i2$1 < src2r)) {
        if (i1$2 === src1r) {
          Belt_Array.blitUnsafe(src2, i2$1, dst, d$2, src2r - i2$1 | 0);
          return (d$2 + src2r | 0) - i2$1 | 0;
        } else {
          Belt_Array.blitUnsafe(src, i1$2, dst, d$2, src1r - i1$2 | 0);
          return (d$2 + src1r | 0) - i1$2 | 0;
        }
      }
      _d = d$2;
      _s2 = src2[i2$1];
      _i2 = i2$1;
      _s1 = src[i1$2];
      _i1 = i1$2;
      continue ;
    }
    dst[d] = s2;
    var i2$2 = i2 + 1 | 0;
    var d$3 = d + 1 | 0;
    if (i2$2 < src2r) {
      _d = d$3;
      _s2 = src2[i2$2];
      _i2 = i2$2;
      continue ;
    }
    Belt_Array.blitUnsafe(src, i1, dst, d$3, src1r - i1 | 0);
    return (d$3 + src1r | 0) - i1 | 0;
  };
}

function union(src, src1ofs, src1len, src2, src2ofs, src2len, dst, dstofs, cmp) {
  return unionU(src, src1ofs, src1len, src2, src2ofs, src2len, dst, dstofs, Curry.__2(cmp));
}

function intersectU(src, src1ofs, src1len, src2, src2ofs, src2len, dst, dstofs, cmp) {
  var src1r = src1ofs + src1len | 0;
  var src2r = src2ofs + src2len | 0;
  var _i1 = src1ofs;
  var _s1 = src[src1ofs];
  var _i2 = src2ofs;
  var _s2 = src2[src2ofs];
  var _d = dstofs;
  while(true) {
    var d = _d;
    var s2 = _s2;
    var i2 = _i2;
    var s1 = _s1;
    var i1 = _i1;
    var c = cmp(s1, s2);
    if (c < 0) {
      var i1$1 = i1 + 1 | 0;
      if (i1$1 >= src1r) {
        return d;
      }
      _s1 = src[i1$1];
      _i1 = i1$1;
      continue ;
    }
    if (c === 0) {
      dst[d] = s1;
      var i1$2 = i1 + 1 | 0;
      var i2$1 = i2 + 1 | 0;
      var d$1 = d + 1 | 0;
      if (!(i1$2 < src1r && i2$1 < src2r)) {
        return d$1;
      }
      _d = d$1;
      _s2 = src2[i2$1];
      _i2 = i2$1;
      _s1 = src[i1$2];
      _i1 = i1$2;
      continue ;
    }
    var i2$2 = i2 + 1 | 0;
    if (i2$2 >= src2r) {
      return d;
    }
    _s2 = src2[i2$2];
    _i2 = i2$2;
    continue ;
  };
}

function intersect(src, src1ofs, src1len, src2, src2ofs, src2len, dst, dstofs, cmp) {
  return intersectU(src, src1ofs, src1len, src2, src2ofs, src2len, dst, dstofs, Curry.__2(cmp));
}

function diffU(src, src1ofs, src1len, src2, src2ofs, src2len, dst, dstofs, cmp) {
  var src1r = src1ofs + src1len | 0;
  var src2r = src2ofs + src2len | 0;
  var _i1 = src1ofs;
  var _s1 = src[src1ofs];
  var _i2 = src2ofs;
  var _s2 = src2[src2ofs];
  var _d = dstofs;
  while(true) {
    var d = _d;
    var s2 = _s2;
    var i2 = _i2;
    var s1 = _s1;
    var i1 = _i1;
    var c = cmp(s1, s2);
    if (c < 0) {
      dst[d] = s1;
      var d$1 = d + 1 | 0;
      var i1$1 = i1 + 1 | 0;
      if (i1$1 >= src1r) {
        return d$1;
      }
      _d = d$1;
      _s1 = src[i1$1];
      _i1 = i1$1;
      continue ;
    }
    if (c === 0) {
      var i1$2 = i1 + 1 | 0;
      var i2$1 = i2 + 1 | 0;
      if (!(i1$2 < src1r && i2$1 < src2r)) {
        if (i1$2 === src1r) {
          return d;
        } else {
          Belt_Array.blitUnsafe(src, i1$2, dst, d, src1r - i1$2 | 0);
          return (d + src1r | 0) - i1$2 | 0;
        }
      }
      _s2 = src2[i2$1];
      _i2 = i2$1;
      _s1 = src[i1$2];
      _i1 = i1$2;
      continue ;
    }
    var i2$2 = i2 + 1 | 0;
    if (i2$2 < src2r) {
      _s2 = src2[i2$2];
      _i2 = i2$2;
      continue ;
    }
    Belt_Array.blitUnsafe(src, i1, dst, d, src1r - i1 | 0);
    return (d + src1r | 0) - i1 | 0;
  };
}

function diff(src, src1ofs, src1len, src2, src2ofs, src2len, dst, dstofs, cmp) {
  return diffU(src, src1ofs, src1len, src2, src2ofs, src2len, dst, dstofs, Curry.__2(cmp));
}

function insertionSort(src, srcofs, dst, dstofs, len, cmp) {
  for(var i = 0; i < len; ++i){
    var e = src[srcofs + i | 0];
    var j = (dstofs + i | 0) - 1 | 0;
    while(j >= dstofs && cmp(dst[j], e) > 0) {
      dst[j + 1 | 0] = dst[j];
      j = j - 1 | 0;
    };
    dst[j + 1 | 0] = e;
  }
  
}

function sortTo(src, srcofs, dst, dstofs, len, cmp) {
  if (len <= 5) {
    return insertionSort(src, srcofs, dst, dstofs, len, cmp);
  }
  var l1 = len / 2 | 0;
  var l2 = len - l1 | 0;
  sortTo(src, srcofs + l1 | 0, dst, dstofs + l1 | 0, l2, cmp);
  sortTo(src, srcofs, src, srcofs + l2 | 0, l1, cmp);
  return merge(src, srcofs + l2 | 0, l1, dst, dstofs + l1 | 0, l2, dst, dstofs, cmp);
}

function stableSortInPlaceByU(a, cmp) {
  var l = a.length;
  if (l <= 5) {
    return insertionSort(a, 0, a, 0, l, cmp);
  }
  var l1 = l / 2 | 0;
  var l2 = l - l1 | 0;
  var t = new Array(l2);
  sortTo(a, l1, t, 0, l2, cmp);
  sortTo(a, 0, a, l2, l1, cmp);
  return merge(a, l2, l1, t, 0, l2, a, 0, cmp);
}

function stableSortInPlaceBy(a, cmp) {
  return stableSortInPlaceByU(a, Curry.__2(cmp));
}

function stableSortByU(a, cmp) {
  var b = a.slice(0);
  stableSortInPlaceByU(b, cmp);
  return b;
}

function stableSortBy(a, cmp) {
  return stableSortByU(a, Curry.__2(cmp));
}

function binarySearchByU(sorted, key, cmp) {
  var len = sorted.length;
  if (len === 0) {
    return -1;
  }
  var lo = sorted[0];
  var c = cmp(key, lo);
  if (c < 0) {
    return -1;
  }
  var hi = sorted[len - 1 | 0];
  var c2 = cmp(key, hi);
  if (c2 > 0) {
    return -(len + 1 | 0) | 0;
  } else {
    var _lo = 0;
    var _hi = len - 1 | 0;
    while(true) {
      var hi$1 = _hi;
      var lo$1 = _lo;
      var mid = (lo$1 + hi$1 | 0) / 2 | 0;
      var midVal = sorted[mid];
      var c$1 = cmp(key, midVal);
      if (c$1 === 0) {
        return mid;
      }
      if (c$1 < 0) {
        if (hi$1 === mid) {
          if (cmp(sorted[lo$1], key) === 0) {
            return lo$1;
          } else {
            return -(hi$1 + 1 | 0) | 0;
          }
        }
        _hi = mid;
        continue ;
      }
      if (lo$1 === mid) {
        if (cmp(sorted[hi$1], key) === 0) {
          return hi$1;
        } else {
          return -(hi$1 + 1 | 0) | 0;
        }
      }
      _lo = mid;
      continue ;
    };
  }
}

function binarySearchBy(sorted, key, cmp) {
  return binarySearchByU(sorted, key, Curry.__2(cmp));
}

var Int;

var $$String;

exports.Int = Int;
exports.$$String = $$String;
exports.strictlySortedLengthU = strictlySortedLengthU;
exports.strictlySortedLength = strictlySortedLength;
exports.isSortedU = isSortedU;
exports.isSorted = isSorted;
exports.stableSortInPlaceByU = stableSortInPlaceByU;
exports.stableSortInPlaceBy = stableSortInPlaceBy;
exports.stableSortByU = stableSortByU;
exports.stableSortBy = stableSortBy;
exports.binarySearchByU = binarySearchByU;
exports.binarySearchBy = binarySearchBy;
exports.unionU = unionU;
exports.union = union;
exports.intersectU = intersectU;
exports.intersect = intersect;
exports.diffU = diffU;
exports.diff = diff;
/* No side effect */


/***/ }),

/***/ "./node_modules/bs-platform/lib/js/belt_SortArrayInt.js":
/*!**************************************************************!*\
  !*** ./node_modules/bs-platform/lib/js/belt_SortArrayInt.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Belt_Array = __webpack_require__(/*! ./belt_Array.js */ "./node_modules/bs-platform/lib/js/belt_Array.js");

function sortedLengthAuxMore(xs, _prec, _acc, len) {
  while(true) {
    var acc = _acc;
    var prec = _prec;
    if (acc >= len) {
      return acc;
    }
    var v = xs[acc];
    if (prec <= v) {
      return acc;
    }
    _acc = acc + 1 | 0;
    _prec = v;
    continue ;
  };
}

function strictlySortedLength(xs) {
  var len = xs.length;
  if (len === 0 || len === 1) {
    return len;
  }
  var x0 = xs[0];
  var x1 = xs[1];
  if (x0 < x1) {
    var _prec = x1;
    var _acc = 2;
    while(true) {
      var acc = _acc;
      var prec = _prec;
      if (acc >= len) {
        return acc;
      }
      var v = xs[acc];
      if (prec >= v) {
        return acc;
      }
      _acc = acc + 1 | 0;
      _prec = v;
      continue ;
    };
  } else if (x0 > x1) {
    return -sortedLengthAuxMore(xs, x1, 2, len) | 0;
  } else {
    return 1;
  }
}

function isSorted(a) {
  var len = a.length;
  if (len === 0) {
    return true;
  } else {
    var _i = 0;
    var last_bound = len - 1 | 0;
    while(true) {
      var i = _i;
      if (i === last_bound) {
        return true;
      }
      if (a[i] > a[i + 1 | 0]) {
        return false;
      }
      _i = i + 1 | 0;
      continue ;
    };
  }
}

function merge(src, src1ofs, src1len, src2, src2ofs, src2len, dst, dstofs) {
  var src1r = src1ofs + src1len | 0;
  var src2r = src2ofs + src2len | 0;
  var _i1 = src1ofs;
  var _s1 = src[src1ofs];
  var _i2 = src2ofs;
  var _s2 = src2[src2ofs];
  var _d = dstofs;
  while(true) {
    var d = _d;
    var s2 = _s2;
    var i2 = _i2;
    var s1 = _s1;
    var i1 = _i1;
    if (s1 <= s2) {
      dst[d] = s1;
      var i1$1 = i1 + 1 | 0;
      if (i1$1 >= src1r) {
        return Belt_Array.blitUnsafe(src2, i2, dst, d + 1 | 0, src2r - i2 | 0);
      }
      _d = d + 1 | 0;
      _s1 = src[i1$1];
      _i1 = i1$1;
      continue ;
    }
    dst[d] = s2;
    var i2$1 = i2 + 1 | 0;
    if (i2$1 >= src2r) {
      return Belt_Array.blitUnsafe(src, i1, dst, d + 1 | 0, src1r - i1 | 0);
    }
    _d = d + 1 | 0;
    _s2 = src2[i2$1];
    _i2 = i2$1;
    continue ;
  };
}

function union(src, src1ofs, src1len, src2, src2ofs, src2len, dst, dstofs) {
  var src1r = src1ofs + src1len | 0;
  var src2r = src2ofs + src2len | 0;
  var _i1 = src1ofs;
  var _s1 = src[src1ofs];
  var _i2 = src2ofs;
  var _s2 = src2[src2ofs];
  var _d = dstofs;
  while(true) {
    var d = _d;
    var s2 = _s2;
    var i2 = _i2;
    var s1 = _s1;
    var i1 = _i1;
    if (s1 < s2) {
      dst[d] = s1;
      var i1$1 = i1 + 1 | 0;
      var d$1 = d + 1 | 0;
      if (i1$1 < src1r) {
        _d = d$1;
        _s1 = src[i1$1];
        _i1 = i1$1;
        continue ;
      }
      Belt_Array.blitUnsafe(src2, i2, dst, d$1, src2r - i2 | 0);
      return (d$1 + src2r | 0) - i2 | 0;
    }
    if (s1 === s2) {
      dst[d] = s1;
      var i1$2 = i1 + 1 | 0;
      var i2$1 = i2 + 1 | 0;
      var d$2 = d + 1 | 0;
      if (!(i1$2 < src1r && i2$1 < src2r)) {
        if (i1$2 === src1r) {
          Belt_Array.blitUnsafe(src2, i2$1, dst, d$2, src2r - i2$1 | 0);
          return (d$2 + src2r | 0) - i2$1 | 0;
        } else {
          Belt_Array.blitUnsafe(src, i1$2, dst, d$2, src1r - i1$2 | 0);
          return (d$2 + src1r | 0) - i1$2 | 0;
        }
      }
      _d = d$2;
      _s2 = src2[i2$1];
      _i2 = i2$1;
      _s1 = src[i1$2];
      _i1 = i1$2;
      continue ;
    }
    dst[d] = s2;
    var i2$2 = i2 + 1 | 0;
    var d$3 = d + 1 | 0;
    if (i2$2 < src2r) {
      _d = d$3;
      _s2 = src2[i2$2];
      _i2 = i2$2;
      continue ;
    }
    Belt_Array.blitUnsafe(src, i1, dst, d$3, src1r - i1 | 0);
    return (d$3 + src1r | 0) - i1 | 0;
  };
}

function intersect(src, src1ofs, src1len, src2, src2ofs, src2len, dst, dstofs) {
  var src1r = src1ofs + src1len | 0;
  var src2r = src2ofs + src2len | 0;
  var _i1 = src1ofs;
  var _s1 = src[src1ofs];
  var _i2 = src2ofs;
  var _s2 = src2[src2ofs];
  var _d = dstofs;
  while(true) {
    var d = _d;
    var s2 = _s2;
    var i2 = _i2;
    var s1 = _s1;
    var i1 = _i1;
    if (s1 < s2) {
      var i1$1 = i1 + 1 | 0;
      if (i1$1 >= src1r) {
        return d;
      }
      _s1 = src[i1$1];
      _i1 = i1$1;
      continue ;
    }
    if (s1 === s2) {
      dst[d] = s1;
      var i1$2 = i1 + 1 | 0;
      var i2$1 = i2 + 1 | 0;
      var d$1 = d + 1 | 0;
      if (!(i1$2 < src1r && i2$1 < src2r)) {
        return d$1;
      }
      _d = d$1;
      _s2 = src2[i2$1];
      _i2 = i2$1;
      _s1 = src[i1$2];
      _i1 = i1$2;
      continue ;
    }
    var i2$2 = i2 + 1 | 0;
    if (i2$2 >= src2r) {
      return d;
    }
    _s2 = src2[i2$2];
    _i2 = i2$2;
    continue ;
  };
}

function diff(src, src1ofs, src1len, src2, src2ofs, src2len, dst, dstofs) {
  var src1r = src1ofs + src1len | 0;
  var src2r = src2ofs + src2len | 0;
  var _i1 = src1ofs;
  var _s1 = src[src1ofs];
  var _i2 = src2ofs;
  var _s2 = src2[src2ofs];
  var _d = dstofs;
  while(true) {
    var d = _d;
    var s2 = _s2;
    var i2 = _i2;
    var s1 = _s1;
    var i1 = _i1;
    if (s1 < s2) {
      dst[d] = s1;
      var d$1 = d + 1 | 0;
      var i1$1 = i1 + 1 | 0;
      if (i1$1 >= src1r) {
        return d$1;
      }
      _d = d$1;
      _s1 = src[i1$1];
      _i1 = i1$1;
      continue ;
    }
    if (s1 === s2) {
      var i1$2 = i1 + 1 | 0;
      var i2$1 = i2 + 1 | 0;
      if (!(i1$2 < src1r && i2$1 < src2r)) {
        if (i1$2 === src1r) {
          return d;
        } else {
          Belt_Array.blitUnsafe(src, i1$2, dst, d, src1r - i1$2 | 0);
          return (d + src1r | 0) - i1$2 | 0;
        }
      }
      _s2 = src2[i2$1];
      _i2 = i2$1;
      _s1 = src[i1$2];
      _i1 = i1$2;
      continue ;
    }
    var i2$2 = i2 + 1 | 0;
    if (i2$2 < src2r) {
      _s2 = src2[i2$2];
      _i2 = i2$2;
      continue ;
    }
    Belt_Array.blitUnsafe(src, i1, dst, d, src1r - i1 | 0);
    return (d + src1r | 0) - i1 | 0;
  };
}

function insertionSort(src, srcofs, dst, dstofs, len) {
  for(var i = 0; i < len; ++i){
    var e = src[srcofs + i | 0];
    var j = (dstofs + i | 0) - 1 | 0;
    while(j >= dstofs && dst[j] > e) {
      dst[j + 1 | 0] = dst[j];
      j = j - 1 | 0;
    };
    dst[j + 1 | 0] = e;
  }
  
}

function sortTo(src, srcofs, dst, dstofs, len) {
  if (len <= 5) {
    return insertionSort(src, srcofs, dst, dstofs, len);
  }
  var l1 = len / 2 | 0;
  var l2 = len - l1 | 0;
  sortTo(src, srcofs + l1 | 0, dst, dstofs + l1 | 0, l2);
  sortTo(src, srcofs, src, srcofs + l2 | 0, l1);
  return merge(src, srcofs + l2 | 0, l1, dst, dstofs + l1 | 0, l2, dst, dstofs);
}

function stableSortInPlace(a) {
  var l = a.length;
  if (l <= 5) {
    return insertionSort(a, 0, a, 0, l);
  }
  var l1 = l / 2 | 0;
  var l2 = l - l1 | 0;
  var t = new Array(l2);
  sortTo(a, l1, t, 0, l2);
  sortTo(a, 0, a, l2, l1);
  return merge(a, l2, l1, t, 0, l2, a, 0);
}

function stableSort(a) {
  var b = a.slice(0);
  stableSortInPlace(b);
  return b;
}

function binarySearch(sorted, key) {
  var len = sorted.length;
  if (len === 0) {
    return -1;
  }
  var lo = sorted[0];
  if (key < lo) {
    return -1;
  }
  var hi = sorted[len - 1 | 0];
  if (key > hi) {
    return -(len + 1 | 0) | 0;
  } else {
    var _lo = 0;
    var _hi = len - 1 | 0;
    while(true) {
      var hi$1 = _hi;
      var lo$1 = _lo;
      var mid = (lo$1 + hi$1 | 0) / 2 | 0;
      var midVal = sorted[mid];
      if (key === midVal) {
        return mid;
      }
      if (key < midVal) {
        if (hi$1 === mid) {
          if (sorted[lo$1] === key) {
            return lo$1;
          } else {
            return -(hi$1 + 1 | 0) | 0;
          }
        }
        _hi = mid;
        continue ;
      }
      if (lo$1 === mid) {
        if (sorted[hi$1] === key) {
          return hi$1;
        } else {
          return -(hi$1 + 1 | 0) | 0;
        }
      }
      _lo = mid;
      continue ;
    };
  }
}

exports.strictlySortedLength = strictlySortedLength;
exports.isSorted = isSorted;
exports.stableSortInPlace = stableSortInPlace;
exports.stableSort = stableSort;
exports.binarySearch = binarySearch;
exports.union = union;
exports.intersect = intersect;
exports.diff = diff;
/* No side effect */


/***/ }),

/***/ "./node_modules/bs-platform/lib/js/belt_SortArrayString.js":
/*!*****************************************************************!*\
  !*** ./node_modules/bs-platform/lib/js/belt_SortArrayString.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Belt_Array = __webpack_require__(/*! ./belt_Array.js */ "./node_modules/bs-platform/lib/js/belt_Array.js");

function sortedLengthAuxMore(xs, _prec, _acc, len) {
  while(true) {
    var acc = _acc;
    var prec = _prec;
    if (acc >= len) {
      return acc;
    }
    var v = xs[acc];
    if (prec <= v) {
      return acc;
    }
    _acc = acc + 1 | 0;
    _prec = v;
    continue ;
  };
}

function strictlySortedLength(xs) {
  var len = xs.length;
  if (len === 0 || len === 1) {
    return len;
  }
  var x0 = xs[0];
  var x1 = xs[1];
  if (x0 < x1) {
    var _prec = x1;
    var _acc = 2;
    while(true) {
      var acc = _acc;
      var prec = _prec;
      if (acc >= len) {
        return acc;
      }
      var v = xs[acc];
      if (prec >= v) {
        return acc;
      }
      _acc = acc + 1 | 0;
      _prec = v;
      continue ;
    };
  } else if (x0 > x1) {
    return -sortedLengthAuxMore(xs, x1, 2, len) | 0;
  } else {
    return 1;
  }
}

function isSorted(a) {
  var len = a.length;
  if (len === 0) {
    return true;
  } else {
    var _i = 0;
    var last_bound = len - 1 | 0;
    while(true) {
      var i = _i;
      if (i === last_bound) {
        return true;
      }
      if (a[i] > a[i + 1 | 0]) {
        return false;
      }
      _i = i + 1 | 0;
      continue ;
    };
  }
}

function merge(src, src1ofs, src1len, src2, src2ofs, src2len, dst, dstofs) {
  var src1r = src1ofs + src1len | 0;
  var src2r = src2ofs + src2len | 0;
  var _i1 = src1ofs;
  var _s1 = src[src1ofs];
  var _i2 = src2ofs;
  var _s2 = src2[src2ofs];
  var _d = dstofs;
  while(true) {
    var d = _d;
    var s2 = _s2;
    var i2 = _i2;
    var s1 = _s1;
    var i1 = _i1;
    if (s1 <= s2) {
      dst[d] = s1;
      var i1$1 = i1 + 1 | 0;
      if (i1$1 >= src1r) {
        return Belt_Array.blitUnsafe(src2, i2, dst, d + 1 | 0, src2r - i2 | 0);
      }
      _d = d + 1 | 0;
      _s1 = src[i1$1];
      _i1 = i1$1;
      continue ;
    }
    dst[d] = s2;
    var i2$1 = i2 + 1 | 0;
    if (i2$1 >= src2r) {
      return Belt_Array.blitUnsafe(src, i1, dst, d + 1 | 0, src1r - i1 | 0);
    }
    _d = d + 1 | 0;
    _s2 = src2[i2$1];
    _i2 = i2$1;
    continue ;
  };
}

function union(src, src1ofs, src1len, src2, src2ofs, src2len, dst, dstofs) {
  var src1r = src1ofs + src1len | 0;
  var src2r = src2ofs + src2len | 0;
  var _i1 = src1ofs;
  var _s1 = src[src1ofs];
  var _i2 = src2ofs;
  var _s2 = src2[src2ofs];
  var _d = dstofs;
  while(true) {
    var d = _d;
    var s2 = _s2;
    var i2 = _i2;
    var s1 = _s1;
    var i1 = _i1;
    if (s1 < s2) {
      dst[d] = s1;
      var i1$1 = i1 + 1 | 0;
      var d$1 = d + 1 | 0;
      if (i1$1 < src1r) {
        _d = d$1;
        _s1 = src[i1$1];
        _i1 = i1$1;
        continue ;
      }
      Belt_Array.blitUnsafe(src2, i2, dst, d$1, src2r - i2 | 0);
      return (d$1 + src2r | 0) - i2 | 0;
    }
    if (s1 === s2) {
      dst[d] = s1;
      var i1$2 = i1 + 1 | 0;
      var i2$1 = i2 + 1 | 0;
      var d$2 = d + 1 | 0;
      if (!(i1$2 < src1r && i2$1 < src2r)) {
        if (i1$2 === src1r) {
          Belt_Array.blitUnsafe(src2, i2$1, dst, d$2, src2r - i2$1 | 0);
          return (d$2 + src2r | 0) - i2$1 | 0;
        } else {
          Belt_Array.blitUnsafe(src, i1$2, dst, d$2, src1r - i1$2 | 0);
          return (d$2 + src1r | 0) - i1$2 | 0;
        }
      }
      _d = d$2;
      _s2 = src2[i2$1];
      _i2 = i2$1;
      _s1 = src[i1$2];
      _i1 = i1$2;
      continue ;
    }
    dst[d] = s2;
    var i2$2 = i2 + 1 | 0;
    var d$3 = d + 1 | 0;
    if (i2$2 < src2r) {
      _d = d$3;
      _s2 = src2[i2$2];
      _i2 = i2$2;
      continue ;
    }
    Belt_Array.blitUnsafe(src, i1, dst, d$3, src1r - i1 | 0);
    return (d$3 + src1r | 0) - i1 | 0;
  };
}

function intersect(src, src1ofs, src1len, src2, src2ofs, src2len, dst, dstofs) {
  var src1r = src1ofs + src1len | 0;
  var src2r = src2ofs + src2len | 0;
  var _i1 = src1ofs;
  var _s1 = src[src1ofs];
  var _i2 = src2ofs;
  var _s2 = src2[src2ofs];
  var _d = dstofs;
  while(true) {
    var d = _d;
    var s2 = _s2;
    var i2 = _i2;
    var s1 = _s1;
    var i1 = _i1;
    if (s1 < s2) {
      var i1$1 = i1 + 1 | 0;
      if (i1$1 >= src1r) {
        return d;
      }
      _s1 = src[i1$1];
      _i1 = i1$1;
      continue ;
    }
    if (s1 === s2) {
      dst[d] = s1;
      var i1$2 = i1 + 1 | 0;
      var i2$1 = i2 + 1 | 0;
      var d$1 = d + 1 | 0;
      if (!(i1$2 < src1r && i2$1 < src2r)) {
        return d$1;
      }
      _d = d$1;
      _s2 = src2[i2$1];
      _i2 = i2$1;
      _s1 = src[i1$2];
      _i1 = i1$2;
      continue ;
    }
    var i2$2 = i2 + 1 | 0;
    if (i2$2 >= src2r) {
      return d;
    }
    _s2 = src2[i2$2];
    _i2 = i2$2;
    continue ;
  };
}

function diff(src, src1ofs, src1len, src2, src2ofs, src2len, dst, dstofs) {
  var src1r = src1ofs + src1len | 0;
  var src2r = src2ofs + src2len | 0;
  var _i1 = src1ofs;
  var _s1 = src[src1ofs];
  var _i2 = src2ofs;
  var _s2 = src2[src2ofs];
  var _d = dstofs;
  while(true) {
    var d = _d;
    var s2 = _s2;
    var i2 = _i2;
    var s1 = _s1;
    var i1 = _i1;
    if (s1 < s2) {
      dst[d] = s1;
      var d$1 = d + 1 | 0;
      var i1$1 = i1 + 1 | 0;
      if (i1$1 >= src1r) {
        return d$1;
      }
      _d = d$1;
      _s1 = src[i1$1];
      _i1 = i1$1;
      continue ;
    }
    if (s1 === s2) {
      var i1$2 = i1 + 1 | 0;
      var i2$1 = i2 + 1 | 0;
      if (!(i1$2 < src1r && i2$1 < src2r)) {
        if (i1$2 === src1r) {
          return d;
        } else {
          Belt_Array.blitUnsafe(src, i1$2, dst, d, src1r - i1$2 | 0);
          return (d + src1r | 0) - i1$2 | 0;
        }
      }
      _s2 = src2[i2$1];
      _i2 = i2$1;
      _s1 = src[i1$2];
      _i1 = i1$2;
      continue ;
    }
    var i2$2 = i2 + 1 | 0;
    if (i2$2 < src2r) {
      _s2 = src2[i2$2];
      _i2 = i2$2;
      continue ;
    }
    Belt_Array.blitUnsafe(src, i1, dst, d, src1r - i1 | 0);
    return (d + src1r | 0) - i1 | 0;
  };
}

function insertionSort(src, srcofs, dst, dstofs, len) {
  for(var i = 0; i < len; ++i){
    var e = src[srcofs + i | 0];
    var j = (dstofs + i | 0) - 1 | 0;
    while(j >= dstofs && dst[j] > e) {
      dst[j + 1 | 0] = dst[j];
      j = j - 1 | 0;
    };
    dst[j + 1 | 0] = e;
  }
  
}

function sortTo(src, srcofs, dst, dstofs, len) {
  if (len <= 5) {
    return insertionSort(src, srcofs, dst, dstofs, len);
  }
  var l1 = len / 2 | 0;
  var l2 = len - l1 | 0;
  sortTo(src, srcofs + l1 | 0, dst, dstofs + l1 | 0, l2);
  sortTo(src, srcofs, src, srcofs + l2 | 0, l1);
  return merge(src, srcofs + l2 | 0, l1, dst, dstofs + l1 | 0, l2, dst, dstofs);
}

function stableSortInPlace(a) {
  var l = a.length;
  if (l <= 5) {
    return insertionSort(a, 0, a, 0, l);
  }
  var l1 = l / 2 | 0;
  var l2 = l - l1 | 0;
  var t = new Array(l2);
  sortTo(a, l1, t, 0, l2);
  sortTo(a, 0, a, l2, l1);
  return merge(a, l2, l1, t, 0, l2, a, 0);
}

function stableSort(a) {
  var b = a.slice(0);
  stableSortInPlace(b);
  return b;
}

function binarySearch(sorted, key) {
  var len = sorted.length;
  if (len === 0) {
    return -1;
  }
  var lo = sorted[0];
  if (key < lo) {
    return -1;
  }
  var hi = sorted[len - 1 | 0];
  if (key > hi) {
    return -(len + 1 | 0) | 0;
  } else {
    var _lo = 0;
    var _hi = len - 1 | 0;
    while(true) {
      var hi$1 = _hi;
      var lo$1 = _lo;
      var mid = (lo$1 + hi$1 | 0) / 2 | 0;
      var midVal = sorted[mid];
      if (key === midVal) {
        return mid;
      }
      if (key < midVal) {
        if (hi$1 === mid) {
          if (sorted[lo$1] === key) {
            return lo$1;
          } else {
            return -(hi$1 + 1 | 0) | 0;
          }
        }
        _hi = mid;
        continue ;
      }
      if (lo$1 === mid) {
        if (sorted[hi$1] === key) {
          return hi$1;
        } else {
          return -(hi$1 + 1 | 0) | 0;
        }
      }
      _lo = mid;
      continue ;
    };
  }
}

exports.strictlySortedLength = strictlySortedLength;
exports.isSorted = isSorted;
exports.stableSortInPlace = stableSortInPlace;
exports.stableSort = stableSort;
exports.binarySearch = binarySearch;
exports.union = union;
exports.intersect = intersect;
exports.diff = diff;
/* No side effect */


/***/ }),

/***/ "./node_modules/bs-platform/lib/js/belt_internalAVLset.js":
/*!****************************************************************!*\
  !*** ./node_modules/bs-platform/lib/js/belt_internalAVLset.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Curry = __webpack_require__(/*! ./curry.js */ "./node_modules/bs-platform/lib/js/curry.js");
var Caml_option = __webpack_require__(/*! ./caml_option.js */ "./node_modules/bs-platform/lib/js/caml_option.js");
var Belt_SortArray = __webpack_require__(/*! ./belt_SortArray.js */ "./node_modules/bs-platform/lib/js/belt_SortArray.js");

function copy(n) {
  if (n !== undefined) {
    return {
            v: n.v,
            h: n.h,
            l: copy(n.l),
            r: copy(n.r)
          };
  } else {
    return n;
  }
}

function create(l, v, r) {
  var hl = l !== undefined ? l.h : 0;
  var hr = r !== undefined ? r.h : 0;
  return {
          v: v,
          h: (
            hl >= hr ? hl : hr
          ) + 1 | 0,
          l: l,
          r: r
        };
}

function singleton(x) {
  return {
          v: x,
          h: 1,
          l: undefined,
          r: undefined
        };
}

function heightGe(l, r) {
  if (r !== undefined) {
    if (l !== undefined) {
      return l.h >= r.h;
    } else {
      return false;
    }
  } else {
    return true;
  }
}

function bal(l, v, r) {
  var hl = l !== undefined ? l.h : 0;
  var hr = r !== undefined ? r.h : 0;
  if (hl > (hr + 2 | 0)) {
    var ll = l.l;
    var lr = l.r;
    if (heightGe(ll, lr)) {
      return create(ll, l.v, create(lr, v, r));
    } else {
      return create(create(ll, l.v, lr.l), lr.v, create(lr.r, v, r));
    }
  }
  if (hr <= (hl + 2 | 0)) {
    return {
            v: v,
            h: (
              hl >= hr ? hl : hr
            ) + 1 | 0,
            l: l,
            r: r
          };
  }
  var rl = r.l;
  var rr = r.r;
  if (heightGe(rr, rl)) {
    return create(create(l, v, rl), r.v, rr);
  } else {
    return create(create(l, v, rl.l), rl.v, create(rl.r, r.v, rr));
  }
}

function min0Aux(_n) {
  while(true) {
    var n = _n;
    var n$1 = n.l;
    if (n$1 === undefined) {
      return n.v;
    }
    _n = n$1;
    continue ;
  };
}

function minimum(n) {
  if (n !== undefined) {
    return Caml_option.some(min0Aux(n));
  }
  
}

function minUndefined(n) {
  if (n !== undefined) {
    return min0Aux(n);
  }
  
}

function max0Aux(_n) {
  while(true) {
    var n = _n;
    var n$1 = n.r;
    if (n$1 === undefined) {
      return n.v;
    }
    _n = n$1;
    continue ;
  };
}

function maximum(n) {
  if (n !== undefined) {
    return Caml_option.some(max0Aux(n));
  }
  
}

function maxUndefined(n) {
  if (n !== undefined) {
    return max0Aux(n);
  }
  
}

function removeMinAuxWithRef(n, v) {
  var ln = n.l;
  if (ln !== undefined) {
    return bal(removeMinAuxWithRef(ln, v), n.v, n.r);
  } else {
    v.contents = n.v;
    return n.r;
  }
}

function isEmpty(n) {
  return n === undefined;
}

function stackAllLeft(_v, _s) {
  while(true) {
    var s = _s;
    var v = _v;
    if (v === undefined) {
      return s;
    }
    _s = {
      hd: v,
      tl: s
    };
    _v = v.l;
    continue ;
  };
}

function forEachU(_n, f) {
  while(true) {
    var n = _n;
    if (n === undefined) {
      return ;
    }
    forEachU(n.l, f);
    f(n.v);
    _n = n.r;
    continue ;
  };
}

function forEach(n, f) {
  return forEachU(n, Curry.__1(f));
}

function reduceU(_s, _accu, f) {
  while(true) {
    var accu = _accu;
    var s = _s;
    if (s === undefined) {
      return accu;
    }
    _accu = f(reduceU(s.l, accu, f), s.v);
    _s = s.r;
    continue ;
  };
}

function reduce(s, accu, f) {
  return reduceU(s, accu, Curry.__2(f));
}

function everyU(_n, p) {
  while(true) {
    var n = _n;
    if (n === undefined) {
      return true;
    }
    if (!p(n.v)) {
      return false;
    }
    if (!everyU(n.l, p)) {
      return false;
    }
    _n = n.r;
    continue ;
  };
}

function every(n, p) {
  return everyU(n, Curry.__1(p));
}

function someU(_n, p) {
  while(true) {
    var n = _n;
    if (n === undefined) {
      return false;
    }
    if (p(n.v)) {
      return true;
    }
    if (someU(n.l, p)) {
      return true;
    }
    _n = n.r;
    continue ;
  };
}

function some(n, p) {
  return someU(n, Curry.__1(p));
}

function addMinElement(n, v) {
  if (n !== undefined) {
    return bal(addMinElement(n.l, v), n.v, n.r);
  } else {
    return singleton(v);
  }
}

function addMaxElement(n, v) {
  if (n !== undefined) {
    return bal(n.l, n.v, addMaxElement(n.r, v));
  } else {
    return singleton(v);
  }
}

function joinShared(ln, v, rn) {
  if (ln === undefined) {
    return addMinElement(rn, v);
  }
  if (rn === undefined) {
    return addMaxElement(ln, v);
  }
  var lh = ln.h;
  var rh = rn.h;
  if (lh > (rh + 2 | 0)) {
    return bal(ln.l, ln.v, joinShared(ln.r, v, rn));
  } else if (rh > (lh + 2 | 0)) {
    return bal(joinShared(ln, v, rn.l), rn.v, rn.r);
  } else {
    return create(ln, v, rn);
  }
}

function concatShared(t1, t2) {
  if (t1 === undefined) {
    return t2;
  }
  if (t2 === undefined) {
    return t1;
  }
  var v = {
    contents: t2.v
  };
  var t2r = removeMinAuxWithRef(t2, v);
  return joinShared(t1, v.contents, t2r);
}

function partitionSharedU(n, p) {
  if (n === undefined) {
    return [
            undefined,
            undefined
          ];
  }
  var value = n.v;
  var match = partitionSharedU(n.l, p);
  var lf = match[1];
  var lt = match[0];
  var pv = p(value);
  var match$1 = partitionSharedU(n.r, p);
  var rf = match$1[1];
  var rt = match$1[0];
  if (pv) {
    return [
            joinShared(lt, value, rt),
            concatShared(lf, rf)
          ];
  } else {
    return [
            concatShared(lt, rt),
            joinShared(lf, value, rf)
          ];
  }
}

function partitionShared(n, p) {
  return partitionSharedU(n, Curry.__1(p));
}

function lengthNode(n) {
  var l = n.l;
  var r = n.r;
  var sizeL = l !== undefined ? lengthNode(l) : 0;
  var sizeR = r !== undefined ? lengthNode(r) : 0;
  return (1 + sizeL | 0) + sizeR | 0;
}

function size(n) {
  if (n !== undefined) {
    return lengthNode(n);
  } else {
    return 0;
  }
}

function toListAux(_n, _accu) {
  while(true) {
    var accu = _accu;
    var n = _n;
    if (n === undefined) {
      return accu;
    }
    _accu = {
      hd: n.v,
      tl: toListAux(n.r, accu)
    };
    _n = n.l;
    continue ;
  };
}

function toList(s) {
  return toListAux(s, /* [] */0);
}

function checkInvariantInternal(_v) {
  while(true) {
    var v = _v;
    if (v === undefined) {
      return ;
    }
    var l = v.l;
    var r = v.r;
    var diff = (
      l !== undefined ? l.h : 0
    ) - (
      r !== undefined ? r.h : 0
    ) | 0;
    if (!(diff <= 2 && diff >= -2)) {
      throw {
            RE_EXN_ID: "Assert_failure",
            _1: [
              "belt_internalAVLset.ml",
              290,
              4
            ],
            Error: new Error()
          };
    }
    checkInvariantInternal(l);
    _v = r;
    continue ;
  };
}

function fillArray(_n, _i, arr) {
  while(true) {
    var i = _i;
    var n = _n;
    var v = n.v;
    var l = n.l;
    var r = n.r;
    var next = l !== undefined ? fillArray(l, i, arr) : i;
    arr[next] = v;
    var rnext = next + 1 | 0;
    if (r === undefined) {
      return rnext;
    }
    _i = rnext;
    _n = r;
    continue ;
  };
}

function fillArrayWithPartition(_n, cursor, arr, p) {
  while(true) {
    var n = _n;
    var v = n.v;
    var l = n.l;
    var r = n.r;
    if (l !== undefined) {
      fillArrayWithPartition(l, cursor, arr, p);
    }
    if (p(v)) {
      var c = cursor.forward;
      arr[c] = v;
      cursor.forward = c + 1 | 0;
    } else {
      var c$1 = cursor.backward;
      arr[c$1] = v;
      cursor.backward = c$1 - 1 | 0;
    }
    if (r === undefined) {
      return ;
    }
    _n = r;
    continue ;
  };
}

function fillArrayWithFilter(_n, _i, arr, p) {
  while(true) {
    var i = _i;
    var n = _n;
    var v = n.v;
    var l = n.l;
    var r = n.r;
    var next = l !== undefined ? fillArrayWithFilter(l, i, arr, p) : i;
    var rnext = p(v) ? (arr[next] = v, next + 1 | 0) : next;
    if (r === undefined) {
      return rnext;
    }
    _i = rnext;
    _n = r;
    continue ;
  };
}

function toArray(n) {
  if (n === undefined) {
    return [];
  }
  var size = lengthNode(n);
  var v = new Array(size);
  fillArray(n, 0, v);
  return v;
}

function fromSortedArrayRevAux(arr, off, len) {
  switch (len) {
    case 0 :
        return ;
    case 1 :
        return singleton(arr[off]);
    case 2 :
        var x0 = arr[off];
        var x1 = arr[off - 1 | 0];
        return {
                v: x1,
                h: 2,
                l: singleton(x0),
                r: undefined
              };
    case 3 :
        var x0$1 = arr[off];
        var x1$1 = arr[off - 1 | 0];
        var x2 = arr[off - 2 | 0];
        return {
                v: x1$1,
                h: 2,
                l: singleton(x0$1),
                r: singleton(x2)
              };
    default:
      var nl = len / 2 | 0;
      var left = fromSortedArrayRevAux(arr, off, nl);
      var mid = arr[off - nl | 0];
      var right = fromSortedArrayRevAux(arr, (off - nl | 0) - 1 | 0, (len - nl | 0) - 1 | 0);
      return create(left, mid, right);
  }
}

function fromSortedArrayAux(arr, off, len) {
  switch (len) {
    case 0 :
        return ;
    case 1 :
        return singleton(arr[off]);
    case 2 :
        var x0 = arr[off];
        var x1 = arr[off + 1 | 0];
        return {
                v: x1,
                h: 2,
                l: singleton(x0),
                r: undefined
              };
    case 3 :
        var x0$1 = arr[off];
        var x1$1 = arr[off + 1 | 0];
        var x2 = arr[off + 2 | 0];
        return {
                v: x1$1,
                h: 2,
                l: singleton(x0$1),
                r: singleton(x2)
              };
    default:
      var nl = len / 2 | 0;
      var left = fromSortedArrayAux(arr, off, nl);
      var mid = arr[off + nl | 0];
      var right = fromSortedArrayAux(arr, (off + nl | 0) + 1 | 0, (len - nl | 0) - 1 | 0);
      return create(left, mid, right);
  }
}

function fromSortedArrayUnsafe(arr) {
  return fromSortedArrayAux(arr, 0, arr.length);
}

function keepSharedU(n, p) {
  if (n === undefined) {
    return ;
  }
  var v = n.v;
  var l = n.l;
  var r = n.r;
  var newL = keepSharedU(l, p);
  var pv = p(v);
  var newR = keepSharedU(r, p);
  if (pv) {
    if (l === newL && r === newR) {
      return n;
    } else {
      return joinShared(newL, v, newR);
    }
  } else {
    return concatShared(newL, newR);
  }
}

function keepShared(n, p) {
  return keepSharedU(n, Curry.__1(p));
}

function keepCopyU(n, p) {
  if (n === undefined) {
    return ;
  }
  var size = lengthNode(n);
  var v = new Array(size);
  var last = fillArrayWithFilter(n, 0, v, p);
  return fromSortedArrayAux(v, 0, last);
}

function keepCopy(n, p) {
  return keepCopyU(n, Curry.__1(p));
}

function partitionCopyU(n, p) {
  if (n === undefined) {
    return [
            undefined,
            undefined
          ];
  }
  var size = lengthNode(n);
  var v = new Array(size);
  var backward = size - 1 | 0;
  var cursor = {
    forward: 0,
    backward: backward
  };
  fillArrayWithPartition(n, cursor, v, p);
  var forwardLen = cursor.forward;
  return [
          fromSortedArrayAux(v, 0, forwardLen),
          fromSortedArrayRevAux(v, backward, size - forwardLen | 0)
        ];
}

function partitionCopy(n, p) {
  return partitionCopyU(n, Curry.__1(p));
}

function has(_t, x, cmp) {
  while(true) {
    var t = _t;
    if (t === undefined) {
      return false;
    }
    var v = t.v;
    var c = cmp(x, v);
    if (c === 0) {
      return true;
    }
    _t = c < 0 ? t.l : t.r;
    continue ;
  };
}

function cmp(s1, s2, cmp$1) {
  var len1 = size(s1);
  var len2 = size(s2);
  if (len1 === len2) {
    var _e1 = stackAllLeft(s1, /* [] */0);
    var _e2 = stackAllLeft(s2, /* [] */0);
    while(true) {
      var e2 = _e2;
      var e1 = _e1;
      if (!e1) {
        return 0;
      }
      if (!e2) {
        return 0;
      }
      var h2 = e2.hd;
      var h1 = e1.hd;
      var c = cmp$1(h1.v, h2.v);
      if (c !== 0) {
        return c;
      }
      _e2 = stackAllLeft(h2.r, e2.tl);
      _e1 = stackAllLeft(h1.r, e1.tl);
      continue ;
    };
  } else if (len1 < len2) {
    return -1;
  } else {
    return 1;
  }
}

function eq(s1, s2, c) {
  return cmp(s1, s2, c) === 0;
}

function subset(_s1, _s2, cmp) {
  while(true) {
    var s2 = _s2;
    var s1 = _s1;
    if (s1 === undefined) {
      return true;
    }
    if (s2 === undefined) {
      return false;
    }
    var v1 = s1.v;
    var l1 = s1.l;
    var r1 = s1.r;
    var v2 = s2.v;
    var l2 = s2.l;
    var r2 = s2.r;
    var c = cmp(v1, v2);
    if (c === 0) {
      if (!subset(l1, l2, cmp)) {
        return false;
      }
      _s2 = r2;
      _s1 = r1;
      continue ;
    }
    if (c < 0) {
      if (!subset(create(l1, v1, undefined), l2, cmp)) {
        return false;
      }
      _s1 = r1;
      continue ;
    }
    if (!subset(create(undefined, v1, r1), r2, cmp)) {
      return false;
    }
    _s1 = l1;
    continue ;
  };
}

function get(_n, x, cmp) {
  while(true) {
    var n = _n;
    if (n === undefined) {
      return ;
    }
    var v = n.v;
    var c = cmp(x, v);
    if (c === 0) {
      return Caml_option.some(v);
    }
    _n = c < 0 ? n.l : n.r;
    continue ;
  };
}

function getUndefined(_n, x, cmp) {
  while(true) {
    var n = _n;
    if (n === undefined) {
      return ;
    }
    var v = n.v;
    var c = cmp(x, v);
    if (c === 0) {
      return v;
    }
    _n = c < 0 ? n.l : n.r;
    continue ;
  };
}

function getExn(_n, x, cmp) {
  while(true) {
    var n = _n;
    if (n !== undefined) {
      var v = n.v;
      var c = cmp(x, v);
      if (c === 0) {
        return v;
      }
      _n = c < 0 ? n.l : n.r;
      continue ;
    }
    throw {
          RE_EXN_ID: "Not_found",
          Error: new Error()
        };
  };
}

function rotateWithLeftChild(k2) {
  var k1 = k2.l;
  k2.l = k1.r;
  k1.r = k2;
  var n = k2.l;
  var hlk2 = n !== undefined ? n.h : 0;
  var n$1 = k2.r;
  var hrk2 = n$1 !== undefined ? n$1.h : 0;
  k2.h = (
    hlk2 > hrk2 ? hlk2 : hrk2
  ) + 1 | 0;
  var n$2 = k1.l;
  var hlk1 = n$2 !== undefined ? n$2.h : 0;
  var hk2 = k2.h;
  k1.h = (
    hlk1 > hk2 ? hlk1 : hk2
  ) + 1 | 0;
  return k1;
}

function rotateWithRightChild(k1) {
  var k2 = k1.r;
  k1.r = k2.l;
  k2.l = k1;
  var n = k1.l;
  var hlk1 = n !== undefined ? n.h : 0;
  var n$1 = k1.r;
  var hrk1 = n$1 !== undefined ? n$1.h : 0;
  k1.h = (
    hlk1 > hrk1 ? hlk1 : hrk1
  ) + 1 | 0;
  var n$2 = k2.r;
  var hrk2 = n$2 !== undefined ? n$2.h : 0;
  var hk1 = k1.h;
  k2.h = (
    hrk2 > hk1 ? hrk2 : hk1
  ) + 1 | 0;
  return k2;
}

function doubleWithLeftChild(k3) {
  var k3l = k3.l;
  var v = rotateWithRightChild(k3l);
  k3.l = v;
  return rotateWithLeftChild(k3);
}

function doubleWithRightChild(k2) {
  var k2r = k2.r;
  var v = rotateWithLeftChild(k2r);
  k2.r = v;
  return rotateWithRightChild(k2);
}

function heightUpdateMutate(t) {
  var n = t.l;
  var hlt = n !== undefined ? n.h : 0;
  var n$1 = t.r;
  var hrt = n$1 !== undefined ? n$1.h : 0;
  t.h = (
    hlt > hrt ? hlt : hrt
  ) + 1 | 0;
  return t;
}

function balMutate(nt) {
  var l = nt.l;
  var r = nt.r;
  var hl = l !== undefined ? l.h : 0;
  var hr = r !== undefined ? r.h : 0;
  if (hl > (2 + hr | 0)) {
    var ll = l.l;
    var lr = l.r;
    if (heightGe(ll, lr)) {
      return heightUpdateMutate(rotateWithLeftChild(nt));
    } else {
      return heightUpdateMutate(doubleWithLeftChild(nt));
    }
  }
  if (hr > (2 + hl | 0)) {
    var rl = r.l;
    var rr = r.r;
    if (heightGe(rr, rl)) {
      return heightUpdateMutate(rotateWithRightChild(nt));
    } else {
      return heightUpdateMutate(doubleWithRightChild(nt));
    }
  }
  nt.h = (
    hl > hr ? hl : hr
  ) + 1 | 0;
  return nt;
}

function addMutate(cmp, t, x) {
  if (t === undefined) {
    return singleton(x);
  }
  var k = t.v;
  var c = cmp(x, k);
  if (c === 0) {
    return t;
  }
  var l = t.l;
  var r = t.r;
  if (c < 0) {
    var ll = addMutate(cmp, l, x);
    t.l = ll;
  } else {
    t.r = addMutate(cmp, r, x);
  }
  return balMutate(t);
}

function fromArray(xs, cmp) {
  var len = xs.length;
  if (len === 0) {
    return ;
  }
  var next = Belt_SortArray.strictlySortedLengthU(xs, (function (x, y) {
          return cmp(x, y) < 0;
        }));
  var result;
  if (next >= 0) {
    result = fromSortedArrayAux(xs, 0, next);
  } else {
    next = -next | 0;
    result = fromSortedArrayRevAux(xs, next - 1 | 0, next);
  }
  for(var i = next; i < len; ++i){
    result = addMutate(cmp, result, xs[i]);
  }
  return result;
}

function removeMinAuxWithRootMutate(nt, n) {
  var ln = n.l;
  var rn = n.r;
  if (ln !== undefined) {
    n.l = removeMinAuxWithRootMutate(nt, ln);
    return balMutate(n);
  } else {
    nt.v = n.v;
    return rn;
  }
}

exports.copy = copy;
exports.create = create;
exports.bal = bal;
exports.singleton = singleton;
exports.minimum = minimum;
exports.minUndefined = minUndefined;
exports.maximum = maximum;
exports.maxUndefined = maxUndefined;
exports.removeMinAuxWithRef = removeMinAuxWithRef;
exports.isEmpty = isEmpty;
exports.stackAllLeft = stackAllLeft;
exports.forEachU = forEachU;
exports.forEach = forEach;
exports.reduceU = reduceU;
exports.reduce = reduce;
exports.everyU = everyU;
exports.every = every;
exports.someU = someU;
exports.some = some;
exports.joinShared = joinShared;
exports.concatShared = concatShared;
exports.keepSharedU = keepSharedU;
exports.keepShared = keepShared;
exports.keepCopyU = keepCopyU;
exports.keepCopy = keepCopy;
exports.partitionSharedU = partitionSharedU;
exports.partitionShared = partitionShared;
exports.partitionCopyU = partitionCopyU;
exports.partitionCopy = partitionCopy;
exports.lengthNode = lengthNode;
exports.size = size;
exports.toList = toList;
exports.checkInvariantInternal = checkInvariantInternal;
exports.fillArray = fillArray;
exports.toArray = toArray;
exports.fromSortedArrayAux = fromSortedArrayAux;
exports.fromSortedArrayRevAux = fromSortedArrayRevAux;
exports.fromSortedArrayUnsafe = fromSortedArrayUnsafe;
exports.has = has;
exports.cmp = cmp;
exports.eq = eq;
exports.subset = subset;
exports.get = get;
exports.getUndefined = getUndefined;
exports.getExn = getExn;
exports.fromArray = fromArray;
exports.addMutate = addMutate;
exports.balMutate = balMutate;
exports.removeMinAuxWithRootMutate = removeMinAuxWithRootMutate;
/* No side effect */


/***/ }),

/***/ "./node_modules/bs-platform/lib/js/belt_internalAVLtree.js":
/*!*****************************************************************!*\
  !*** ./node_modules/bs-platform/lib/js/belt_internalAVLtree.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Curry = __webpack_require__(/*! ./curry.js */ "./node_modules/bs-platform/lib/js/curry.js");
var Caml_option = __webpack_require__(/*! ./caml_option.js */ "./node_modules/bs-platform/lib/js/caml_option.js");
var Belt_SortArray = __webpack_require__(/*! ./belt_SortArray.js */ "./node_modules/bs-platform/lib/js/belt_SortArray.js");

function treeHeight(n) {
  if (n !== undefined) {
    return n.h;
  } else {
    return 0;
  }
}

function copy(n) {
  if (n !== undefined) {
    return {
            k: n.k,
            v: n.v,
            h: n.h,
            l: copy(n.l),
            r: copy(n.r)
          };
  } else {
    return n;
  }
}

function create(l, x, d, r) {
  var hl = treeHeight(l);
  var hr = treeHeight(r);
  return {
          k: x,
          v: d,
          h: hl >= hr ? hl + 1 | 0 : hr + 1 | 0,
          l: l,
          r: r
        };
}

function singleton(x, d) {
  return {
          k: x,
          v: d,
          h: 1,
          l: undefined,
          r: undefined
        };
}

function heightGe(l, r) {
  if (r !== undefined) {
    if (l !== undefined) {
      return l.h >= r.h;
    } else {
      return false;
    }
  } else {
    return true;
  }
}

function updateValue(n, newValue) {
  if (n.v === newValue) {
    return n;
  } else {
    return {
            k: n.k,
            v: newValue,
            h: n.h,
            l: n.l,
            r: n.r
          };
  }
}

function bal(l, x, d, r) {
  var hl = l !== undefined ? l.h : 0;
  var hr = r !== undefined ? r.h : 0;
  if (hl > (hr + 2 | 0)) {
    var ll = l.l;
    var lr = l.r;
    if (treeHeight(ll) >= treeHeight(lr)) {
      return create(ll, l.k, l.v, create(lr, x, d, r));
    } else {
      return create(create(ll, l.k, l.v, lr.l), lr.k, lr.v, create(lr.r, x, d, r));
    }
  }
  if (hr <= (hl + 2 | 0)) {
    return {
            k: x,
            v: d,
            h: hl >= hr ? hl + 1 | 0 : hr + 1 | 0,
            l: l,
            r: r
          };
  }
  var rl = r.l;
  var rr = r.r;
  if (treeHeight(rr) >= treeHeight(rl)) {
    return create(create(l, x, d, rl), r.k, r.v, rr);
  } else {
    return create(create(l, x, d, rl.l), rl.k, rl.v, create(rl.r, r.k, r.v, rr));
  }
}

function minKey0Aux(_n) {
  while(true) {
    var n = _n;
    var n$1 = n.l;
    if (n$1 === undefined) {
      return n.k;
    }
    _n = n$1;
    continue ;
  };
}

function minKey(n) {
  if (n !== undefined) {
    return Caml_option.some(minKey0Aux(n));
  }
  
}

function minKeyUndefined(n) {
  if (n !== undefined) {
    return minKey0Aux(n);
  }
  
}

function maxKey0Aux(_n) {
  while(true) {
    var n = _n;
    var n$1 = n.r;
    if (n$1 === undefined) {
      return n.k;
    }
    _n = n$1;
    continue ;
  };
}

function maxKey(n) {
  if (n !== undefined) {
    return Caml_option.some(maxKey0Aux(n));
  }
  
}

function maxKeyUndefined(n) {
  if (n !== undefined) {
    return maxKey0Aux(n);
  }
  
}

function minKV0Aux(_n) {
  while(true) {
    var n = _n;
    var n$1 = n.l;
    if (n$1 === undefined) {
      return [
              n.k,
              n.v
            ];
    }
    _n = n$1;
    continue ;
  };
}

function minimum(n) {
  if (n !== undefined) {
    return minKV0Aux(n);
  }
  
}

function minUndefined(n) {
  if (n !== undefined) {
    return minKV0Aux(n);
  }
  
}

function maxKV0Aux(_n) {
  while(true) {
    var n = _n;
    var n$1 = n.r;
    if (n$1 === undefined) {
      return [
              n.k,
              n.v
            ];
    }
    _n = n$1;
    continue ;
  };
}

function maximum(n) {
  if (n !== undefined) {
    return maxKV0Aux(n);
  }
  
}

function maxUndefined(n) {
  if (n !== undefined) {
    return maxKV0Aux(n);
  }
  
}

function removeMinAuxWithRef(n, kr, vr) {
  var ln = n.l;
  if (ln !== undefined) {
    return bal(removeMinAuxWithRef(ln, kr, vr), n.k, n.v, n.r);
  } else {
    kr.contents = n.k;
    vr.contents = n.v;
    return n.r;
  }
}

function isEmpty(x) {
  return x === undefined;
}

function stackAllLeft(_v, _s) {
  while(true) {
    var s = _s;
    var v = _v;
    if (v === undefined) {
      return s;
    }
    _s = {
      hd: v,
      tl: s
    };
    _v = v.l;
    continue ;
  };
}

function findFirstByU(n, p) {
  if (n === undefined) {
    return ;
  }
  var left = findFirstByU(n.l, p);
  if (left !== undefined) {
    return left;
  }
  var v = n.k;
  var d = n.v;
  var pvd = p(v, d);
  if (pvd) {
    return [
            v,
            d
          ];
  }
  var right = findFirstByU(n.r, p);
  if (right !== undefined) {
    return right;
  }
  
}

function findFirstBy(n, p) {
  return findFirstByU(n, Curry.__2(p));
}

function forEachU(_n, f) {
  while(true) {
    var n = _n;
    if (n === undefined) {
      return ;
    }
    forEachU(n.l, f);
    f(n.k, n.v);
    _n = n.r;
    continue ;
  };
}

function forEach(n, f) {
  return forEachU(n, Curry.__2(f));
}

function mapU(n, f) {
  if (n === undefined) {
    return ;
  }
  var newLeft = mapU(n.l, f);
  var newD = f(n.v);
  var newRight = mapU(n.r, f);
  return {
          k: n.k,
          v: newD,
          h: n.h,
          l: newLeft,
          r: newRight
        };
}

function map(n, f) {
  return mapU(n, Curry.__1(f));
}

function mapWithKeyU(n, f) {
  if (n === undefined) {
    return ;
  }
  var key = n.k;
  var newLeft = mapWithKeyU(n.l, f);
  var newD = f(key, n.v);
  var newRight = mapWithKeyU(n.r, f);
  return {
          k: key,
          v: newD,
          h: n.h,
          l: newLeft,
          r: newRight
        };
}

function mapWithKey(n, f) {
  return mapWithKeyU(n, Curry.__2(f));
}

function reduceU(_m, _accu, f) {
  while(true) {
    var accu = _accu;
    var m = _m;
    if (m === undefined) {
      return accu;
    }
    var v = m.k;
    var d = m.v;
    var l = m.l;
    var r = m.r;
    _accu = f(reduceU(l, accu, f), v, d);
    _m = r;
    continue ;
  };
}

function reduce(m, accu, f) {
  return reduceU(m, accu, Curry.__3(f));
}

function everyU(_n, p) {
  while(true) {
    var n = _n;
    if (n === undefined) {
      return true;
    }
    if (!p(n.k, n.v)) {
      return false;
    }
    if (!everyU(n.l, p)) {
      return false;
    }
    _n = n.r;
    continue ;
  };
}

function every(n, p) {
  return everyU(n, Curry.__2(p));
}

function someU(_n, p) {
  while(true) {
    var n = _n;
    if (n === undefined) {
      return false;
    }
    if (p(n.k, n.v)) {
      return true;
    }
    if (someU(n.l, p)) {
      return true;
    }
    _n = n.r;
    continue ;
  };
}

function some(n, p) {
  return someU(n, Curry.__2(p));
}

function addMinElement(n, k, v) {
  if (n !== undefined) {
    return bal(addMinElement(n.l, k, v), n.k, n.v, n.r);
  } else {
    return singleton(k, v);
  }
}

function addMaxElement(n, k, v) {
  if (n !== undefined) {
    return bal(n.l, n.k, n.v, addMaxElement(n.r, k, v));
  } else {
    return singleton(k, v);
  }
}

function join(ln, v, d, rn) {
  if (ln === undefined) {
    return addMinElement(rn, v, d);
  }
  if (rn === undefined) {
    return addMaxElement(ln, v, d);
  }
  var lv = ln.k;
  var ld = ln.v;
  var lh = ln.h;
  var ll = ln.l;
  var lr = ln.r;
  var rv = rn.k;
  var rd = rn.v;
  var rh = rn.h;
  var rl = rn.l;
  var rr = rn.r;
  if (lh > (rh + 2 | 0)) {
    return bal(ll, lv, ld, join(lr, v, d, rn));
  } else if (rh > (lh + 2 | 0)) {
    return bal(join(ln, v, d, rl), rv, rd, rr);
  } else {
    return create(ln, v, d, rn);
  }
}

function concat(t1, t2) {
  if (t1 === undefined) {
    return t2;
  }
  if (t2 === undefined) {
    return t1;
  }
  var kr = {
    contents: t2.k
  };
  var vr = {
    contents: t2.v
  };
  var t2r = removeMinAuxWithRef(t2, kr, vr);
  return join(t1, kr.contents, vr.contents, t2r);
}

function concatOrJoin(t1, v, d, t2) {
  if (d !== undefined) {
    return join(t1, v, Caml_option.valFromOption(d), t2);
  } else {
    return concat(t1, t2);
  }
}

function keepSharedU(n, p) {
  if (n === undefined) {
    return ;
  }
  var v = n.k;
  var d = n.v;
  var newLeft = keepSharedU(n.l, p);
  var pvd = p(v, d);
  var newRight = keepSharedU(n.r, p);
  if (pvd) {
    return join(newLeft, v, d, newRight);
  } else {
    return concat(newLeft, newRight);
  }
}

function keepShared(n, p) {
  return keepSharedU(n, Curry.__2(p));
}

function keepMapU(n, p) {
  if (n === undefined) {
    return ;
  }
  var v = n.k;
  var d = n.v;
  var newLeft = keepMapU(n.l, p);
  var pvd = p(v, d);
  var newRight = keepMapU(n.r, p);
  if (pvd !== undefined) {
    return join(newLeft, v, Caml_option.valFromOption(pvd), newRight);
  } else {
    return concat(newLeft, newRight);
  }
}

function keepMap(n, p) {
  return keepMapU(n, Curry.__2(p));
}

function partitionSharedU(n, p) {
  if (n === undefined) {
    return [
            undefined,
            undefined
          ];
  }
  var key = n.k;
  var value = n.v;
  var match = partitionSharedU(n.l, p);
  var lf = match[1];
  var lt = match[0];
  var pvd = p(key, value);
  var match$1 = partitionSharedU(n.r, p);
  var rf = match$1[1];
  var rt = match$1[0];
  if (pvd) {
    return [
            join(lt, key, value, rt),
            concat(lf, rf)
          ];
  } else {
    return [
            concat(lt, rt),
            join(lf, key, value, rf)
          ];
  }
}

function partitionShared(n, p) {
  return partitionSharedU(n, Curry.__2(p));
}

function lengthNode(n) {
  var l = n.l;
  var r = n.r;
  var sizeL = l !== undefined ? lengthNode(l) : 0;
  var sizeR = r !== undefined ? lengthNode(r) : 0;
  return (1 + sizeL | 0) + sizeR | 0;
}

function size(n) {
  if (n !== undefined) {
    return lengthNode(n);
  } else {
    return 0;
  }
}

function toListAux(_n, _accu) {
  while(true) {
    var accu = _accu;
    var n = _n;
    if (n === undefined) {
      return accu;
    }
    var k = n.k;
    var v = n.v;
    var l = n.l;
    var r = n.r;
    _accu = {
      hd: [
        k,
        v
      ],
      tl: toListAux(r, accu)
    };
    _n = l;
    continue ;
  };
}

function toList(s) {
  return toListAux(s, /* [] */0);
}

function checkInvariantInternal(_v) {
  while(true) {
    var v = _v;
    if (v === undefined) {
      return ;
    }
    var l = v.l;
    var r = v.r;
    var diff = treeHeight(l) - treeHeight(r) | 0;
    if (!(diff <= 2 && diff >= -2)) {
      throw {
            RE_EXN_ID: "Assert_failure",
            _1: [
              "belt_internalAVLtree.ml",
              373,
              4
            ],
            Error: new Error()
          };
    }
    checkInvariantInternal(l);
    _v = r;
    continue ;
  };
}

function fillArrayKey(_n, _i, arr) {
  while(true) {
    var i = _i;
    var n = _n;
    var v = n.k;
    var l = n.l;
    var r = n.r;
    var next = l !== undefined ? fillArrayKey(l, i, arr) : i;
    arr[next] = v;
    var rnext = next + 1 | 0;
    if (r === undefined) {
      return rnext;
    }
    _i = rnext;
    _n = r;
    continue ;
  };
}

function fillArrayValue(_n, _i, arr) {
  while(true) {
    var i = _i;
    var n = _n;
    var l = n.l;
    var r = n.r;
    var next = l !== undefined ? fillArrayValue(l, i, arr) : i;
    arr[next] = n.v;
    var rnext = next + 1 | 0;
    if (r === undefined) {
      return rnext;
    }
    _i = rnext;
    _n = r;
    continue ;
  };
}

function fillArray(_n, _i, arr) {
  while(true) {
    var i = _i;
    var n = _n;
    var l = n.l;
    var v = n.k;
    var r = n.r;
    var next = l !== undefined ? fillArray(l, i, arr) : i;
    arr[next] = [
      v,
      n.v
    ];
    var rnext = next + 1 | 0;
    if (r === undefined) {
      return rnext;
    }
    _i = rnext;
    _n = r;
    continue ;
  };
}

function toArray(n) {
  if (n === undefined) {
    return [];
  }
  var size = lengthNode(n);
  var v = new Array(size);
  fillArray(n, 0, v);
  return v;
}

function keysToArray(n) {
  if (n === undefined) {
    return [];
  }
  var size = lengthNode(n);
  var v = new Array(size);
  fillArrayKey(n, 0, v);
  return v;
}

function valuesToArray(n) {
  if (n === undefined) {
    return [];
  }
  var size = lengthNode(n);
  var v = new Array(size);
  fillArrayValue(n, 0, v);
  return v;
}

function fromSortedArrayRevAux(arr, off, len) {
  switch (len) {
    case 0 :
        return ;
    case 1 :
        var match = arr[off];
        return singleton(match[0], match[1]);
    case 2 :
        var match_0 = arr[off];
        var match_1 = arr[off - 1 | 0];
        var match$1 = match_1;
        var match$2 = match_0;
        return {
                k: match$1[0],
                v: match$1[1],
                h: 2,
                l: singleton(match$2[0], match$2[1]),
                r: undefined
              };
    case 3 :
        var match_0$1 = arr[off];
        var match_1$1 = arr[off - 1 | 0];
        var match_2 = arr[off - 2 | 0];
        var match$3 = match_2;
        var match$4 = match_1$1;
        var match$5 = match_0$1;
        return {
                k: match$4[0],
                v: match$4[1],
                h: 2,
                l: singleton(match$5[0], match$5[1]),
                r: singleton(match$3[0], match$3[1])
              };
    default:
      var nl = len / 2 | 0;
      var left = fromSortedArrayRevAux(arr, off, nl);
      var match$6 = arr[off - nl | 0];
      var right = fromSortedArrayRevAux(arr, (off - nl | 0) - 1 | 0, (len - nl | 0) - 1 | 0);
      return create(left, match$6[0], match$6[1], right);
  }
}

function fromSortedArrayAux(arr, off, len) {
  switch (len) {
    case 0 :
        return ;
    case 1 :
        var match = arr[off];
        return singleton(match[0], match[1]);
    case 2 :
        var match_0 = arr[off];
        var match_1 = arr[off + 1 | 0];
        var match$1 = match_1;
        var match$2 = match_0;
        return {
                k: match$1[0],
                v: match$1[1],
                h: 2,
                l: singleton(match$2[0], match$2[1]),
                r: undefined
              };
    case 3 :
        var match_0$1 = arr[off];
        var match_1$1 = arr[off + 1 | 0];
        var match_2 = arr[off + 2 | 0];
        var match$3 = match_2;
        var match$4 = match_1$1;
        var match$5 = match_0$1;
        return {
                k: match$4[0],
                v: match$4[1],
                h: 2,
                l: singleton(match$5[0], match$5[1]),
                r: singleton(match$3[0], match$3[1])
              };
    default:
      var nl = len / 2 | 0;
      var left = fromSortedArrayAux(arr, off, nl);
      var match$6 = arr[off + nl | 0];
      var right = fromSortedArrayAux(arr, (off + nl | 0) + 1 | 0, (len - nl | 0) - 1 | 0);
      return create(left, match$6[0], match$6[1], right);
  }
}

function fromSortedArrayUnsafe(arr) {
  return fromSortedArrayAux(arr, 0, arr.length);
}

function cmpU(s1, s2, kcmp, vcmp) {
  var len1 = size(s1);
  var len2 = size(s2);
  if (len1 === len2) {
    var _e1 = stackAllLeft(s1, /* [] */0);
    var _e2 = stackAllLeft(s2, /* [] */0);
    while(true) {
      var e2 = _e2;
      var e1 = _e1;
      if (!e1) {
        return 0;
      }
      if (!e2) {
        return 0;
      }
      var h2 = e2.hd;
      var h1 = e1.hd;
      var c = kcmp(h1.k, h2.k);
      if (c !== 0) {
        return c;
      }
      var cx = vcmp(h1.v, h2.v);
      if (cx !== 0) {
        return cx;
      }
      _e2 = stackAllLeft(h2.r, e2.tl);
      _e1 = stackAllLeft(h1.r, e1.tl);
      continue ;
    };
  } else if (len1 < len2) {
    return -1;
  } else {
    return 1;
  }
}

function cmp(s1, s2, kcmp, vcmp) {
  return cmpU(s1, s2, kcmp, Curry.__2(vcmp));
}

function eqU(s1, s2, kcmp, veq) {
  var len1 = size(s1);
  var len2 = size(s2);
  if (len1 === len2) {
    var _e1 = stackAllLeft(s1, /* [] */0);
    var _e2 = stackAllLeft(s2, /* [] */0);
    while(true) {
      var e2 = _e2;
      var e1 = _e1;
      if (!e1) {
        return true;
      }
      if (!e2) {
        return true;
      }
      var h2 = e2.hd;
      var h1 = e1.hd;
      if (!(kcmp(h1.k, h2.k) === 0 && veq(h1.v, h2.v))) {
        return false;
      }
      _e2 = stackAllLeft(h2.r, e2.tl);
      _e1 = stackAllLeft(h1.r, e1.tl);
      continue ;
    };
  } else {
    return false;
  }
}

function eq(s1, s2, kcmp, veq) {
  return eqU(s1, s2, kcmp, Curry.__2(veq));
}

function get(_n, x, cmp) {
  while(true) {
    var n = _n;
    if (n === undefined) {
      return ;
    }
    var v = n.k;
    var c = cmp(x, v);
    if (c === 0) {
      return Caml_option.some(n.v);
    }
    _n = c < 0 ? n.l : n.r;
    continue ;
  };
}

function getUndefined(_n, x, cmp) {
  while(true) {
    var n = _n;
    if (n === undefined) {
      return ;
    }
    var v = n.k;
    var c = cmp(x, v);
    if (c === 0) {
      return n.v;
    }
    _n = c < 0 ? n.l : n.r;
    continue ;
  };
}

function getExn(_n, x, cmp) {
  while(true) {
    var n = _n;
    if (n !== undefined) {
      var v = n.k;
      var c = cmp(x, v);
      if (c === 0) {
        return n.v;
      }
      _n = c < 0 ? n.l : n.r;
      continue ;
    }
    throw {
          RE_EXN_ID: "Not_found",
          Error: new Error()
        };
  };
}

function getWithDefault(_n, x, def, cmp) {
  while(true) {
    var n = _n;
    if (n === undefined) {
      return def;
    }
    var v = n.k;
    var c = cmp(x, v);
    if (c === 0) {
      return n.v;
    }
    _n = c < 0 ? n.l : n.r;
    continue ;
  };
}

function has(_n, x, cmp) {
  while(true) {
    var n = _n;
    if (n === undefined) {
      return false;
    }
    var v = n.k;
    var c = cmp(x, v);
    if (c === 0) {
      return true;
    }
    _n = c < 0 ? n.l : n.r;
    continue ;
  };
}

function rotateWithLeftChild(k2) {
  var k1 = k2.l;
  k2.l = k1.r;
  k1.r = k2;
  var hlk2 = treeHeight(k2.l);
  var hrk2 = treeHeight(k2.r);
  k2.h = (
    hlk2 > hrk2 ? hlk2 : hrk2
  ) + 1 | 0;
  var hlk1 = treeHeight(k1.l);
  var hk2 = k2.h;
  k1.h = (
    hlk1 > hk2 ? hlk1 : hk2
  ) + 1 | 0;
  return k1;
}

function rotateWithRightChild(k1) {
  var k2 = k1.r;
  k1.r = k2.l;
  k2.l = k1;
  var hlk1 = treeHeight(k1.l);
  var hrk1 = treeHeight(k1.r);
  k1.h = (
    hlk1 > hrk1 ? hlk1 : hrk1
  ) + 1 | 0;
  var hrk2 = treeHeight(k2.r);
  var hk1 = k1.h;
  k2.h = (
    hrk2 > hk1 ? hrk2 : hk1
  ) + 1 | 0;
  return k2;
}

function doubleWithLeftChild(k3) {
  var x = k3.l;
  var v = rotateWithRightChild(x);
  k3.l = v;
  return rotateWithLeftChild(k3);
}

function doubleWithRightChild(k2) {
  var x = k2.r;
  var v = rotateWithLeftChild(x);
  k2.r = v;
  return rotateWithRightChild(k2);
}

function heightUpdateMutate(t) {
  var hlt = treeHeight(t.l);
  var hrt = treeHeight(t.r);
  t.h = (
    hlt > hrt ? hlt : hrt
  ) + 1 | 0;
  return t;
}

function balMutate(nt) {
  var l = nt.l;
  var r = nt.r;
  var hl = treeHeight(l);
  var hr = treeHeight(r);
  if (hl > (2 + hr | 0)) {
    var ll = l.l;
    var lr = l.r;
    if (heightGe(ll, lr)) {
      return heightUpdateMutate(rotateWithLeftChild(nt));
    } else {
      return heightUpdateMutate(doubleWithLeftChild(nt));
    }
  }
  if (hr > (2 + hl | 0)) {
    var rl = r.l;
    var rr = r.r;
    if (heightGe(rr, rl)) {
      return heightUpdateMutate(rotateWithRightChild(nt));
    } else {
      return heightUpdateMutate(doubleWithRightChild(nt));
    }
  }
  nt.h = (
    hl > hr ? hl : hr
  ) + 1 | 0;
  return nt;
}

function updateMutate(t, x, data, cmp) {
  if (t === undefined) {
    return singleton(x, data);
  }
  var k = t.k;
  var c = cmp(x, k);
  if (c === 0) {
    t.v = data;
    return t;
  }
  var l = t.l;
  var r = t.r;
  if (c < 0) {
    var ll = updateMutate(l, x, data, cmp);
    t.l = ll;
  } else {
    t.r = updateMutate(r, x, data, cmp);
  }
  return balMutate(t);
}

function fromArray(xs, cmp) {
  var len = xs.length;
  if (len === 0) {
    return ;
  }
  var next = Belt_SortArray.strictlySortedLengthU(xs, (function (param, param$1) {
          return cmp(param[0], param$1[0]) < 0;
        }));
  var result;
  if (next >= 0) {
    result = fromSortedArrayAux(xs, 0, next);
  } else {
    next = -next | 0;
    result = fromSortedArrayRevAux(xs, next - 1 | 0, next);
  }
  for(var i = next; i < len; ++i){
    var match = xs[i];
    result = updateMutate(result, match[0], match[1], cmp);
  }
  return result;
}

function removeMinAuxWithRootMutate(nt, n) {
  var rn = n.r;
  var ln = n.l;
  if (ln !== undefined) {
    n.l = removeMinAuxWithRootMutate(nt, ln);
    return balMutate(n);
  } else {
    nt.k = n.k;
    nt.v = n.v;
    return rn;
  }
}

exports.copy = copy;
exports.create = create;
exports.bal = bal;
exports.singleton = singleton;
exports.updateValue = updateValue;
exports.minKey = minKey;
exports.minKeyUndefined = minKeyUndefined;
exports.maxKey = maxKey;
exports.maxKeyUndefined = maxKeyUndefined;
exports.minimum = minimum;
exports.minUndefined = minUndefined;
exports.maximum = maximum;
exports.maxUndefined = maxUndefined;
exports.removeMinAuxWithRef = removeMinAuxWithRef;
exports.isEmpty = isEmpty;
exports.stackAllLeft = stackAllLeft;
exports.findFirstByU = findFirstByU;
exports.findFirstBy = findFirstBy;
exports.forEachU = forEachU;
exports.forEach = forEach;
exports.mapU = mapU;
exports.map = map;
exports.mapWithKeyU = mapWithKeyU;
exports.mapWithKey = mapWithKey;
exports.reduceU = reduceU;
exports.reduce = reduce;
exports.everyU = everyU;
exports.every = every;
exports.someU = someU;
exports.some = some;
exports.join = join;
exports.concat = concat;
exports.concatOrJoin = concatOrJoin;
exports.keepSharedU = keepSharedU;
exports.keepShared = keepShared;
exports.keepMapU = keepMapU;
exports.keepMap = keepMap;
exports.partitionSharedU = partitionSharedU;
exports.partitionShared = partitionShared;
exports.lengthNode = lengthNode;
exports.size = size;
exports.toList = toList;
exports.checkInvariantInternal = checkInvariantInternal;
exports.fillArray = fillArray;
exports.toArray = toArray;
exports.keysToArray = keysToArray;
exports.valuesToArray = valuesToArray;
exports.fromSortedArrayAux = fromSortedArrayAux;
exports.fromSortedArrayRevAux = fromSortedArrayRevAux;
exports.fromSortedArrayUnsafe = fromSortedArrayUnsafe;
exports.cmpU = cmpU;
exports.cmp = cmp;
exports.eqU = eqU;
exports.eq = eq;
exports.get = get;
exports.getUndefined = getUndefined;
exports.getWithDefault = getWithDefault;
exports.getExn = getExn;
exports.has = has;
exports.fromArray = fromArray;
exports.updateMutate = updateMutate;
exports.balMutate = balMutate;
exports.removeMinAuxWithRootMutate = removeMinAuxWithRootMutate;
/* No side effect */


/***/ }),

/***/ "./node_modules/bs-platform/lib/js/belt_internalMapInt.js":
/*!****************************************************************!*\
  !*** ./node_modules/bs-platform/lib/js/belt_internalMapInt.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Curry = __webpack_require__(/*! ./curry.js */ "./node_modules/bs-platform/lib/js/curry.js");
var Caml_option = __webpack_require__(/*! ./caml_option.js */ "./node_modules/bs-platform/lib/js/caml_option.js");
var Belt_SortArray = __webpack_require__(/*! ./belt_SortArray.js */ "./node_modules/bs-platform/lib/js/belt_SortArray.js");
var Caml_primitive = __webpack_require__(/*! ./caml_primitive.js */ "./node_modules/bs-platform/lib/js/caml_primitive.js");
var Belt_internalAVLtree = __webpack_require__(/*! ./belt_internalAVLtree.js */ "./node_modules/bs-platform/lib/js/belt_internalAVLtree.js");

function add(t, x, data) {
  if (t === undefined) {
    return Belt_internalAVLtree.singleton(x, data);
  }
  var k = t.k;
  if (x === k) {
    return Belt_internalAVLtree.updateValue(t, data);
  }
  var v = t.v;
  if (x < k) {
    return Belt_internalAVLtree.bal(add(t.l, x, data), k, v, t.r);
  } else {
    return Belt_internalAVLtree.bal(t.l, k, v, add(t.r, x, data));
  }
}

function get(_n, x) {
  while(true) {
    var n = _n;
    if (n === undefined) {
      return ;
    }
    var v = n.k;
    if (x === v) {
      return Caml_option.some(n.v);
    }
    _n = x < v ? n.l : n.r;
    continue ;
  };
}

function getUndefined(_n, x) {
  while(true) {
    var n = _n;
    if (n === undefined) {
      return ;
    }
    var v = n.k;
    if (x === v) {
      return n.v;
    }
    _n = x < v ? n.l : n.r;
    continue ;
  };
}

function getExn(_n, x) {
  while(true) {
    var n = _n;
    if (n !== undefined) {
      var v = n.k;
      if (x === v) {
        return n.v;
      }
      _n = x < v ? n.l : n.r;
      continue ;
    }
    throw {
          RE_EXN_ID: "Not_found",
          Error: new Error()
        };
  };
}

function getWithDefault(_n, x, def) {
  while(true) {
    var n = _n;
    if (n === undefined) {
      return def;
    }
    var v = n.k;
    if (x === v) {
      return n.v;
    }
    _n = x < v ? n.l : n.r;
    continue ;
  };
}

function has(_n, x) {
  while(true) {
    var n = _n;
    if (n === undefined) {
      return false;
    }
    var v = n.k;
    if (x === v) {
      return true;
    }
    _n = x < v ? n.l : n.r;
    continue ;
  };
}

function remove(n, x) {
  if (n === undefined) {
    return n;
  }
  var v = n.k;
  var l = n.l;
  var r = n.r;
  if (x !== v) {
    if (x < v) {
      return Belt_internalAVLtree.bal(remove(l, x), v, n.v, r);
    } else {
      return Belt_internalAVLtree.bal(l, v, n.v, remove(r, x));
    }
  }
  if (l === undefined) {
    return r;
  }
  if (r === undefined) {
    return l;
  }
  var kr = {
    contents: r.k
  };
  var vr = {
    contents: r.v
  };
  var r$1 = Belt_internalAVLtree.removeMinAuxWithRef(r, kr, vr);
  return Belt_internalAVLtree.bal(l, kr.contents, vr.contents, r$1);
}

function splitAux(x, n) {
  var v = n.k;
  var d = n.v;
  var l = n.l;
  var r = n.r;
  if (x === v) {
    return [
            l,
            Caml_option.some(d),
            r
          ];
  }
  if (x < v) {
    if (l === undefined) {
      return [
              undefined,
              undefined,
              n
            ];
    }
    var match = splitAux(x, l);
    return [
            match[0],
            match[1],
            Belt_internalAVLtree.join(match[2], v, d, r)
          ];
  }
  if (r === undefined) {
    return [
            n,
            undefined,
            undefined
          ];
  }
  var match$1 = splitAux(x, r);
  return [
          Belt_internalAVLtree.join(l, v, d, match$1[0]),
          match$1[1],
          match$1[2]
        ];
}

function split(x, n) {
  if (n !== undefined) {
    return splitAux(x, n);
  } else {
    return [
            undefined,
            undefined,
            undefined
          ];
  }
}

function mergeU(s1, s2, f) {
  if (s1 !== undefined) {
    if (s1.h >= (
        s2 !== undefined ? s2.h : 0
      )) {
      var v1 = s1.k;
      var d1 = s1.v;
      var l1 = s1.l;
      var r1 = s1.r;
      var match = split(v1, s2);
      return Belt_internalAVLtree.concatOrJoin(mergeU(l1, match[0], f), v1, f(v1, Caml_option.some(d1), match[1]), mergeU(r1, match[2], f));
    }
    
  } else if (s2 === undefined) {
    return ;
  }
  var v2 = s2.k;
  var d2 = s2.v;
  var l2 = s2.l;
  var r2 = s2.r;
  var match$1 = split(v2, s1);
  return Belt_internalAVLtree.concatOrJoin(mergeU(match$1[0], l2, f), v2, f(v2, match$1[1], Caml_option.some(d2)), mergeU(match$1[2], r2, f));
}

function merge(s1, s2, f) {
  return mergeU(s1, s2, Curry.__3(f));
}

function compareAux(_e1, _e2, vcmp) {
  while(true) {
    var e2 = _e2;
    var e1 = _e1;
    if (!e1) {
      return 0;
    }
    if (!e2) {
      return 0;
    }
    var h2 = e2.hd;
    var h1 = e1.hd;
    var c = Caml_primitive.caml_int_compare(h1.k, h2.k);
    if (c !== 0) {
      return c;
    }
    var cx = vcmp(h1.v, h2.v);
    if (cx !== 0) {
      return cx;
    }
    _e2 = Belt_internalAVLtree.stackAllLeft(h2.r, e2.tl);
    _e1 = Belt_internalAVLtree.stackAllLeft(h1.r, e1.tl);
    continue ;
  };
}

function cmpU(s1, s2, cmp) {
  var len1 = Belt_internalAVLtree.size(s1);
  var len2 = Belt_internalAVLtree.size(s2);
  if (len1 === len2) {
    return compareAux(Belt_internalAVLtree.stackAllLeft(s1, /* [] */0), Belt_internalAVLtree.stackAllLeft(s2, /* [] */0), cmp);
  } else if (len1 < len2) {
    return -1;
  } else {
    return 1;
  }
}

function cmp(s1, s2, f) {
  return cmpU(s1, s2, Curry.__2(f));
}

function eqAux(_e1, _e2, eq) {
  while(true) {
    var e2 = _e2;
    var e1 = _e1;
    if (!e1) {
      return true;
    }
    if (!e2) {
      return true;
    }
    var h2 = e2.hd;
    var h1 = e1.hd;
    if (!(h1.k === h2.k && eq(h1.v, h2.v))) {
      return false;
    }
    _e2 = Belt_internalAVLtree.stackAllLeft(h2.r, e2.tl);
    _e1 = Belt_internalAVLtree.stackAllLeft(h1.r, e1.tl);
    continue ;
  };
}

function eqU(s1, s2, eq) {
  var len1 = Belt_internalAVLtree.size(s1);
  var len2 = Belt_internalAVLtree.size(s2);
  if (len1 === len2) {
    return eqAux(Belt_internalAVLtree.stackAllLeft(s1, /* [] */0), Belt_internalAVLtree.stackAllLeft(s2, /* [] */0), eq);
  } else {
    return false;
  }
}

function eq(s1, s2, f) {
  return eqU(s1, s2, Curry.__2(f));
}

function addMutate(t, x, data) {
  if (t === undefined) {
    return Belt_internalAVLtree.singleton(x, data);
  }
  var k = t.k;
  if (x === k) {
    t.k = x;
    t.v = data;
    return t;
  }
  var l = t.l;
  var r = t.r;
  if (x < k) {
    var ll = addMutate(l, x, data);
    t.l = ll;
  } else {
    t.r = addMutate(r, x, data);
  }
  return Belt_internalAVLtree.balMutate(t);
}

function fromArray(xs) {
  var len = xs.length;
  if (len === 0) {
    return ;
  }
  var next = Belt_SortArray.strictlySortedLengthU(xs, (function (param, param$1) {
          return param[0] < param$1[0];
        }));
  var result;
  if (next >= 0) {
    result = Belt_internalAVLtree.fromSortedArrayAux(xs, 0, next);
  } else {
    next = -next | 0;
    result = Belt_internalAVLtree.fromSortedArrayRevAux(xs, next - 1 | 0, next);
  }
  for(var i = next; i < len; ++i){
    var match = xs[i];
    result = addMutate(result, match[0], match[1]);
  }
  return result;
}

var N;

var A;

var S;

exports.N = N;
exports.A = A;
exports.S = S;
exports.add = add;
exports.get = get;
exports.getUndefined = getUndefined;
exports.getExn = getExn;
exports.getWithDefault = getWithDefault;
exports.has = has;
exports.remove = remove;
exports.splitAux = splitAux;
exports.split = split;
exports.mergeU = mergeU;
exports.merge = merge;
exports.compareAux = compareAux;
exports.cmpU = cmpU;
exports.cmp = cmp;
exports.eqAux = eqAux;
exports.eqU = eqU;
exports.eq = eq;
exports.addMutate = addMutate;
exports.fromArray = fromArray;
/* No side effect */


/***/ }),

/***/ "./node_modules/bs-platform/lib/js/belt_internalMapString.js":
/*!*******************************************************************!*\
  !*** ./node_modules/bs-platform/lib/js/belt_internalMapString.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Curry = __webpack_require__(/*! ./curry.js */ "./node_modules/bs-platform/lib/js/curry.js");
var Caml_option = __webpack_require__(/*! ./caml_option.js */ "./node_modules/bs-platform/lib/js/caml_option.js");
var Belt_SortArray = __webpack_require__(/*! ./belt_SortArray.js */ "./node_modules/bs-platform/lib/js/belt_SortArray.js");
var Caml_primitive = __webpack_require__(/*! ./caml_primitive.js */ "./node_modules/bs-platform/lib/js/caml_primitive.js");
var Belt_internalAVLtree = __webpack_require__(/*! ./belt_internalAVLtree.js */ "./node_modules/bs-platform/lib/js/belt_internalAVLtree.js");

function add(t, x, data) {
  if (t === undefined) {
    return Belt_internalAVLtree.singleton(x, data);
  }
  var k = t.k;
  if (x === k) {
    return Belt_internalAVLtree.updateValue(t, data);
  }
  var v = t.v;
  if (x < k) {
    return Belt_internalAVLtree.bal(add(t.l, x, data), k, v, t.r);
  } else {
    return Belt_internalAVLtree.bal(t.l, k, v, add(t.r, x, data));
  }
}

function get(_n, x) {
  while(true) {
    var n = _n;
    if (n === undefined) {
      return ;
    }
    var v = n.k;
    if (x === v) {
      return Caml_option.some(n.v);
    }
    _n = x < v ? n.l : n.r;
    continue ;
  };
}

function getUndefined(_n, x) {
  while(true) {
    var n = _n;
    if (n === undefined) {
      return ;
    }
    var v = n.k;
    if (x === v) {
      return n.v;
    }
    _n = x < v ? n.l : n.r;
    continue ;
  };
}

function getExn(_n, x) {
  while(true) {
    var n = _n;
    if (n !== undefined) {
      var v = n.k;
      if (x === v) {
        return n.v;
      }
      _n = x < v ? n.l : n.r;
      continue ;
    }
    throw {
          RE_EXN_ID: "Not_found",
          Error: new Error()
        };
  };
}

function getWithDefault(_n, x, def) {
  while(true) {
    var n = _n;
    if (n === undefined) {
      return def;
    }
    var v = n.k;
    if (x === v) {
      return n.v;
    }
    _n = x < v ? n.l : n.r;
    continue ;
  };
}

function has(_n, x) {
  while(true) {
    var n = _n;
    if (n === undefined) {
      return false;
    }
    var v = n.k;
    if (x === v) {
      return true;
    }
    _n = x < v ? n.l : n.r;
    continue ;
  };
}

function remove(n, x) {
  if (n === undefined) {
    return n;
  }
  var v = n.k;
  var l = n.l;
  var r = n.r;
  if (x !== v) {
    if (x < v) {
      return Belt_internalAVLtree.bal(remove(l, x), v, n.v, r);
    } else {
      return Belt_internalAVLtree.bal(l, v, n.v, remove(r, x));
    }
  }
  if (l === undefined) {
    return r;
  }
  if (r === undefined) {
    return l;
  }
  var kr = {
    contents: r.k
  };
  var vr = {
    contents: r.v
  };
  var r$1 = Belt_internalAVLtree.removeMinAuxWithRef(r, kr, vr);
  return Belt_internalAVLtree.bal(l, kr.contents, vr.contents, r$1);
}

function splitAux(x, n) {
  var v = n.k;
  var d = n.v;
  var l = n.l;
  var r = n.r;
  if (x === v) {
    return [
            l,
            Caml_option.some(d),
            r
          ];
  }
  if (x < v) {
    if (l === undefined) {
      return [
              undefined,
              undefined,
              n
            ];
    }
    var match = splitAux(x, l);
    return [
            match[0],
            match[1],
            Belt_internalAVLtree.join(match[2], v, d, r)
          ];
  }
  if (r === undefined) {
    return [
            n,
            undefined,
            undefined
          ];
  }
  var match$1 = splitAux(x, r);
  return [
          Belt_internalAVLtree.join(l, v, d, match$1[0]),
          match$1[1],
          match$1[2]
        ];
}

function split(x, n) {
  if (n !== undefined) {
    return splitAux(x, n);
  } else {
    return [
            undefined,
            undefined,
            undefined
          ];
  }
}

function mergeU(s1, s2, f) {
  if (s1 !== undefined) {
    if (s1.h >= (
        s2 !== undefined ? s2.h : 0
      )) {
      var v1 = s1.k;
      var d1 = s1.v;
      var l1 = s1.l;
      var r1 = s1.r;
      var match = split(v1, s2);
      return Belt_internalAVLtree.concatOrJoin(mergeU(l1, match[0], f), v1, f(v1, Caml_option.some(d1), match[1]), mergeU(r1, match[2], f));
    }
    
  } else if (s2 === undefined) {
    return ;
  }
  var v2 = s2.k;
  var d2 = s2.v;
  var l2 = s2.l;
  var r2 = s2.r;
  var match$1 = split(v2, s1);
  return Belt_internalAVLtree.concatOrJoin(mergeU(match$1[0], l2, f), v2, f(v2, match$1[1], Caml_option.some(d2)), mergeU(match$1[2], r2, f));
}

function merge(s1, s2, f) {
  return mergeU(s1, s2, Curry.__3(f));
}

function compareAux(_e1, _e2, vcmp) {
  while(true) {
    var e2 = _e2;
    var e1 = _e1;
    if (!e1) {
      return 0;
    }
    if (!e2) {
      return 0;
    }
    var h2 = e2.hd;
    var h1 = e1.hd;
    var c = Caml_primitive.caml_string_compare(h1.k, h2.k);
    if (c !== 0) {
      return c;
    }
    var cx = vcmp(h1.v, h2.v);
    if (cx !== 0) {
      return cx;
    }
    _e2 = Belt_internalAVLtree.stackAllLeft(h2.r, e2.tl);
    _e1 = Belt_internalAVLtree.stackAllLeft(h1.r, e1.tl);
    continue ;
  };
}

function cmpU(s1, s2, cmp) {
  var len1 = Belt_internalAVLtree.size(s1);
  var len2 = Belt_internalAVLtree.size(s2);
  if (len1 === len2) {
    return compareAux(Belt_internalAVLtree.stackAllLeft(s1, /* [] */0), Belt_internalAVLtree.stackAllLeft(s2, /* [] */0), cmp);
  } else if (len1 < len2) {
    return -1;
  } else {
    return 1;
  }
}

function cmp(s1, s2, f) {
  return cmpU(s1, s2, Curry.__2(f));
}

function eqAux(_e1, _e2, eq) {
  while(true) {
    var e2 = _e2;
    var e1 = _e1;
    if (!e1) {
      return true;
    }
    if (!e2) {
      return true;
    }
    var h2 = e2.hd;
    var h1 = e1.hd;
    if (!(h1.k === h2.k && eq(h1.v, h2.v))) {
      return false;
    }
    _e2 = Belt_internalAVLtree.stackAllLeft(h2.r, e2.tl);
    _e1 = Belt_internalAVLtree.stackAllLeft(h1.r, e1.tl);
    continue ;
  };
}

function eqU(s1, s2, eq) {
  var len1 = Belt_internalAVLtree.size(s1);
  var len2 = Belt_internalAVLtree.size(s2);
  if (len1 === len2) {
    return eqAux(Belt_internalAVLtree.stackAllLeft(s1, /* [] */0), Belt_internalAVLtree.stackAllLeft(s2, /* [] */0), eq);
  } else {
    return false;
  }
}

function eq(s1, s2, f) {
  return eqU(s1, s2, Curry.__2(f));
}

function addMutate(t, x, data) {
  if (t === undefined) {
    return Belt_internalAVLtree.singleton(x, data);
  }
  var k = t.k;
  if (x === k) {
    t.k = x;
    t.v = data;
    return t;
  }
  var l = t.l;
  var r = t.r;
  if (x < k) {
    var ll = addMutate(l, x, data);
    t.l = ll;
  } else {
    t.r = addMutate(r, x, data);
  }
  return Belt_internalAVLtree.balMutate(t);
}

function fromArray(xs) {
  var len = xs.length;
  if (len === 0) {
    return ;
  }
  var next = Belt_SortArray.strictlySortedLengthU(xs, (function (param, param$1) {
          return param[0] < param$1[0];
        }));
  var result;
  if (next >= 0) {
    result = Belt_internalAVLtree.fromSortedArrayAux(xs, 0, next);
  } else {
    next = -next | 0;
    result = Belt_internalAVLtree.fromSortedArrayRevAux(xs, next - 1 | 0, next);
  }
  for(var i = next; i < len; ++i){
    var match = xs[i];
    result = addMutate(result, match[0], match[1]);
  }
  return result;
}

var N;

var A;

var S;

exports.N = N;
exports.A = A;
exports.S = S;
exports.add = add;
exports.get = get;
exports.getUndefined = getUndefined;
exports.getExn = getExn;
exports.getWithDefault = getWithDefault;
exports.has = has;
exports.remove = remove;
exports.splitAux = splitAux;
exports.split = split;
exports.mergeU = mergeU;
exports.merge = merge;
exports.compareAux = compareAux;
exports.cmpU = cmpU;
exports.cmp = cmp;
exports.eqAux = eqAux;
exports.eqU = eqU;
exports.eq = eq;
exports.addMutate = addMutate;
exports.fromArray = fromArray;
/* No side effect */


/***/ }),

/***/ "./node_modules/bs-platform/lib/js/belt_internalSetInt.js":
/*!****************************************************************!*\
  !*** ./node_modules/bs-platform/lib/js/belt_internalSetInt.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Belt_SortArrayInt = __webpack_require__(/*! ./belt_SortArrayInt.js */ "./node_modules/bs-platform/lib/js/belt_SortArrayInt.js");
var Belt_internalAVLset = __webpack_require__(/*! ./belt_internalAVLset.js */ "./node_modules/bs-platform/lib/js/belt_internalAVLset.js");

function has(_t, x) {
  while(true) {
    var t = _t;
    if (t === undefined) {
      return false;
    }
    var v = t.v;
    if (x === v) {
      return true;
    }
    _t = x < v ? t.l : t.r;
    continue ;
  };
}

function compareAux(_e1, _e2) {
  while(true) {
    var e2 = _e2;
    var e1 = _e1;
    if (!e1) {
      return 0;
    }
    if (!e2) {
      return 0;
    }
    var h2 = e2.hd;
    var h1 = e1.hd;
    var k1 = h1.v;
    var k2 = h2.v;
    if (k1 !== k2) {
      if (k1 < k2) {
        return -1;
      } else {
        return 1;
      }
    }
    _e2 = Belt_internalAVLset.stackAllLeft(h2.r, e2.tl);
    _e1 = Belt_internalAVLset.stackAllLeft(h1.r, e1.tl);
    continue ;
  };
}

function cmp(s1, s2) {
  var len1 = Belt_internalAVLset.size(s1);
  var len2 = Belt_internalAVLset.size(s2);
  if (len1 === len2) {
    return compareAux(Belt_internalAVLset.stackAllLeft(s1, /* [] */0), Belt_internalAVLset.stackAllLeft(s2, /* [] */0));
  } else if (len1 < len2) {
    return -1;
  } else {
    return 1;
  }
}

function eq(s1, s2) {
  return cmp(s1, s2) === 0;
}

function subset(_s1, _s2) {
  while(true) {
    var s2 = _s2;
    var s1 = _s1;
    if (s1 === undefined) {
      return true;
    }
    if (s2 === undefined) {
      return false;
    }
    var v1 = s1.v;
    var l1 = s1.l;
    var r1 = s1.r;
    var v2 = s2.v;
    var l2 = s2.l;
    var r2 = s2.r;
    if (v1 === v2) {
      if (!subset(l1, l2)) {
        return false;
      }
      _s2 = r2;
      _s1 = r1;
      continue ;
    }
    if (v1 < v2) {
      if (!subset(Belt_internalAVLset.create(l1, v1, undefined), l2)) {
        return false;
      }
      _s1 = r1;
      continue ;
    }
    if (!subset(Belt_internalAVLset.create(undefined, v1, r1), r2)) {
      return false;
    }
    _s1 = l1;
    continue ;
  };
}

function get(_n, x) {
  while(true) {
    var n = _n;
    if (n === undefined) {
      return ;
    }
    var v = n.v;
    if (x === v) {
      return v;
    }
    _n = x < v ? n.l : n.r;
    continue ;
  };
}

function getUndefined(_n, x) {
  while(true) {
    var n = _n;
    if (n === undefined) {
      return ;
    }
    var v = n.v;
    if (x === v) {
      return v;
    }
    _n = x < v ? n.l : n.r;
    continue ;
  };
}

function getExn(_n, x) {
  while(true) {
    var n = _n;
    if (n !== undefined) {
      var v = n.v;
      if (x === v) {
        return v;
      }
      _n = x < v ? n.l : n.r;
      continue ;
    }
    throw {
          RE_EXN_ID: "Not_found",
          Error: new Error()
        };
  };
}

function addMutate(t, x) {
  if (t === undefined) {
    return Belt_internalAVLset.singleton(x);
  }
  var k = t.v;
  if (x === k) {
    return t;
  }
  var l = t.l;
  var r = t.r;
  if (x < k) {
    t.l = addMutate(l, x);
  } else {
    t.r = addMutate(r, x);
  }
  return Belt_internalAVLset.balMutate(t);
}

function fromArray(xs) {
  var len = xs.length;
  if (len === 0) {
    return ;
  }
  var next = Belt_SortArrayInt.strictlySortedLength(xs);
  var result;
  if (next >= 0) {
    result = Belt_internalAVLset.fromSortedArrayAux(xs, 0, next);
  } else {
    next = -next | 0;
    result = Belt_internalAVLset.fromSortedArrayRevAux(xs, next - 1 | 0, next);
  }
  for(var i = next; i < len; ++i){
    result = addMutate(result, xs[i]);
  }
  return result;
}

var S;

var N;

var A;

exports.S = S;
exports.N = N;
exports.A = A;
exports.has = has;
exports.compareAux = compareAux;
exports.cmp = cmp;
exports.eq = eq;
exports.subset = subset;
exports.get = get;
exports.getUndefined = getUndefined;
exports.getExn = getExn;
exports.addMutate = addMutate;
exports.fromArray = fromArray;
/* No side effect */


/***/ }),

/***/ "./node_modules/bs-platform/lib/js/belt_internalSetString.js":
/*!*******************************************************************!*\
  !*** ./node_modules/bs-platform/lib/js/belt_internalSetString.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Belt_internalAVLset = __webpack_require__(/*! ./belt_internalAVLset.js */ "./node_modules/bs-platform/lib/js/belt_internalAVLset.js");
var Belt_SortArrayString = __webpack_require__(/*! ./belt_SortArrayString.js */ "./node_modules/bs-platform/lib/js/belt_SortArrayString.js");

function has(_t, x) {
  while(true) {
    var t = _t;
    if (t === undefined) {
      return false;
    }
    var v = t.v;
    if (x === v) {
      return true;
    }
    _t = x < v ? t.l : t.r;
    continue ;
  };
}

function compareAux(_e1, _e2) {
  while(true) {
    var e2 = _e2;
    var e1 = _e1;
    if (!e1) {
      return 0;
    }
    if (!e2) {
      return 0;
    }
    var h2 = e2.hd;
    var h1 = e1.hd;
    var k1 = h1.v;
    var k2 = h2.v;
    if (k1 !== k2) {
      if (k1 < k2) {
        return -1;
      } else {
        return 1;
      }
    }
    _e2 = Belt_internalAVLset.stackAllLeft(h2.r, e2.tl);
    _e1 = Belt_internalAVLset.stackAllLeft(h1.r, e1.tl);
    continue ;
  };
}

function cmp(s1, s2) {
  var len1 = Belt_internalAVLset.size(s1);
  var len2 = Belt_internalAVLset.size(s2);
  if (len1 === len2) {
    return compareAux(Belt_internalAVLset.stackAllLeft(s1, /* [] */0), Belt_internalAVLset.stackAllLeft(s2, /* [] */0));
  } else if (len1 < len2) {
    return -1;
  } else {
    return 1;
  }
}

function eq(s1, s2) {
  return cmp(s1, s2) === 0;
}

function subset(_s1, _s2) {
  while(true) {
    var s2 = _s2;
    var s1 = _s1;
    if (s1 === undefined) {
      return true;
    }
    if (s2 === undefined) {
      return false;
    }
    var v1 = s1.v;
    var l1 = s1.l;
    var r1 = s1.r;
    var v2 = s2.v;
    var l2 = s2.l;
    var r2 = s2.r;
    if (v1 === v2) {
      if (!subset(l1, l2)) {
        return false;
      }
      _s2 = r2;
      _s1 = r1;
      continue ;
    }
    if (v1 < v2) {
      if (!subset(Belt_internalAVLset.create(l1, v1, undefined), l2)) {
        return false;
      }
      _s1 = r1;
      continue ;
    }
    if (!subset(Belt_internalAVLset.create(undefined, v1, r1), r2)) {
      return false;
    }
    _s1 = l1;
    continue ;
  };
}

function get(_n, x) {
  while(true) {
    var n = _n;
    if (n === undefined) {
      return ;
    }
    var v = n.v;
    if (x === v) {
      return v;
    }
    _n = x < v ? n.l : n.r;
    continue ;
  };
}

function getUndefined(_n, x) {
  while(true) {
    var n = _n;
    if (n === undefined) {
      return ;
    }
    var v = n.v;
    if (x === v) {
      return v;
    }
    _n = x < v ? n.l : n.r;
    continue ;
  };
}

function getExn(_n, x) {
  while(true) {
    var n = _n;
    if (n !== undefined) {
      var v = n.v;
      if (x === v) {
        return v;
      }
      _n = x < v ? n.l : n.r;
      continue ;
    }
    throw {
          RE_EXN_ID: "Not_found",
          Error: new Error()
        };
  };
}

function addMutate(t, x) {
  if (t === undefined) {
    return Belt_internalAVLset.singleton(x);
  }
  var k = t.v;
  if (x === k) {
    return t;
  }
  var l = t.l;
  var r = t.r;
  if (x < k) {
    t.l = addMutate(l, x);
  } else {
    t.r = addMutate(r, x);
  }
  return Belt_internalAVLset.balMutate(t);
}

function fromArray(xs) {
  var len = xs.length;
  if (len === 0) {
    return ;
  }
  var next = Belt_SortArrayString.strictlySortedLength(xs);
  var result;
  if (next >= 0) {
    result = Belt_internalAVLset.fromSortedArrayAux(xs, 0, next);
  } else {
    next = -next | 0;
    result = Belt_internalAVLset.fromSortedArrayRevAux(xs, next - 1 | 0, next);
  }
  for(var i = next; i < len; ++i){
    result = addMutate(result, xs[i]);
  }
  return result;
}

var S;

var N;

var A;

exports.S = S;
exports.N = N;
exports.A = A;
exports.has = has;
exports.compareAux = compareAux;
exports.cmp = cmp;
exports.eq = eq;
exports.subset = subset;
exports.get = get;
exports.getUndefined = getUndefined;
exports.getExn = getExn;
exports.addMutate = addMutate;
exports.fromArray = fromArray;
/* No side effect */


/***/ }),

/***/ "./node_modules/bs-platform/lib/js/bytes.js":
/*!**************************************************!*\
  !*** ./node_modules/bs-platform/lib/js/bytes.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Char = __webpack_require__(/*! ./char.js */ "./node_modules/bs-platform/lib/js/char.js");
var Curry = __webpack_require__(/*! ./curry.js */ "./node_modules/bs-platform/lib/js/curry.js");
var Caml_bytes = __webpack_require__(/*! ./caml_bytes.js */ "./node_modules/bs-platform/lib/js/caml_bytes.js");
var Caml_primitive = __webpack_require__(/*! ./caml_primitive.js */ "./node_modules/bs-platform/lib/js/caml_primitive.js");
var Caml_js_exceptions = __webpack_require__(/*! ./caml_js_exceptions.js */ "./node_modules/bs-platform/lib/js/caml_js_exceptions.js");

function make(n, c) {
  var s = Caml_bytes.caml_create_bytes(n);
  Caml_bytes.caml_fill_bytes(s, 0, n, c);
  return s;
}

function init(n, f) {
  var s = Caml_bytes.caml_create_bytes(n);
  for(var i = 0; i < n; ++i){
    s[i] = Curry._1(f, i);
  }
  return s;
}

var empty = [];

function copy(s) {
  var len = s.length;
  var r = Caml_bytes.caml_create_bytes(len);
  Caml_bytes.caml_blit_bytes(s, 0, r, 0, len);
  return r;
}

function to_string(b) {
  return Caml_bytes.bytes_to_string(copy(b));
}

function of_string(s) {
  return copy(Caml_bytes.bytes_of_string(s));
}

function sub(s, ofs, len) {
  if (ofs < 0 || len < 0 || ofs > (s.length - len | 0)) {
    throw {
          RE_EXN_ID: "Invalid_argument",
          _1: "String.sub / Bytes.sub",
          Error: new Error()
        };
  }
  var r = Caml_bytes.caml_create_bytes(len);
  Caml_bytes.caml_blit_bytes(s, ofs, r, 0, len);
  return r;
}

function sub_string(b, ofs, len) {
  return Caml_bytes.bytes_to_string(sub(b, ofs, len));
}

function $plus$plus(a, b) {
  var c = a + b | 0;
  var match = a < 0;
  var match$1 = b < 0;
  var match$2 = c < 0;
  if (match) {
    if (!match$1) {
      return c;
    }
    if (match$2) {
      return c;
    }
    throw {
          RE_EXN_ID: "Invalid_argument",
          _1: "Bytes.extend",
          Error: new Error()
        };
  }
  if (match$1) {
    return c;
  }
  if (match$2) {
    throw {
          RE_EXN_ID: "Invalid_argument",
          _1: "Bytes.extend",
          Error: new Error()
        };
  }
  return c;
}

function extend(s, left, right) {
  var len = $plus$plus($plus$plus(s.length, left), right);
  var r = Caml_bytes.caml_create_bytes(len);
  var match = left < 0 ? [
      -left | 0,
      0
    ] : [
      0,
      left
    ];
  var dstoff = match[1];
  var srcoff = match[0];
  var cpylen = Caml_primitive.caml_int_min(s.length - srcoff | 0, len - dstoff | 0);
  if (cpylen > 0) {
    Caml_bytes.caml_blit_bytes(s, srcoff, r, dstoff, cpylen);
  }
  return r;
}

function fill(s, ofs, len, c) {
  if (ofs < 0 || len < 0 || ofs > (s.length - len | 0)) {
    throw {
          RE_EXN_ID: "Invalid_argument",
          _1: "String.fill / Bytes.fill",
          Error: new Error()
        };
  }
  return Caml_bytes.caml_fill_bytes(s, ofs, len, c);
}

function blit(s1, ofs1, s2, ofs2, len) {
  if (len < 0 || ofs1 < 0 || ofs1 > (s1.length - len | 0) || ofs2 < 0 || ofs2 > (s2.length - len | 0)) {
    throw {
          RE_EXN_ID: "Invalid_argument",
          _1: "Bytes.blit",
          Error: new Error()
        };
  }
  return Caml_bytes.caml_blit_bytes(s1, ofs1, s2, ofs2, len);
}

function blit_string(s1, ofs1, s2, ofs2, len) {
  if (len < 0 || ofs1 < 0 || ofs1 > (s1.length - len | 0) || ofs2 < 0 || ofs2 > (s2.length - len | 0)) {
    throw {
          RE_EXN_ID: "Invalid_argument",
          _1: "String.blit / Bytes.blit_string",
          Error: new Error()
        };
  }
  return Caml_bytes.caml_blit_string(s1, ofs1, s2, ofs2, len);
}

function iter(f, a) {
  for(var i = 0 ,i_finish = a.length; i < i_finish; ++i){
    Curry._1(f, a[i]);
  }
  
}

function iteri(f, a) {
  for(var i = 0 ,i_finish = a.length; i < i_finish; ++i){
    Curry._2(f, i, a[i]);
  }
  
}

function ensure_ge(x, y) {
  if (x >= y) {
    return x;
  }
  throw {
        RE_EXN_ID: "Invalid_argument",
        _1: "Bytes.concat",
        Error: new Error()
      };
}

function sum_lengths(_acc, seplen, _param) {
  while(true) {
    var param = _param;
    var acc = _acc;
    if (!param) {
      return acc;
    }
    var tl = param.tl;
    var hd = param.hd;
    if (!tl) {
      return hd.length + acc | 0;
    }
    _param = tl;
    _acc = ensure_ge((hd.length + seplen | 0) + acc | 0, acc);
    continue ;
  };
}

function concat(sep, l) {
  if (!l) {
    return empty;
  }
  var seplen = sep.length;
  var dst = Caml_bytes.caml_create_bytes(sum_lengths(0, seplen, l));
  var _pos = 0;
  var _param = l;
  while(true) {
    var param = _param;
    var pos = _pos;
    if (!param) {
      return dst;
    }
    var tl = param.tl;
    var hd = param.hd;
    if (tl) {
      Caml_bytes.caml_blit_bytes(hd, 0, dst, pos, hd.length);
      Caml_bytes.caml_blit_bytes(sep, 0, dst, pos + hd.length | 0, seplen);
      _param = tl;
      _pos = (pos + hd.length | 0) + seplen | 0;
      continue ;
    }
    Caml_bytes.caml_blit_bytes(hd, 0, dst, pos, hd.length);
    return dst;
  };
}

function cat(s1, s2) {
  var l1 = s1.length;
  var l2 = s2.length;
  var r = Caml_bytes.caml_create_bytes(l1 + l2 | 0);
  Caml_bytes.caml_blit_bytes(s1, 0, r, 0, l1);
  Caml_bytes.caml_blit_bytes(s2, 0, r, l1, l2);
  return r;
}

function is_space(param) {
  var switcher = param - 9 | 0;
  if (switcher > 4 || switcher < 0) {
    return switcher === 23;
  } else {
    return switcher !== 2;
  }
}

function trim(s) {
  var len = s.length;
  var i = 0;
  while(i < len && is_space(s[i])) {
    i = i + 1 | 0;
  };
  var j = len - 1 | 0;
  while(j >= i && is_space(s[j])) {
    j = j - 1 | 0;
  };
  if (j >= i) {
    return sub(s, i, (j - i | 0) + 1 | 0);
  } else {
    return empty;
  }
}

function escaped(s) {
  var n = 0;
  for(var i = 0 ,i_finish = s.length; i < i_finish; ++i){
    var match = s[i];
    var tmp;
    if (match >= 32) {
      var switcher = match - 34 | 0;
      tmp = switcher > 58 || switcher < 0 ? (
          switcher >= 93 ? 4 : 1
        ) : (
          switcher > 57 || switcher < 1 ? 2 : 1
        );
    } else {
      tmp = match >= 11 ? (
          match !== 13 ? 4 : 2
        ) : (
          match >= 8 ? 2 : 4
        );
    }
    n = n + tmp | 0;
  }
  if (n === s.length) {
    return copy(s);
  }
  var s$prime = Caml_bytes.caml_create_bytes(n);
  n = 0;
  for(var i$1 = 0 ,i_finish$1 = s.length; i$1 < i_finish$1; ++i$1){
    var c = s[i$1];
    var exit = 0;
    if (c >= 35) {
      if (c !== 92) {
        if (c >= 127) {
          exit = 1;
        } else {
          s$prime[n] = c;
        }
      } else {
        exit = 2;
      }
    } else if (c >= 32) {
      if (c >= 34) {
        exit = 2;
      } else {
        s$prime[n] = c;
      }
    } else if (c >= 14) {
      exit = 1;
    } else {
      switch (c) {
        case 8 :
            s$prime[n] = /* "\\" */92;
            n = n + 1 | 0;
            s$prime[n] = /* "b" */98;
            break;
        case 9 :
            s$prime[n] = /* "\\" */92;
            n = n + 1 | 0;
            s$prime[n] = /* "t" */116;
            break;
        case 10 :
            s$prime[n] = /* "\\" */92;
            n = n + 1 | 0;
            s$prime[n] = /* "n" */110;
            break;
        case 0 :
        case 1 :
        case 2 :
        case 3 :
        case 4 :
        case 5 :
        case 6 :
        case 7 :
        case 11 :
        case 12 :
            exit = 1;
            break;
        case 13 :
            s$prime[n] = /* "\\" */92;
            n = n + 1 | 0;
            s$prime[n] = /* "r" */114;
            break;
        
      }
    }
    switch (exit) {
      case 1 :
          s$prime[n] = /* "\\" */92;
          n = n + 1 | 0;
          s$prime[n] = 48 + (c / 100 | 0) | 0;
          n = n + 1 | 0;
          s$prime[n] = 48 + (c / 10 | 0) % 10 | 0;
          n = n + 1 | 0;
          s$prime[n] = 48 + c % 10 | 0;
          break;
      case 2 :
          s$prime[n] = /* "\\" */92;
          n = n + 1 | 0;
          s$prime[n] = c;
          break;
      
    }
    n = n + 1 | 0;
  }
  return s$prime;
}

function map(f, s) {
  var l = s.length;
  if (l === 0) {
    return s;
  }
  var r = Caml_bytes.caml_create_bytes(l);
  for(var i = 0; i < l; ++i){
    r[i] = Curry._1(f, s[i]);
  }
  return r;
}

function mapi(f, s) {
  var l = s.length;
  if (l === 0) {
    return s;
  }
  var r = Caml_bytes.caml_create_bytes(l);
  for(var i = 0; i < l; ++i){
    r[i] = Curry._2(f, i, s[i]);
  }
  return r;
}

function uppercase_ascii(s) {
  return map(Char.uppercase_ascii, s);
}

function lowercase_ascii(s) {
  return map(Char.lowercase_ascii, s);
}

function apply1(f, s) {
  if (s.length === 0) {
    return s;
  }
  var r = copy(s);
  r[0] = Curry._1(f, s[0]);
  return r;
}

function capitalize_ascii(s) {
  return apply1(Char.uppercase_ascii, s);
}

function uncapitalize_ascii(s) {
  return apply1(Char.lowercase_ascii, s);
}

function index_rec(s, lim, _i, c) {
  while(true) {
    var i = _i;
    if (i >= lim) {
      throw {
            RE_EXN_ID: "Not_found",
            Error: new Error()
          };
    }
    if (s[i] === c) {
      return i;
    }
    _i = i + 1 | 0;
    continue ;
  };
}

function index(s, c) {
  return index_rec(s, s.length, 0, c);
}

function index_rec_opt(s, lim, _i, c) {
  while(true) {
    var i = _i;
    if (i >= lim) {
      return ;
    }
    if (s[i] === c) {
      return i;
    }
    _i = i + 1 | 0;
    continue ;
  };
}

function index_opt(s, c) {
  return index_rec_opt(s, s.length, 0, c);
}

function index_from(s, i, c) {
  var l = s.length;
  if (i < 0 || i > l) {
    throw {
          RE_EXN_ID: "Invalid_argument",
          _1: "String.index_from / Bytes.index_from",
          Error: new Error()
        };
  }
  return index_rec(s, l, i, c);
}

function index_from_opt(s, i, c) {
  var l = s.length;
  if (i < 0 || i > l) {
    throw {
          RE_EXN_ID: "Invalid_argument",
          _1: "String.index_from_opt / Bytes.index_from_opt",
          Error: new Error()
        };
  }
  return index_rec_opt(s, l, i, c);
}

function rindex_rec(s, _i, c) {
  while(true) {
    var i = _i;
    if (i < 0) {
      throw {
            RE_EXN_ID: "Not_found",
            Error: new Error()
          };
    }
    if (s[i] === c) {
      return i;
    }
    _i = i - 1 | 0;
    continue ;
  };
}

function rindex(s, c) {
  return rindex_rec(s, s.length - 1 | 0, c);
}

function rindex_from(s, i, c) {
  if (i < -1 || i >= s.length) {
    throw {
          RE_EXN_ID: "Invalid_argument",
          _1: "String.rindex_from / Bytes.rindex_from",
          Error: new Error()
        };
  }
  return rindex_rec(s, i, c);
}

function rindex_rec_opt(s, _i, c) {
  while(true) {
    var i = _i;
    if (i < 0) {
      return ;
    }
    if (s[i] === c) {
      return i;
    }
    _i = i - 1 | 0;
    continue ;
  };
}

function rindex_opt(s, c) {
  return rindex_rec_opt(s, s.length - 1 | 0, c);
}

function rindex_from_opt(s, i, c) {
  if (i < -1 || i >= s.length) {
    throw {
          RE_EXN_ID: "Invalid_argument",
          _1: "String.rindex_from_opt / Bytes.rindex_from_opt",
          Error: new Error()
        };
  }
  return rindex_rec_opt(s, i, c);
}

function contains_from(s, i, c) {
  var l = s.length;
  if (i < 0 || i > l) {
    throw {
          RE_EXN_ID: "Invalid_argument",
          _1: "String.contains_from / Bytes.contains_from",
          Error: new Error()
        };
  }
  try {
    index_rec(s, l, i, c);
    return true;
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    if (exn.RE_EXN_ID === "Not_found") {
      return false;
    }
    throw exn;
  }
}

function contains(s, c) {
  return contains_from(s, 0, c);
}

function rcontains_from(s, i, c) {
  if (i < 0 || i >= s.length) {
    throw {
          RE_EXN_ID: "Invalid_argument",
          _1: "String.rcontains_from / Bytes.rcontains_from",
          Error: new Error()
        };
  }
  try {
    rindex_rec(s, i, c);
    return true;
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    if (exn.RE_EXN_ID === "Not_found") {
      return false;
    }
    throw exn;
  }
}

var compare = Caml_bytes.caml_bytes_compare;

function uppercase(s) {
  return map(Char.uppercase, s);
}

function lowercase(s) {
  return map(Char.lowercase, s);
}

function capitalize(s) {
  return apply1(Char.uppercase, s);
}

function uncapitalize(s) {
  return apply1(Char.lowercase, s);
}

var equal = Caml_bytes.caml_bytes_equal;

var unsafe_to_string = Caml_bytes.bytes_to_string;

var unsafe_of_string = Caml_bytes.bytes_of_string;

exports.make = make;
exports.init = init;
exports.empty = empty;
exports.copy = copy;
exports.of_string = of_string;
exports.to_string = to_string;
exports.sub = sub;
exports.sub_string = sub_string;
exports.extend = extend;
exports.fill = fill;
exports.blit = blit;
exports.blit_string = blit_string;
exports.concat = concat;
exports.cat = cat;
exports.iter = iter;
exports.iteri = iteri;
exports.map = map;
exports.mapi = mapi;
exports.trim = trim;
exports.escaped = escaped;
exports.index = index;
exports.index_opt = index_opt;
exports.rindex = rindex;
exports.rindex_opt = rindex_opt;
exports.index_from = index_from;
exports.index_from_opt = index_from_opt;
exports.rindex_from = rindex_from;
exports.rindex_from_opt = rindex_from_opt;
exports.contains = contains;
exports.contains_from = contains_from;
exports.rcontains_from = rcontains_from;
exports.uppercase = uppercase;
exports.lowercase = lowercase;
exports.capitalize = capitalize;
exports.uncapitalize = uncapitalize;
exports.uppercase_ascii = uppercase_ascii;
exports.lowercase_ascii = lowercase_ascii;
exports.capitalize_ascii = capitalize_ascii;
exports.uncapitalize_ascii = uncapitalize_ascii;
exports.compare = compare;
exports.equal = equal;
exports.unsafe_to_string = unsafe_to_string;
exports.unsafe_of_string = unsafe_of_string;
/* No side effect */


/***/ }),

/***/ "./node_modules/bs-platform/lib/js/caml_array.js":
/*!*******************************************************!*\
  !*** ./node_modules/bs-platform/lib/js/caml_array.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";



function caml_array_sub(x, offset, len) {
  var result = new Array(len);
  var j = 0;
  var i = offset;
  while(j < len) {
    result[j] = x[i];
    j = j + 1 | 0;
    i = i + 1 | 0;
  };
  return result;
}

function len(_acc, _l) {
  while(true) {
    var l = _l;
    var acc = _acc;
    if (!l) {
      return acc;
    }
    _l = l.tl;
    _acc = l.hd.length + acc | 0;
    continue ;
  };
}

function fill(arr, _i, _l) {
  while(true) {
    var l = _l;
    var i = _i;
    if (!l) {
      return ;
    }
    var x = l.hd;
    var l$1 = x.length;
    var k = i;
    var j = 0;
    while(j < l$1) {
      arr[k] = x[j];
      k = k + 1 | 0;
      j = j + 1 | 0;
    };
    _l = l.tl;
    _i = k;
    continue ;
  };
}

function caml_array_concat(l) {
  var v = len(0, l);
  var result = new Array(v);
  fill(result, 0, l);
  return result;
}

function set(xs, index, newval) {
  if (index < 0 || index >= xs.length) {
    throw {
          RE_EXN_ID: "Invalid_argument",
          _1: "index out of bounds",
          Error: new Error()
        };
  }
  xs[index] = newval;
  
}

function get(xs, index) {
  if (index < 0 || index >= xs.length) {
    throw {
          RE_EXN_ID: "Invalid_argument",
          _1: "index out of bounds",
          Error: new Error()
        };
  }
  return xs[index];
}

function caml_make_vect(len, init) {
  var b = new Array(len);
  for(var i = 0; i < len; ++i){
    b[i] = init;
  }
  return b;
}

function caml_make_float_vect(len) {
  var b = new Array(len);
  for(var i = 0; i < len; ++i){
    b[i] = 0;
  }
  return b;
}

function caml_array_blit(a1, i1, a2, i2, len) {
  if (i2 <= i1) {
    for(var j = 0; j < len; ++j){
      a2[j + i2 | 0] = a1[j + i1 | 0];
    }
    return ;
  }
  for(var j$1 = len - 1 | 0; j$1 >= 0; --j$1){
    a2[j$1 + i2 | 0] = a1[j$1 + i1 | 0];
  }
  
}

function caml_array_dup(prim) {
  return prim.slice(0);
}

exports.caml_array_dup = caml_array_dup;
exports.caml_array_sub = caml_array_sub;
exports.caml_array_concat = caml_array_concat;
exports.caml_make_vect = caml_make_vect;
exports.caml_make_float_vect = caml_make_float_vect;
exports.caml_array_blit = caml_array_blit;
exports.get = get;
exports.set = set;
/* No side effect */


/***/ }),

/***/ "./node_modules/bs-platform/lib/js/caml_bytes.js":
/*!*******************************************************!*\
  !*** ./node_modules/bs-platform/lib/js/caml_bytes.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";



function set(s, i, ch) {
  if (i < 0 || i >= s.length) {
    throw {
          RE_EXN_ID: "Invalid_argument",
          _1: "index out of bounds",
          Error: new Error()
        };
  }
  s[i] = ch;
  
}

function get(s, i) {
  if (i < 0 || i >= s.length) {
    throw {
          RE_EXN_ID: "Invalid_argument",
          _1: "index out of bounds",
          Error: new Error()
        };
  }
  return s[i];
}

function caml_fill_bytes(s, i, l, c) {
  if (l <= 0) {
    return ;
  }
  for(var k = i ,k_finish = l + i | 0; k < k_finish; ++k){
    s[k] = c;
  }
  
}

function caml_create_bytes(len) {
  if (len < 0) {
    throw {
          RE_EXN_ID: "Invalid_argument",
          _1: "String.create",
          Error: new Error()
        };
  }
  var result = new Array(len);
  for(var i = 0; i < len; ++i){
    result[i] = /* "\000" */0;
  }
  return result;
}

function caml_blit_bytes(s1, i1, s2, i2, len) {
  if (len <= 0) {
    return ;
  }
  if (s1 === s2) {
    if (i1 < i2) {
      var range_a = (s1.length - i2 | 0) - 1 | 0;
      var range_b = len - 1 | 0;
      var range = range_a > range_b ? range_b : range_a;
      for(var j = range; j >= 0; --j){
        s1[i2 + j | 0] = s1[i1 + j | 0];
      }
      return ;
    }
    if (i1 <= i2) {
      return ;
    }
    var range_a$1 = (s1.length - i1 | 0) - 1 | 0;
    var range_b$1 = len - 1 | 0;
    var range$1 = range_a$1 > range_b$1 ? range_b$1 : range_a$1;
    for(var k = 0; k <= range$1; ++k){
      s1[i2 + k | 0] = s1[i1 + k | 0];
    }
    return ;
  }
  var off1 = s1.length - i1 | 0;
  if (len <= off1) {
    for(var i = 0; i < len; ++i){
      s2[i2 + i | 0] = s1[i1 + i | 0];
    }
    return ;
  }
  for(var i$1 = 0; i$1 < off1; ++i$1){
    s2[i2 + i$1 | 0] = s1[i1 + i$1 | 0];
  }
  for(var i$2 = off1; i$2 < len; ++i$2){
    s2[i2 + i$2 | 0] = /* "\000" */0;
  }
  
}

function bytes_to_string(a) {
  var i = 0;
  var len = a.length;
  var s = "";
  var s_len = len;
  if (i === 0 && len <= 4096 && len === a.length) {
    return String.fromCharCode.apply(null, a);
  }
  var offset = 0;
  while(s_len > 0) {
    var next = s_len < 1024 ? s_len : 1024;
    var tmp_bytes = new Array(next);
    for(var k = 0; k < next; ++k){
      tmp_bytes[k] = a[k + offset | 0];
    }
    s = s + String.fromCharCode.apply(null, tmp_bytes);
    s_len = s_len - next | 0;
    offset = offset + next | 0;
  };
  return s;
}

function caml_blit_string(s1, i1, s2, i2, len) {
  if (len <= 0) {
    return ;
  }
  var off1 = s1.length - i1 | 0;
  if (len <= off1) {
    for(var i = 0; i < len; ++i){
      s2[i2 + i | 0] = s1.charCodeAt(i1 + i | 0);
    }
    return ;
  }
  for(var i$1 = 0; i$1 < off1; ++i$1){
    s2[i2 + i$1 | 0] = s1.charCodeAt(i1 + i$1 | 0);
  }
  for(var i$2 = off1; i$2 < len; ++i$2){
    s2[i2 + i$2 | 0] = /* "\000" */0;
  }
  
}

function bytes_of_string(s) {
  var len = s.length;
  var res = new Array(len);
  for(var i = 0; i < len; ++i){
    res[i] = s.charCodeAt(i);
  }
  return res;
}

function caml_bytes_compare_aux(s1, s2, _off, len, def) {
  while(true) {
    var off = _off;
    if (off >= len) {
      return def;
    }
    var a = s1[off];
    var b = s2[off];
    if (a > b) {
      return 1;
    }
    if (a < b) {
      return -1;
    }
    _off = off + 1 | 0;
    continue ;
  };
}

function caml_bytes_compare(s1, s2) {
  var len1 = s1.length;
  var len2 = s2.length;
  if (len1 === len2) {
    return caml_bytes_compare_aux(s1, s2, 0, len1, 0);
  } else if (len1 < len2) {
    return caml_bytes_compare_aux(s1, s2, 0, len1, -1);
  } else {
    return caml_bytes_compare_aux(s1, s2, 0, len2, 1);
  }
}

function caml_bytes_equal(s1, s2) {
  var len1 = s1.length;
  var len2 = s2.length;
  if (len1 === len2) {
    var _off = 0;
    while(true) {
      var off = _off;
      if (off === len1) {
        return true;
      }
      var a = s1[off];
      var b = s2[off];
      if (a !== b) {
        return false;
      }
      _off = off + 1 | 0;
      continue ;
    };
  } else {
    return false;
  }
}

function caml_bytes_greaterthan(s1, s2) {
  return caml_bytes_compare(s1, s2) > 0;
}

function caml_bytes_greaterequal(s1, s2) {
  return caml_bytes_compare(s1, s2) >= 0;
}

function caml_bytes_lessthan(s1, s2) {
  return caml_bytes_compare(s1, s2) < 0;
}

function caml_bytes_lessequal(s1, s2) {
  return caml_bytes_compare(s1, s2) <= 0;
}

exports.caml_create_bytes = caml_create_bytes;
exports.caml_fill_bytes = caml_fill_bytes;
exports.get = get;
exports.set = set;
exports.bytes_to_string = bytes_to_string;
exports.caml_blit_bytes = caml_blit_bytes;
exports.caml_blit_string = caml_blit_string;
exports.bytes_of_string = bytes_of_string;
exports.caml_bytes_compare = caml_bytes_compare;
exports.caml_bytes_greaterthan = caml_bytes_greaterthan;
exports.caml_bytes_greaterequal = caml_bytes_greaterequal;
exports.caml_bytes_lessthan = caml_bytes_lessthan;
exports.caml_bytes_lessequal = caml_bytes_lessequal;
exports.caml_bytes_equal = caml_bytes_equal;
/* No side effect */


/***/ }),

/***/ "./node_modules/bs-platform/lib/js/caml_exceptions.js":
/*!************************************************************!*\
  !*** ./node_modules/bs-platform/lib/js/caml_exceptions.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";



var id = {
  contents: 0
};

function create(str) {
  id.contents = id.contents + 1 | 0;
  return str + ("/" + id.contents);
}

function caml_is_extension(e) {
  if (e == null) {
    return false;
  } else {
    return typeof e.RE_EXN_ID === "string";
  }
}

function caml_exn_slot_name(x) {
  return x.RE_EXN_ID;
}

exports.id = id;
exports.create = create;
exports.caml_is_extension = caml_is_extension;
exports.caml_exn_slot_name = caml_exn_slot_name;
/* No side effect */


/***/ }),

/***/ "./node_modules/bs-platform/lib/js/caml_external_polyfill.js":
/*!*******************************************************************!*\
  !*** ./node_modules/bs-platform/lib/js/caml_external_polyfill.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";



var getGlobalThis = (function(){
  if (typeof globalThis !== 'undefined') return globalThis;
	if (typeof self !== 'undefined') return self;
	if (typeof window !== 'undefined') return window;
	if (typeof global !== 'undefined') return global;
	if (typeof this !== 'undefined') return this;
	throw new Error('Unable to locate global `this`');
});

var resolve = (function(s){
  var myGlobal = getGlobalThis();
  if (myGlobal[s] === undefined){
    throw new Error(s + " not polyfilled by BuckleScript yet\n")
  }
  return myGlobal[s]
});

var register = (function(s,fn){
  var myGlobal = getGlobalThis();
  myGlobal[s] = fn 
  return 0
});

exports.getGlobalThis = getGlobalThis;
exports.resolve = resolve;
exports.register = register;
/* No side effect */


/***/ }),

/***/ "./node_modules/bs-platform/lib/js/caml_format.js":
/*!********************************************************!*\
  !*** ./node_modules/bs-platform/lib/js/caml_format.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Caml_int64 = __webpack_require__(/*! ./caml_int64.js */ "./node_modules/bs-platform/lib/js/caml_int64.js");

function parse_digit(c) {
  if (c >= 65) {
    if (c >= 97) {
      if (c >= 123) {
        return -1;
      } else {
        return c - 87 | 0;
      }
    } else if (c >= 91) {
      return -1;
    } else {
      return c - 55 | 0;
    }
  } else if (c > 57 || c < 48) {
    return -1;
  } else {
    return c - /* "0" */48 | 0;
  }
}

function int_of_string_base(param) {
  switch (param) {
    case /* Oct */0 :
        return 8;
    case /* Hex */1 :
        return 16;
    case /* Dec */2 :
        return 10;
    case /* Bin */3 :
        return 2;
    
  }
}

function parse_sign_and_base(s) {
  var sign = 1;
  var base = /* Dec */2;
  var i = 0;
  var match = s.charCodeAt(i);
  switch (match) {
    case 43 :
        i = i + 1 | 0;
        break;
    case 44 :
        break;
    case 45 :
        sign = -1;
        i = i + 1 | 0;
        break;
    default:
      
  }
  if (s[i] === "0") {
    var match$1 = s.charCodeAt(i + 1 | 0);
    if (match$1 >= 89) {
      if (match$1 >= 111) {
        if (match$1 < 121) {
          switch (match$1 - 111 | 0) {
            case 0 :
                base = /* Oct */0;
                i = i + 2 | 0;
                break;
            case 6 :
                i = i + 2 | 0;
                break;
            case 1 :
            case 2 :
            case 3 :
            case 4 :
            case 5 :
            case 7 :
            case 8 :
                break;
            case 9 :
                base = /* Hex */1;
                i = i + 2 | 0;
                break;
            
          }
        }
        
      } else if (match$1 === 98) {
        base = /* Bin */3;
        i = i + 2 | 0;
      }
      
    } else if (match$1 !== 66) {
      if (match$1 >= 79) {
        switch (match$1 - 79 | 0) {
          case 0 :
              base = /* Oct */0;
              i = i + 2 | 0;
              break;
          case 6 :
              i = i + 2 | 0;
              break;
          case 1 :
          case 2 :
          case 3 :
          case 4 :
          case 5 :
          case 7 :
          case 8 :
              break;
          case 9 :
              base = /* Hex */1;
              i = i + 2 | 0;
              break;
          
        }
      }
      
    } else {
      base = /* Bin */3;
      i = i + 2 | 0;
    }
  }
  return [
          i,
          sign,
          base
        ];
}

function caml_int_of_string(s) {
  var match = parse_sign_and_base(s);
  var i = match[0];
  var base = int_of_string_base(match[2]);
  var threshold = 4294967295;
  var len = s.length;
  var c = i < len ? s.charCodeAt(i) : /* "\000" */0;
  var d = parse_digit(c);
  if (d < 0 || d >= base) {
    throw {
          RE_EXN_ID: "Failure",
          _1: "int_of_string",
          Error: new Error()
        };
  }
  var aux = function (_acc, _k) {
    while(true) {
      var k = _k;
      var acc = _acc;
      if (k === len) {
        return acc;
      }
      var a = s.charCodeAt(k);
      if (a === /* "_" */95) {
        _k = k + 1 | 0;
        continue ;
      }
      var v = parse_digit(a);
      if (v < 0 || v >= base) {
        throw {
              RE_EXN_ID: "Failure",
              _1: "int_of_string",
              Error: new Error()
            };
      }
      var acc$1 = base * acc + v;
      if (acc$1 > threshold) {
        throw {
              RE_EXN_ID: "Failure",
              _1: "int_of_string",
              Error: new Error()
            };
      }
      _k = k + 1 | 0;
      _acc = acc$1;
      continue ;
    };
  };
  var res = match[1] * aux(d, i + 1 | 0);
  var or_res = res | 0;
  if (base === 10 && res !== or_res) {
    throw {
          RE_EXN_ID: "Failure",
          _1: "int_of_string",
          Error: new Error()
        };
  }
  return or_res;
}

function caml_int64_of_string(s) {
  var match = parse_sign_and_base(s);
  var hbase = match[2];
  var i = match[0];
  var base = Caml_int64.of_int32(int_of_string_base(hbase));
  var sign = Caml_int64.of_int32(match[1]);
  var threshold;
  switch (hbase) {
    case /* Oct */0 :
        threshold = Caml_int64.mk(-1, 536870911);
        break;
    case /* Hex */1 :
        threshold = Caml_int64.mk(-1, 268435455);
        break;
    case /* Dec */2 :
        threshold = Caml_int64.mk(-1717986919, 429496729);
        break;
    case /* Bin */3 :
        threshold = Caml_int64.max_int;
        break;
    
  }
  var len = s.length;
  var c = i < len ? s.charCodeAt(i) : /* "\000" */0;
  var d = Caml_int64.of_int32(parse_digit(c));
  if (Caml_int64.lt(d, Caml_int64.zero) || Caml_int64.ge(d, base)) {
    throw {
          RE_EXN_ID: "Failure",
          _1: "int64_of_string",
          Error: new Error()
        };
  }
  var aux = function (_acc, _k) {
    while(true) {
      var k = _k;
      var acc = _acc;
      if (k === len) {
        return acc;
      }
      var a = s.charCodeAt(k);
      if (a === /* "_" */95) {
        _k = k + 1 | 0;
        continue ;
      }
      var v = Caml_int64.of_int32(parse_digit(a));
      if (Caml_int64.lt(v, Caml_int64.zero) || Caml_int64.ge(v, base) || Caml_int64.gt(acc, threshold)) {
        throw {
              RE_EXN_ID: "Failure",
              _1: "int64_of_string",
              Error: new Error()
            };
      }
      var acc$1 = Caml_int64.add(Caml_int64.mul(base, acc), v);
      _k = k + 1 | 0;
      _acc = acc$1;
      continue ;
    };
  };
  var res = Caml_int64.mul(sign, aux(d, i + 1 | 0));
  var or_res = Caml_int64.or_(res, Caml_int64.zero);
  if (Caml_int64.eq(base, Caml_int64.mk(10, 0)) && Caml_int64.neq(res, or_res)) {
    throw {
          RE_EXN_ID: "Failure",
          _1: "int64_of_string",
          Error: new Error()
        };
  }
  return or_res;
}

function int_of_base(param) {
  switch (param) {
    case /* Oct */0 :
        return 8;
    case /* Hex */1 :
        return 16;
    case /* Dec */2 :
        return 10;
    
  }
}

function lowercase(c) {
  if (c >= /* "A" */65 && c <= /* "Z" */90 || c >= /* "\192" */192 && c <= /* "\214" */214 || c >= /* "\216" */216 && c <= /* "\222" */222) {
    return c + 32 | 0;
  } else {
    return c;
  }
}

function parse_format(fmt) {
  var len = fmt.length;
  if (len > 31) {
    throw {
          RE_EXN_ID: "Invalid_argument",
          _1: "format_int: format too long",
          Error: new Error()
        };
  }
  var f = {
    justify: "+",
    signstyle: "-",
    filter: " ",
    alternate: false,
    base: /* Dec */2,
    signedconv: false,
    width: 0,
    uppercase: false,
    sign: 1,
    prec: -1,
    conv: "f"
  };
  var _i = 0;
  while(true) {
    var i = _i;
    if (i >= len) {
      return f;
    }
    var c = fmt.charCodeAt(i);
    var exit = 0;
    if (c >= 69) {
      if (c >= 88) {
        if (c >= 121) {
          exit = 1;
        } else {
          switch (c - 88 | 0) {
            case 0 :
                f.base = /* Hex */1;
                f.uppercase = true;
                _i = i + 1 | 0;
                continue ;
            case 13 :
            case 14 :
            case 15 :
                exit = 5;
                break;
            case 12 :
            case 17 :
                exit = 4;
                break;
            case 23 :
                f.base = /* Oct */0;
                _i = i + 1 | 0;
                continue ;
            case 29 :
                f.base = /* Dec */2;
                _i = i + 1 | 0;
                continue ;
            case 1 :
            case 2 :
            case 3 :
            case 4 :
            case 5 :
            case 6 :
            case 7 :
            case 8 :
            case 9 :
            case 10 :
            case 11 :
            case 16 :
            case 18 :
            case 19 :
            case 20 :
            case 21 :
            case 22 :
            case 24 :
            case 25 :
            case 26 :
            case 27 :
            case 28 :
            case 30 :
            case 31 :
                exit = 1;
                break;
            case 32 :
                f.base = /* Hex */1;
                _i = i + 1 | 0;
                continue ;
            
          }
        }
      } else if (c >= 72) {
        exit = 1;
      } else {
        f.signedconv = true;
        f.uppercase = true;
        f.conv = String.fromCharCode(lowercase(c));
        _i = i + 1 | 0;
        continue ;
      }
    } else {
      switch (c) {
        case 35 :
            f.alternate = true;
            _i = i + 1 | 0;
            continue ;
        case 32 :
        case 43 :
            exit = 2;
            break;
        case 45 :
            f.justify = "-";
            _i = i + 1 | 0;
            continue ;
        case 46 :
            f.prec = 0;
            var j = i + 1 | 0;
            while((function(j){
                return function () {
                  var w = fmt.charCodeAt(j) - /* "0" */48 | 0;
                  return w >= 0 && w <= 9;
                }
                }(j))()) {
              f.prec = (Math.imul(f.prec, 10) + fmt.charCodeAt(j) | 0) - /* "0" */48 | 0;
              j = j + 1 | 0;
            };
            _i = j;
            continue ;
        case 33 :
        case 34 :
        case 36 :
        case 37 :
        case 38 :
        case 39 :
        case 40 :
        case 41 :
        case 42 :
        case 44 :
        case 47 :
            exit = 1;
            break;
        case 48 :
            f.filter = "0";
            _i = i + 1 | 0;
            continue ;
        case 49 :
        case 50 :
        case 51 :
        case 52 :
        case 53 :
        case 54 :
        case 55 :
        case 56 :
        case 57 :
            exit = 3;
            break;
        default:
          exit = 1;
      }
    }
    switch (exit) {
      case 1 :
          _i = i + 1 | 0;
          continue ;
      case 2 :
          f.signstyle = String.fromCharCode(c);
          _i = i + 1 | 0;
          continue ;
      case 3 :
          f.width = 0;
          var j$1 = i;
          while((function(j$1){
              return function () {
                var w = fmt.charCodeAt(j$1) - /* "0" */48 | 0;
                return w >= 0 && w <= 9;
              }
              }(j$1))()) {
            f.width = (Math.imul(f.width, 10) + fmt.charCodeAt(j$1) | 0) - /* "0" */48 | 0;
            j$1 = j$1 + 1 | 0;
          };
          _i = j$1;
          continue ;
      case 4 :
          f.signedconv = true;
          f.base = /* Dec */2;
          _i = i + 1 | 0;
          continue ;
      case 5 :
          f.signedconv = true;
          f.conv = String.fromCharCode(c);
          _i = i + 1 | 0;
          continue ;
      
    }
  };
}

function finish_formatting(config, rawbuffer) {
  var justify = config.justify;
  var signstyle = config.signstyle;
  var filter = config.filter;
  var alternate = config.alternate;
  var base = config.base;
  var signedconv = config.signedconv;
  var width = config.width;
  var uppercase = config.uppercase;
  var sign = config.sign;
  var len = rawbuffer.length;
  if (signedconv && (sign < 0 || signstyle !== "-")) {
    len = len + 1 | 0;
  }
  if (alternate) {
    if (base === /* Oct */0) {
      len = len + 1 | 0;
    } else if (base === /* Hex */1) {
      len = len + 2 | 0;
    }
    
  }
  var buffer = "";
  if (justify === "+" && filter === " ") {
    for(var _for = len; _for < width; ++_for){
      buffer = buffer + filter;
    }
  }
  if (signedconv) {
    if (sign < 0) {
      buffer = buffer + "-";
    } else if (signstyle !== "-") {
      buffer = buffer + signstyle;
    }
    
  }
  if (alternate && base === /* Oct */0) {
    buffer = buffer + "0";
  }
  if (alternate && base === /* Hex */1) {
    buffer = buffer + "0x";
  }
  if (justify === "+" && filter === "0") {
    for(var _for$1 = len; _for$1 < width; ++_for$1){
      buffer = buffer + filter;
    }
  }
  buffer = uppercase ? buffer + rawbuffer.toUpperCase() : buffer + rawbuffer;
  if (justify === "-") {
    for(var _for$2 = len; _for$2 < width; ++_for$2){
      buffer = buffer + " ";
    }
  }
  return buffer;
}

function caml_format_int(fmt, i) {
  if (fmt === "%d") {
    return String(i);
  }
  var f = parse_format(fmt);
  var i$1 = i < 0 ? (
      f.signedconv ? (f.sign = -1, -i) : (i >>> 0)
    ) : i;
  var s = i$1.toString(int_of_base(f.base));
  if (f.prec >= 0) {
    f.filter = " ";
    var n = f.prec - s.length | 0;
    if (n > 0) {
      s = "0".repeat(n) + s;
    }
    
  }
  return finish_formatting(f, s);
}

function dec_of_pos_int64(x) {
  if (!Caml_int64.lt(x, Caml_int64.zero)) {
    return Caml_int64.to_string(x);
  }
  var wbase = Caml_int64.mk(10, 0);
  var y = Caml_int64.discard_sign(x);
  var match = Caml_int64.div_mod(y, wbase);
  var match$1 = Caml_int64.div_mod(Caml_int64.add(Caml_int64.mk(8, 0), match[1]), wbase);
  var quotient = Caml_int64.add(Caml_int64.add(Caml_int64.mk(-858993460, 214748364), match[0]), match$1[0]);
  return Caml_int64.to_string(quotient) + "0123456789"[Caml_int64.to_int32(match$1[1])];
}

function oct_of_int64(x) {
  var s = "";
  var wbase = Caml_int64.mk(8, 0);
  var cvtbl = "01234567";
  if (Caml_int64.lt(x, Caml_int64.zero)) {
    var y = Caml_int64.discard_sign(x);
    var match = Caml_int64.div_mod(y, wbase);
    var quotient = Caml_int64.add(Caml_int64.mk(0, 268435456), match[0]);
    var modulus = match[1];
    s = cvtbl[Caml_int64.to_int32(modulus)] + s;
    while(Caml_int64.neq(quotient, Caml_int64.zero)) {
      var match$1 = Caml_int64.div_mod(quotient, wbase);
      quotient = match$1[0];
      modulus = match$1[1];
      s = cvtbl[Caml_int64.to_int32(modulus)] + s;
    };
  } else {
    var match$2 = Caml_int64.div_mod(x, wbase);
    var quotient$1 = match$2[0];
    var modulus$1 = match$2[1];
    s = cvtbl[Caml_int64.to_int32(modulus$1)] + s;
    while(Caml_int64.neq(quotient$1, Caml_int64.zero)) {
      var match$3 = Caml_int64.div_mod(quotient$1, wbase);
      quotient$1 = match$3[0];
      modulus$1 = match$3[1];
      s = cvtbl[Caml_int64.to_int32(modulus$1)] + s;
    };
  }
  return s;
}

function caml_int64_format(fmt, x) {
  if (fmt === "%d") {
    return Caml_int64.to_string(x);
  }
  var f = parse_format(fmt);
  var x$1 = f.signedconv && Caml_int64.lt(x, Caml_int64.zero) ? (f.sign = -1, Caml_int64.neg(x)) : x;
  var match = f.base;
  var s;
  switch (match) {
    case /* Oct */0 :
        s = oct_of_int64(x$1);
        break;
    case /* Hex */1 :
        s = Caml_int64.to_hex(x$1);
        break;
    case /* Dec */2 :
        s = dec_of_pos_int64(x$1);
        break;
    
  }
  var fill_s;
  if (f.prec >= 0) {
    f.filter = " ";
    var n = f.prec - s.length | 0;
    fill_s = n > 0 ? "0".repeat(n) + s : s;
  } else {
    fill_s = s;
  }
  return finish_formatting(f, fill_s);
}

function caml_format_float(fmt, x) {
  var f = parse_format(fmt);
  var prec = f.prec < 0 ? 6 : f.prec;
  var x$1 = x < 0 ? (f.sign = -1, -x) : x;
  var s = "";
  if (isNaN(x$1)) {
    s = "nan";
    f.filter = " ";
  } else if (isFinite(x$1)) {
    var match = f.conv;
    switch (match) {
      case "e" :
          s = x$1.toExponential(prec);
          var i = s.length;
          if (s[i - 3 | 0] === "e") {
            s = s.slice(0, i - 1 | 0) + ("0" + s.slice(i - 1 | 0));
          }
          break;
      case "f" :
          s = x$1.toFixed(prec);
          break;
      case "g" :
          var prec$1 = prec !== 0 ? prec : 1;
          s = x$1.toExponential(prec$1 - 1 | 0);
          var j = s.indexOf("e");
          var exp = Number(s.slice(j + 1 | 0)) | 0;
          if (exp < -4 || x$1 >= 1e21 || x$1.toFixed().length > prec$1) {
            var i$1 = j - 1 | 0;
            while(s[i$1] === "0") {
              i$1 = i$1 - 1 | 0;
            };
            if (s[i$1] === ".") {
              i$1 = i$1 - 1 | 0;
            }
            s = s.slice(0, i$1 + 1 | 0) + s.slice(j);
            var i$2 = s.length;
            if (s[i$2 - 3 | 0] === "e") {
              s = s.slice(0, i$2 - 1 | 0) + ("0" + s.slice(i$2 - 1 | 0));
            }
            
          } else {
            var p = prec$1;
            if (exp < 0) {
              p = p - (exp + 1 | 0) | 0;
              s = x$1.toFixed(p);
            } else {
              while((function () {
                      s = x$1.toFixed(p);
                      return s.length > (prec$1 + 1 | 0);
                    })()) {
                p = p - 1 | 0;
              };
            }
            if (p !== 0) {
              var k = s.length - 1 | 0;
              while(s[k] === "0") {
                k = k - 1 | 0;
              };
              if (s[k] === ".") {
                k = k - 1 | 0;
              }
              s = s.slice(0, k + 1 | 0);
            }
            
          }
          break;
      default:
        
    }
  } else {
    s = "inf";
    f.filter = " ";
  }
  return finish_formatting(f, s);
}

var caml_hexstring_of_float = (function(x,prec,style){
  if (!isFinite(x)) {
    if (isNaN(x)) return "nan";
    return x > 0 ? "infinity":"-infinity";
  }
  var sign = (x==0 && 1/x == -Infinity)?1:(x>=0)?0:1;
  if(sign) x = -x;
  var exp = 0;
  if (x == 0) { }
  else if (x < 1) {
    while (x < 1 && exp > -1022)  { x *= 2; exp-- }
  } else {
    while (x >= 2) { x /= 2; exp++ }
  }
  var exp_sign = exp < 0 ? '' : '+';
  var sign_str = '';
  if (sign) sign_str = '-'
  else {
    switch(style){
    case 43 /* '+' */: sign_str = '+'; break;
    case 32 /* ' ' */: sign_str = ' '; break;
    default: break;
    }
  }
  if (prec >= 0 && prec < 13) {
    /* If a precision is given, and is small, round mantissa accordingly */
      var cst = Math.pow(2,prec * 4);
      x = Math.round(x * cst) / cst;
  }
  var x_str = x.toString(16);
  if(prec >= 0){
      var idx = x_str.indexOf('.');
    if(idx<0) {
      x_str += '.' +  '0'.repeat(prec);
    }
    else {
      var size = idx+1+prec;
      if(x_str.length < size)
        x_str += '0'.repeat(size - x_str.length);
      else
        x_str = x_str.substr(0,size);
    }
  }
  return  (sign_str + '0x' + x_str + 'p' + exp_sign + exp.toString(10));
});

var float_of_string = (function(s,exn){

    var res = +s;
    if ((s.length > 0) && (res === res))
        return res;
    s = s.replace(/_/g, "");
    res = +s;
    if (((s.length > 0) && (res === res)) || /^[+-]?nan$/i.test(s)) {
        return res;
    };
    var m = /^ *([+-]?)0x([0-9a-f]+)\.?([0-9a-f]*)p([+-]?[0-9]+)/i.exec(s);
    //            1        2             3           4
    if(m){
        var m3 = m[3].replace(/0+$/,'');
        var mantissa = parseInt(m[1] + m[2] + m3, 16);
        var exponent = (m[4]|0) - 4*m3.length;
        res = mantissa * Math.pow(2, exponent);
        return res;
    }
    if (/^\+?inf(inity)?$/i.test(s))
        return Infinity;
    if (/^-inf(inity)?$/i.test(s))
        return -Infinity;
    throw exn;
});

function caml_float_of_string(s) {
  return float_of_string(s, {
              RE_EXN_ID: "Failure",
              _1: "float_of_string"
            });
}

var caml_nativeint_format = caml_format_int;

var caml_int32_format = caml_format_int;

var caml_int32_of_string = caml_int_of_string;

var caml_nativeint_of_string = caml_int_of_string;

exports.caml_format_float = caml_format_float;
exports.caml_hexstring_of_float = caml_hexstring_of_float;
exports.caml_format_int = caml_format_int;
exports.caml_nativeint_format = caml_nativeint_format;
exports.caml_int32_format = caml_int32_format;
exports.caml_float_of_string = caml_float_of_string;
exports.caml_int64_format = caml_int64_format;
exports.caml_int_of_string = caml_int_of_string;
exports.caml_int32_of_string = caml_int32_of_string;
exports.caml_int64_of_string = caml_int64_of_string;
exports.caml_nativeint_of_string = caml_nativeint_of_string;
/* No side effect */


/***/ }),

/***/ "./node_modules/bs-platform/lib/js/caml_int64.js":
/*!*******************************************************!*\
  !*** ./node_modules/bs-platform/lib/js/caml_int64.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Caml_primitive = __webpack_require__(/*! ./caml_primitive.js */ "./node_modules/bs-platform/lib/js/caml_primitive.js");

function mk(lo, hi) {
  return [
          hi,
          (lo >>> 0)
        ];
}

var min_int = [
  -2147483648,
  0
];

var max_int = [
  2147483647,
  4294967295
];

var one = [
  0,
  1
];

var zero = [
  0,
  0
];

var neg_one = [
  -1,
  4294967295
];

function neg_signed(x) {
  return (x & 2147483648) !== 0;
}

function non_neg_signed(x) {
  return (x & 2147483648) === 0;
}

function succ(param) {
  var x_lo = param[1];
  var x_hi = param[0];
  var lo = x_lo + 1 | 0;
  return mk(lo, x_hi + (
              lo === 0 ? 1 : 0
            ) | 0);
}

function neg(param) {
  var other_lo = (param[1] ^ -1) + 1 | 0;
  return mk(other_lo, (param[0] ^ -1) + (
              other_lo === 0 ? 1 : 0
            ) | 0);
}

function add_aux(param, y_lo, y_hi) {
  var x_lo = param[1];
  var lo = x_lo + y_lo | 0;
  var overflow = neg_signed(x_lo) && (neg_signed(y_lo) || non_neg_signed(lo)) || neg_signed(y_lo) && non_neg_signed(lo) ? 1 : 0;
  return mk(lo, param[0] + y_hi + overflow | 0);
}

function add(self, param) {
  return add_aux(self, param[1], param[0]);
}

function eq(x, y) {
  if (x[0] === y[0]) {
    return x[1] === y[1];
  } else {
    return false;
  }
}

function equal_null(x, y) {
  if (y !== null) {
    return eq(x, y);
  } else {
    return false;
  }
}

function equal_undefined(x, y) {
  if (y !== undefined) {
    return eq(x, y);
  } else {
    return false;
  }
}

function equal_nullable(x, y) {
  if (y == null) {
    return false;
  } else {
    return eq(x, y);
  }
}

function sub_aux(x, lo, hi) {
  var y_lo = ((lo ^ -1) + 1 >>> 0);
  var y_hi = (hi ^ -1) + (
    y_lo === 0 ? 1 : 0
  ) | 0;
  return add_aux(x, y_lo, y_hi);
}

function sub(self, param) {
  return sub_aux(self, param[1], param[0]);
}

function lsl_(x, numBits) {
  if (numBits === 0) {
    return x;
  }
  var lo = x[1];
  if (numBits >= 32) {
    return mk(0, (lo << (numBits - 32 | 0)));
  } else {
    return mk((lo << numBits), (lo >>> (32 - numBits | 0)) | (x[0] << numBits));
  }
}

function lsr_(x, numBits) {
  if (numBits === 0) {
    return x;
  }
  var hi = x[0];
  var offset = numBits - 32 | 0;
  if (offset === 0) {
    return mk(hi, 0);
  } else if (offset > 0) {
    return mk((hi >>> offset), 0);
  } else {
    return mk((hi << (-offset | 0)) | (x[1] >>> numBits), (hi >>> numBits));
  }
}

function asr_(x, numBits) {
  if (numBits === 0) {
    return x;
  }
  var hi = x[0];
  if (numBits < 32) {
    return mk((hi << (32 - numBits | 0)) | (x[1] >>> numBits), (hi >> numBits));
  } else {
    return mk((hi >> (numBits - 32 | 0)), hi >= 0 ? 0 : -1);
  }
}

function is_zero(param) {
  if (param[0] !== 0 || param[1] !== 0) {
    return false;
  } else {
    return true;
  }
}

function mul(_this, _other) {
  while(true) {
    var other = _other;
    var $$this = _this;
    var lo;
    var this_hi = $$this[0];
    var exit = 0;
    var exit$1 = 0;
    var exit$2 = 0;
    if (this_hi !== 0) {
      exit$2 = 4;
    } else {
      if ($$this[1] === 0) {
        return zero;
      }
      exit$2 = 4;
    }
    if (exit$2 === 4) {
      if (other[0] !== 0) {
        exit$1 = 3;
      } else {
        if (other[1] === 0) {
          return zero;
        }
        exit$1 = 3;
      }
    }
    if (exit$1 === 3) {
      if (this_hi !== -2147483648 || $$this[1] !== 0) {
        exit = 2;
      } else {
        lo = other[1];
      }
    }
    if (exit === 2) {
      var other_hi = other[0];
      var lo$1 = $$this[1];
      var exit$3 = 0;
      if (other_hi !== -2147483648 || other[1] !== 0) {
        exit$3 = 3;
      } else {
        lo = lo$1;
      }
      if (exit$3 === 3) {
        var other_lo = other[1];
        if (this_hi < 0) {
          if (other_hi >= 0) {
            return neg(mul(neg($$this), other));
          }
          _other = neg(other);
          _this = neg($$this);
          continue ;
        }
        if (other_hi < 0) {
          return neg(mul($$this, neg(other)));
        }
        var a48 = (this_hi >>> 16);
        var a32 = this_hi & 65535;
        var a16 = (lo$1 >>> 16);
        var a00 = lo$1 & 65535;
        var b48 = (other_hi >>> 16);
        var b32 = other_hi & 65535;
        var b16 = (other_lo >>> 16);
        var b00 = other_lo & 65535;
        var c48 = 0;
        var c32 = 0;
        var c16 = 0;
        var c00 = a00 * b00;
        c16 = (c00 >>> 16) + a16 * b00;
        c32 = (c16 >>> 16);
        c16 = (c16 & 65535) + a00 * b16;
        c32 = c32 + (c16 >>> 16) + a32 * b00;
        c48 = (c32 >>> 16);
        c32 = (c32 & 65535) + a16 * b16;
        c48 = c48 + (c32 >>> 16);
        c32 = (c32 & 65535) + a00 * b32;
        c48 = c48 + (c32 >>> 16);
        c32 = c32 & 65535;
        c48 = c48 + (a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48) & 65535;
        return mk(c00 & 65535 | ((c16 & 65535) << 16), c32 | (c48 << 16));
      }
      
    }
    if ((lo & 1) === 0) {
      return zero;
    } else {
      return min_int;
    }
  };
}

function xor(param, param$1) {
  return mk(param[1] ^ param$1[1], param[0] ^ param$1[0]);
}

function or_(param, param$1) {
  return mk(param[1] | param$1[1], param[0] | param$1[0]);
}

function and_(param, param$1) {
  return mk(param[1] & param$1[1], param[0] & param$1[0]);
}

function ge(param, param$1) {
  var other_hi = param$1[0];
  var hi = param[0];
  if (hi > other_hi) {
    return true;
  } else if (hi < other_hi) {
    return false;
  } else {
    return param[1] >= param$1[1];
  }
}

function neq(x, y) {
  return !eq(x, y);
}

function lt(x, y) {
  return !ge(x, y);
}

function gt(x, y) {
  if (x[0] > y[0]) {
    return true;
  } else if (x[0] < y[0]) {
    return false;
  } else {
    return x[1] > y[1];
  }
}

function le(x, y) {
  return !gt(x, y);
}

function min(x, y) {
  if (ge(x, y)) {
    return y;
  } else {
    return x;
  }
}

function max(x, y) {
  if (gt(x, y)) {
    return x;
  } else {
    return y;
  }
}

function to_float(param) {
  return param[0] * 0x100000000 + param[1];
}

function of_float(x) {
  if (isNaN(x) || !isFinite(x)) {
    return zero;
  } else if (x <= -9.22337203685477581e+18) {
    return min_int;
  } else if (x + 1 >= 9.22337203685477581e+18) {
    return max_int;
  } else if (x < 0) {
    return neg(of_float(-x));
  } else {
    return mk(x % 4294967296 | 0, x / 4294967296 | 0);
  }
}

function isSafeInteger(param) {
  var hi = param[0];
  var top11Bits = (hi >> 21);
  if (top11Bits === 0) {
    return true;
  } else if (top11Bits === -1) {
    return !(param[1] === 0 && hi === (4292870144 | 0));
  } else {
    return false;
  }
}

function to_string(self) {
  if (isSafeInteger(self)) {
    return String(to_float(self));
  }
  if (self[0] < 0) {
    if (eq(self, min_int)) {
      return "-9223372036854775808";
    } else {
      return "-" + to_string(neg(self));
    }
  }
  var approx_div1 = of_float(Math.floor(to_float(self) / 10));
  var lo = approx_div1[1];
  var hi = approx_div1[0];
  var match = sub_aux(sub_aux(self, (lo << 3), (lo >>> 29) | (hi << 3)), (lo << 1), (lo >>> 31) | (hi << 1));
  var rem_lo = match[1];
  var rem_hi = match[0];
  if (rem_lo === 0 && rem_hi === 0) {
    return to_string(approx_div1) + "0";
  }
  if (rem_hi < 0) {
    var rem_lo$1 = ((rem_lo ^ -1) + 1 >>> 0);
    var delta = Math.ceil(rem_lo$1 / 10);
    var remainder = 10 * delta - rem_lo$1;
    return to_string(sub_aux(approx_div1, delta | 0, 0)) + String(remainder | 0);
  }
  var rem_lo$2 = rem_lo;
  var delta$1 = Math.floor(rem_lo$2 / 10);
  var remainder$1 = rem_lo$2 - 10 * delta$1;
  return to_string(add_aux(approx_div1, delta$1 | 0, 0)) + String(remainder$1 | 0);
}

function div(_self, _other) {
  while(true) {
    var other = _other;
    var self = _self;
    var self_hi = self[0];
    var exit = 0;
    var exit$1 = 0;
    if (other[0] !== 0 || other[1] !== 0) {
      exit$1 = 2;
    } else {
      throw {
            RE_EXN_ID: "Division_by_zero",
            Error: new Error()
          };
    }
    if (exit$1 === 2) {
      if (self_hi !== -2147483648) {
        if (self_hi !== 0) {
          exit = 1;
        } else {
          if (self[1] === 0) {
            return zero;
          }
          exit = 1;
        }
      } else if (self[1] !== 0) {
        exit = 1;
      } else {
        if (eq(other, one) || eq(other, neg_one)) {
          return self;
        }
        if (eq(other, min_int)) {
          return one;
        }
        var half_this = asr_(self, 1);
        var approx = lsl_(div(half_this, other), 1);
        var exit$2 = 0;
        if (approx[0] !== 0) {
          exit$2 = 3;
        } else {
          if (approx[1] === 0) {
            if (other[0] < 0) {
              return one;
            } else {
              return neg(one);
            }
          }
          exit$2 = 3;
        }
        if (exit$2 === 3) {
          var rem = sub(self, mul(other, approx));
          return add(approx, div(rem, other));
        }
        
      }
    }
    if (exit === 1) {
      var other_hi = other[0];
      var exit$3 = 0;
      if (other_hi !== -2147483648) {
        exit$3 = 2;
      } else {
        if (other[1] === 0) {
          return zero;
        }
        exit$3 = 2;
      }
      if (exit$3 === 2) {
        if (self_hi < 0) {
          if (other_hi >= 0) {
            return neg(div(neg(self), other));
          }
          _other = neg(other);
          _self = neg(self);
          continue ;
        }
        if (other_hi < 0) {
          return neg(div(self, neg(other)));
        }
        var res = zero;
        var rem$1 = self;
        while(ge(rem$1, other)) {
          var approx$1 = Caml_primitive.caml_float_max(1, Math.floor(to_float(rem$1) / to_float(other)));
          var log2 = Math.ceil(Math.log(approx$1) / Math.LN2);
          var delta = log2 <= 48 ? 1 : Math.pow(2, log2 - 48);
          var approxRes = of_float(approx$1);
          var approxRem = mul(approxRes, other);
          while(approxRem[0] < 0 || gt(approxRem, rem$1)) {
            approx$1 = approx$1 - delta;
            approxRes = of_float(approx$1);
            approxRem = mul(approxRes, other);
          };
          if (is_zero(approxRes)) {
            approxRes = one;
          }
          res = add(res, approxRes);
          rem$1 = sub(rem$1, approxRem);
        };
        return res;
      }
      
    }
    
  };
}

function mod_(self, other) {
  return sub(self, mul(div(self, other), other));
}

function div_mod(self, other) {
  var quotient = div(self, other);
  return [
          quotient,
          sub(self, mul(quotient, other))
        ];
}

function compare(self, other) {
  var v = Caml_primitive.caml_nativeint_compare(self[0], other[0]);
  if (v === 0) {
    return Caml_primitive.caml_nativeint_compare(self[1], other[1]);
  } else {
    return v;
  }
}

function of_int32(lo) {
  return mk(lo, lo < 0 ? -1 : 0);
}

function to_int32(x) {
  return x[1] | 0;
}

function to_hex(x) {
  var x_lo = x[1];
  var x_hi = x[0];
  var aux = function (v) {
    return (v >>> 0).toString(16);
  };
  if (x_hi === 0 && x_lo === 0) {
    return "0";
  }
  if (x_lo === 0) {
    return aux(x_hi) + "00000000";
  }
  if (x_hi === 0) {
    return aux(x_lo);
  }
  var lo = aux(x_lo);
  var pad = 8 - lo.length | 0;
  if (pad <= 0) {
    return aux(x_hi) + lo;
  } else {
    return aux(x_hi) + ("0".repeat(pad) + lo);
  }
}

function discard_sign(x) {
  return [
          2147483647 & x[0],
          x[1]
        ];
}

function float_of_bits(x) {
  return (function(lo,hi){ return (new Float64Array(new Int32Array([lo,hi]).buffer))[0]})(x[1], x[0]);
}

function bits_of_float(x) {
  var match = (function(x){return new Int32Array(new Float64Array([x]).buffer)})(x);
  return mk(match[0], match[1]);
}

exports.mk = mk;
exports.succ = succ;
exports.min_int = min_int;
exports.max_int = max_int;
exports.one = one;
exports.zero = zero;
exports.neg_one = neg_one;
exports.of_int32 = of_int32;
exports.to_int32 = to_int32;
exports.add = add;
exports.neg = neg;
exports.sub = sub;
exports.lsl_ = lsl_;
exports.lsr_ = lsr_;
exports.asr_ = asr_;
exports.is_zero = is_zero;
exports.mul = mul;
exports.xor = xor;
exports.or_ = or_;
exports.and_ = and_;
exports.ge = ge;
exports.eq = eq;
exports.neq = neq;
exports.lt = lt;
exports.gt = gt;
exports.le = le;
exports.equal_null = equal_null;
exports.equal_undefined = equal_undefined;
exports.equal_nullable = equal_nullable;
exports.min = min;
exports.max = max;
exports.to_float = to_float;
exports.of_float = of_float;
exports.div = div;
exports.mod_ = mod_;
exports.compare = compare;
exports.float_of_bits = float_of_bits;
exports.bits_of_float = bits_of_float;
exports.div_mod = div_mod;
exports.to_hex = to_hex;
exports.discard_sign = discard_sign;
exports.to_string = to_string;
/* No side effect */


/***/ }),

/***/ "./node_modules/bs-platform/lib/js/caml_io.js":
/*!****************************************************!*\
  !*** ./node_modules/bs-platform/lib/js/caml_io.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";



var stdout = {
  buffer: "",
  output: (function (param, s) {
      var v = s.length - 1 | 0;
      if (((typeof process !== "undefined") && process.stdout && process.stdout.write)) {
        return process.stdout.write(s);
      } else {
        if (s[v] === "\n") {
          console.log(s.slice(0, v));
        } else {
          console.log(s);
        }
        return ;
      }
    })
};

var stderr = {
  buffer: "",
  output: (function (param, s) {
      var v = s.length - 1 | 0;
      if (s[v] === "\n") {
        console.log(s.slice(0, v));
      } else {
        console.log(s);
      }
      
    })
};

function caml_ml_flush(oc) {
  if (oc.buffer !== "") {
    oc.output(oc, oc.buffer);
    oc.buffer = "";
    return ;
  }
  
}

function caml_ml_output(oc, str, offset, len) {
  var str$1 = offset === 0 && len === str.length ? str : str.slice(offset, len);
  if (((typeof process !== "undefined") && process.stdout && process.stdout.write) && oc === stdout) {
    return process.stdout.write(str$1);
  }
  var id = str$1.lastIndexOf("\n");
  if (id < 0) {
    oc.buffer = oc.buffer + str$1;
  } else {
    oc.buffer = oc.buffer + str$1.slice(0, id + 1 | 0);
    caml_ml_flush(oc);
    oc.buffer = oc.buffer + str$1.slice(id + 1 | 0);
  }
  
}

function caml_ml_output_char(oc, $$char) {
  return caml_ml_output(oc, String.fromCharCode($$char), 0, 1);
}

function caml_ml_out_channels_list(param) {
  return {
          hd: stdout,
          tl: {
            hd: stderr,
            tl: /* [] */0
          }
        };
}

var stdin;

exports.stdin = stdin;
exports.stdout = stdout;
exports.stderr = stderr;
exports.caml_ml_flush = caml_ml_flush;
exports.caml_ml_output = caml_ml_output;
exports.caml_ml_output_char = caml_ml_output_char;
exports.caml_ml_out_channels_list = caml_ml_out_channels_list;
/* No side effect */


/***/ }),

/***/ "./node_modules/bs-platform/lib/js/caml_js_exceptions.js":
/*!***************************************************************!*\
  !*** ./node_modules/bs-platform/lib/js/caml_js_exceptions.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Caml_option = __webpack_require__(/*! ./caml_option.js */ "./node_modules/bs-platform/lib/js/caml_option.js");
var Caml_exceptions = __webpack_require__(/*! ./caml_exceptions.js */ "./node_modules/bs-platform/lib/js/caml_exceptions.js");

var $$Error = Caml_exceptions.create("Caml_js_exceptions.Error");

function internalToOCamlException(e) {
  if (Caml_exceptions.caml_is_extension(e)) {
    return e;
  } else {
    return {
            RE_EXN_ID: $$Error,
            _1: e
          };
  }
}

function caml_as_js_exn(exn) {
  if (exn.RE_EXN_ID === $$Error) {
    return Caml_option.some(exn._1);
  }
  
}

exports.$$Error = $$Error;
exports.internalToOCamlException = internalToOCamlException;
exports.caml_as_js_exn = caml_as_js_exn;
/* No side effect */


/***/ }),

/***/ "./node_modules/bs-platform/lib/js/caml_obj.js":
/*!*****************************************************!*\
  !*** ./node_modules/bs-platform/lib/js/caml_obj.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Caml_primitive = __webpack_require__(/*! ./caml_primitive.js */ "./node_modules/bs-platform/lib/js/caml_primitive.js");

var for_in = (function(o,foo){
        for (var x in o) { foo(x) }});

var caml_obj_dup = (function(x){
  if(Array.isArray(x)){
    var len = x.length  
    var v = new Array(len)
    for(var i = 0 ; i < len ; ++i){
      v[i] = x[i]
    }
    if(x.TAG !== undefined){
      v.TAG = x.TAG // TODO this can be removed eventually
    }  
    return v 
  } 
  return Object.assign({},x)    
});

var update_dummy = (function(x,y){
  var k  
  if(Array.isArray(y)){
    for(k = 0; k < y.length ; ++k){
      x[k] = y[k]
    }
    if(y.TAG !== undefined){
      x.TAG = y.TAG
    }
  } else {
    for (var k in y){
      x[k] = y[k]
    }
  }
});

function caml_compare(a, b) {
  if (a === b) {
    return 0;
  }
  var a_type = typeof a;
  var b_type = typeof b;
  switch (a_type) {
    case "boolean" :
        if (b_type === "boolean") {
          return Caml_primitive.caml_bool_compare(a, b);
        }
        break;
    case "function" :
        if (b_type === "function") {
          throw {
                RE_EXN_ID: "Invalid_argument",
                _1: "compare: functional value",
                Error: new Error()
              };
        }
        break;
    case "number" :
        if (b_type === "number") {
          return Caml_primitive.caml_int_compare(a, b);
        }
        break;
    case "string" :
        if (b_type === "string") {
          return Caml_primitive.caml_string_compare(a, b);
        } else {
          return 1;
        }
    case "undefined" :
        return -1;
    default:
      
  }
  switch (b_type) {
    case "string" :
        return -1;
    case "undefined" :
        return 1;
    default:
      if (a_type === "boolean") {
        return 1;
      }
      if (b_type === "boolean") {
        return -1;
      }
      if (a_type === "function") {
        return 1;
      }
      if (b_type === "function") {
        return -1;
      }
      if (a_type === "number") {
        if (b === null || b.BS_PRIVATE_NESTED_SOME_NONE !== undefined) {
          return 1;
        } else {
          return -1;
        }
      }
      if (b_type === "number") {
        if (a === null || a.BS_PRIVATE_NESTED_SOME_NONE !== undefined) {
          return -1;
        } else {
          return 1;
        }
      }
      if (a === null) {
        if (b.BS_PRIVATE_NESTED_SOME_NONE !== undefined) {
          return 1;
        } else {
          return -1;
        }
      }
      if (b === null) {
        if (a.BS_PRIVATE_NESTED_SOME_NONE !== undefined) {
          return -1;
        } else {
          return 1;
        }
      }
      if (a.BS_PRIVATE_NESTED_SOME_NONE !== undefined) {
        if (b.BS_PRIVATE_NESTED_SOME_NONE !== undefined) {
          return aux_obj_compare(a, b);
        } else {
          return -1;
        }
      }
      var tag_a = a.TAG | 0;
      var tag_b = b.TAG | 0;
      if (tag_a === 248) {
        return Caml_primitive.caml_int_compare(a[1], b[1]);
      }
      if (tag_a === 251) {
        throw {
              RE_EXN_ID: "Invalid_argument",
              _1: "equal: abstract value",
              Error: new Error()
            };
      }
      if (tag_a !== tag_b) {
        if (tag_a < tag_b) {
          return -1;
        } else {
          return 1;
        }
      }
      var len_a = a.length | 0;
      var len_b = b.length | 0;
      if (len_a === len_b) {
        if (Array.isArray(a)) {
          var _i = 0;
          while(true) {
            var i = _i;
            if (i === len_a) {
              return 0;
            }
            var res = caml_compare(a[i], b[i]);
            if (res !== 0) {
              return res;
            }
            _i = i + 1 | 0;
            continue ;
          };
        } else if ((a instanceof Date && b instanceof Date)) {
          return (a - b);
        } else {
          return aux_obj_compare(a, b);
        }
      } else if (len_a < len_b) {
        var _i$1 = 0;
        while(true) {
          var i$1 = _i$1;
          if (i$1 === len_a) {
            return -1;
          }
          var res$1 = caml_compare(a[i$1], b[i$1]);
          if (res$1 !== 0) {
            return res$1;
          }
          _i$1 = i$1 + 1 | 0;
          continue ;
        };
      } else {
        var _i$2 = 0;
        while(true) {
          var i$2 = _i$2;
          if (i$2 === len_b) {
            return 1;
          }
          var res$2 = caml_compare(a[i$2], b[i$2]);
          if (res$2 !== 0) {
            return res$2;
          }
          _i$2 = i$2 + 1 | 0;
          continue ;
        };
      }
  }
}

function aux_obj_compare(a, b) {
  var min_key_lhs = {
    contents: undefined
  };
  var min_key_rhs = {
    contents: undefined
  };
  var do_key = function (param, key) {
    var min_key = param[2];
    var b = param[1];
    if (!(!b.hasOwnProperty(key) || caml_compare(param[0][key], b[key]) > 0)) {
      return ;
    }
    var mk = min_key.contents;
    if (mk !== undefined && key >= mk) {
      return ;
    } else {
      min_key.contents = key;
      return ;
    }
  };
  var partial_arg = [
    a,
    b,
    min_key_rhs
  ];
  var do_key_a = function (param) {
    return do_key(partial_arg, param);
  };
  var partial_arg$1 = [
    b,
    a,
    min_key_lhs
  ];
  var do_key_b = function (param) {
    return do_key(partial_arg$1, param);
  };
  for_in(a, do_key_a);
  for_in(b, do_key_b);
  var match = min_key_lhs.contents;
  var match$1 = min_key_rhs.contents;
  if (match !== undefined) {
    if (match$1 !== undefined) {
      return Caml_primitive.caml_string_compare(match, match$1);
    } else {
      return -1;
    }
  } else if (match$1 !== undefined) {
    return 1;
  } else {
    return 0;
  }
}

function caml_equal(a, b) {
  if (a === b) {
    return true;
  }
  var a_type = typeof a;
  if (a_type === "string" || a_type === "number" || a_type === "boolean" || a_type === "undefined" || a === null) {
    return false;
  }
  var b_type = typeof b;
  if (a_type === "function" || b_type === "function") {
    throw {
          RE_EXN_ID: "Invalid_argument",
          _1: "equal: functional value",
          Error: new Error()
        };
  }
  if (b_type === "number" || b_type === "undefined" || b === null) {
    return false;
  }
  var tag_a = a.TAG | 0;
  var tag_b = b.TAG | 0;
  if (tag_a === 248) {
    return a[1] === b[1];
  }
  if (tag_a === 251) {
    throw {
          RE_EXN_ID: "Invalid_argument",
          _1: "equal: abstract value",
          Error: new Error()
        };
  }
  if (tag_a !== tag_b) {
    return false;
  }
  var len_a = a.length | 0;
  var len_b = b.length | 0;
  if (len_a === len_b) {
    if (Array.isArray(a)) {
      var _i = 0;
      while(true) {
        var i = _i;
        if (i === len_a) {
          return true;
        }
        if (!caml_equal(a[i], b[i])) {
          return false;
        }
        _i = i + 1 | 0;
        continue ;
      };
    } else if ((a instanceof Date && b instanceof Date)) {
      return !(a > b || a < b);
    } else {
      var result = {
        contents: true
      };
      var do_key_a = function (key) {
        if (!b.hasOwnProperty(key)) {
          result.contents = false;
          return ;
        }
        
      };
      var do_key_b = function (key) {
        if (!a.hasOwnProperty(key) || !caml_equal(b[key], a[key])) {
          result.contents = false;
          return ;
        }
        
      };
      for_in(a, do_key_a);
      if (result.contents) {
        for_in(b, do_key_b);
      }
      return result.contents;
    }
  } else {
    return false;
  }
}

function caml_equal_null(x, y) {
  if (y !== null) {
    return caml_equal(x, y);
  } else {
    return x === y;
  }
}

function caml_equal_undefined(x, y) {
  if (y !== undefined) {
    return caml_equal(x, y);
  } else {
    return x === y;
  }
}

function caml_equal_nullable(x, y) {
  if (y == null) {
    return x === y;
  } else {
    return caml_equal(x, y);
  }
}

function caml_notequal(a, b) {
  return !caml_equal(a, b);
}

function caml_greaterequal(a, b) {
  return caml_compare(a, b) >= 0;
}

function caml_greaterthan(a, b) {
  return caml_compare(a, b) > 0;
}

function caml_lessequal(a, b) {
  return caml_compare(a, b) <= 0;
}

function caml_lessthan(a, b) {
  return caml_compare(a, b) < 0;
}

function caml_min(x, y) {
  if (caml_compare(x, y) <= 0) {
    return x;
  } else {
    return y;
  }
}

function caml_max(x, y) {
  if (caml_compare(x, y) >= 0) {
    return x;
  } else {
    return y;
  }
}

exports.caml_obj_dup = caml_obj_dup;
exports.update_dummy = update_dummy;
exports.caml_compare = caml_compare;
exports.caml_equal = caml_equal;
exports.caml_equal_null = caml_equal_null;
exports.caml_equal_undefined = caml_equal_undefined;
exports.caml_equal_nullable = caml_equal_nullable;
exports.caml_notequal = caml_notequal;
exports.caml_greaterequal = caml_greaterequal;
exports.caml_greaterthan = caml_greaterthan;
exports.caml_lessthan = caml_lessthan;
exports.caml_lessequal = caml_lessequal;
exports.caml_min = caml_min;
exports.caml_max = caml_max;
/* No side effect */


/***/ }),

/***/ "./node_modules/bs-platform/lib/js/caml_option.js":
/*!********************************************************!*\
  !*** ./node_modules/bs-platform/lib/js/caml_option.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";



function isNested(x) {
  return x.BS_PRIVATE_NESTED_SOME_NONE !== undefined;
}

function some(x) {
  if (x === undefined) {
    return {
            BS_PRIVATE_NESTED_SOME_NONE: 0
          };
  } else if (x !== null && x.BS_PRIVATE_NESTED_SOME_NONE !== undefined) {
    return {
            BS_PRIVATE_NESTED_SOME_NONE: x.BS_PRIVATE_NESTED_SOME_NONE + 1 | 0
          };
  } else {
    return x;
  }
}

function nullable_to_opt(x) {
  if (x == null) {
    return ;
  } else {
    return some(x);
  }
}

function undefined_to_opt(x) {
  if (x === undefined) {
    return ;
  } else {
    return some(x);
  }
}

function null_to_opt(x) {
  if (x === null) {
    return ;
  } else {
    return some(x);
  }
}

function valFromOption(x) {
  if (!(x !== null && x.BS_PRIVATE_NESTED_SOME_NONE !== undefined)) {
    return x;
  }
  var depth = x.BS_PRIVATE_NESTED_SOME_NONE;
  if (depth === 0) {
    return ;
  } else {
    return {
            BS_PRIVATE_NESTED_SOME_NONE: depth - 1 | 0
          };
  }
}

function option_get(x) {
  if (x === undefined) {
    return ;
  } else {
    return valFromOption(x);
  }
}

function option_unwrap(x) {
  if (x !== undefined) {
    return x.VAL;
  } else {
    return x;
  }
}

exports.nullable_to_opt = nullable_to_opt;
exports.undefined_to_opt = undefined_to_opt;
exports.null_to_opt = null_to_opt;
exports.valFromOption = valFromOption;
exports.some = some;
exports.isNested = isNested;
exports.option_get = option_get;
exports.option_unwrap = option_unwrap;
/* No side effect */


/***/ }),

/***/ "./node_modules/bs-platform/lib/js/caml_primitive.js":
/*!***********************************************************!*\
  !*** ./node_modules/bs-platform/lib/js/caml_primitive.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";



function caml_int_compare(x, y) {
  if (x < y) {
    return -1;
  } else if (x === y) {
    return 0;
  } else {
    return 1;
  }
}

function caml_bool_compare(x, y) {
  if (x) {
    if (y) {
      return 0;
    } else {
      return 1;
    }
  } else if (y) {
    return -1;
  } else {
    return 0;
  }
}

function caml_float_compare(x, y) {
  if (x === y) {
    return 0;
  } else if (x < y) {
    return -1;
  } else if (x > y || x === x) {
    return 1;
  } else if (y === y) {
    return -1;
  } else {
    return 0;
  }
}

function caml_string_compare(s1, s2) {
  if (s1 === s2) {
    return 0;
  } else if (s1 < s2) {
    return -1;
  } else {
    return 1;
  }
}

function caml_bool_min(x, y) {
  if (x) {
    return y;
  } else {
    return x;
  }
}

function caml_int_min(x, y) {
  if (x < y) {
    return x;
  } else {
    return y;
  }
}

function caml_float_min(x, y) {
  if (x < y) {
    return x;
  } else {
    return y;
  }
}

function caml_string_min(x, y) {
  if (x < y) {
    return x;
  } else {
    return y;
  }
}

function caml_nativeint_min(x, y) {
  if (x < y) {
    return x;
  } else {
    return y;
  }
}

function caml_int32_min(x, y) {
  if (x < y) {
    return x;
  } else {
    return y;
  }
}

function caml_bool_max(x, y) {
  if (x) {
    return x;
  } else {
    return y;
  }
}

function caml_int_max(x, y) {
  if (x > y) {
    return x;
  } else {
    return y;
  }
}

function caml_float_max(x, y) {
  if (x > y) {
    return x;
  } else {
    return y;
  }
}

function caml_string_max(x, y) {
  if (x > y) {
    return x;
  } else {
    return y;
  }
}

function caml_nativeint_max(x, y) {
  if (x > y) {
    return x;
  } else {
    return y;
  }
}

function caml_int32_max(x, y) {
  if (x > y) {
    return x;
  } else {
    return y;
  }
}

var caml_nativeint_compare = caml_int_compare;

var caml_int32_compare = caml_int_compare;

exports.caml_int_compare = caml_int_compare;
exports.caml_bool_compare = caml_bool_compare;
exports.caml_float_compare = caml_float_compare;
exports.caml_nativeint_compare = caml_nativeint_compare;
exports.caml_string_compare = caml_string_compare;
exports.caml_int32_compare = caml_int32_compare;
exports.caml_bool_min = caml_bool_min;
exports.caml_int_min = caml_int_min;
exports.caml_float_min = caml_float_min;
exports.caml_string_min = caml_string_min;
exports.caml_nativeint_min = caml_nativeint_min;
exports.caml_int32_min = caml_int32_min;
exports.caml_bool_max = caml_bool_max;
exports.caml_int_max = caml_int_max;
exports.caml_float_max = caml_float_max;
exports.caml_string_max = caml_string_max;
exports.caml_nativeint_max = caml_nativeint_max;
exports.caml_int32_max = caml_int32_max;
/* No side effect */


/***/ }),

/***/ "./node_modules/bs-platform/lib/js/caml_string.js":
/*!********************************************************!*\
  !*** ./node_modules/bs-platform/lib/js/caml_string.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";



function get(s, i) {
  if (i >= s.length || i < 0) {
    throw {
          RE_EXN_ID: "Invalid_argument",
          _1: "index out of bounds",
          Error: new Error()
        };
  }
  return s.charCodeAt(i);
}

function make(n, ch) {
  return String.fromCharCode(ch).repeat(n);
}

exports.get = get;
exports.make = make;
/* No side effect */


/***/ }),

/***/ "./node_modules/bs-platform/lib/js/caml_sys.js":
/*!*****************************************************!*\
  !*** ./node_modules/bs-platform/lib/js/caml_sys.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";



function caml_sys_getenv(s) {
  if (typeof process === "undefined" || process.env === undefined) {
    throw {
          RE_EXN_ID: "Not_found",
          Error: new Error()
        };
  }
  var x = process.env[s];
  if (x !== undefined) {
    return x;
  }
  throw {
        RE_EXN_ID: "Not_found",
        Error: new Error()
      };
}

var os_type = (function(_){
  if(typeof process !== 'undefined' && process.platform === 'win32'){
        return "Win32"    
  }
  else {
    return "Unix"
  }
});

function caml_sys_time(param) {
  if (typeof process === "undefined" || process.uptime === undefined) {
    return -1;
  } else {
    return process.uptime();
  }
}

function caml_sys_system_command(_cmd) {
  return 127;
}

var caml_sys_getcwd = (function(param){
    if (typeof process === "undefined" || process.cwd === undefined){
      return "/"  
    }
    return process.cwd()
  });

function caml_sys_get_argv(param) {
  if (typeof process === "undefined") {
    return [
            "",
            [""]
          ];
  }
  var argv = process.argv;
  if (argv == null) {
    return [
            "",
            [""]
          ];
  } else {
    return [
            argv[0],
            argv
          ];
  }
}

function caml_sys_exit(exit_code) {
  if (typeof process !== "undefined") {
    return process.exit(exit_code);
  }
  
}

function caml_sys_is_directory(_s) {
  throw {
        RE_EXN_ID: "Failure",
        _1: "caml_sys_is_directory not implemented",
        Error: new Error()
      };
}

function caml_sys_file_exists(_s) {
  throw {
        RE_EXN_ID: "Failure",
        _1: "caml_sys_file_exists not implemented",
        Error: new Error()
      };
}

exports.caml_sys_getenv = caml_sys_getenv;
exports.caml_sys_time = caml_sys_time;
exports.os_type = os_type;
exports.caml_sys_system_command = caml_sys_system_command;
exports.caml_sys_getcwd = caml_sys_getcwd;
exports.caml_sys_get_argv = caml_sys_get_argv;
exports.caml_sys_exit = caml_sys_exit;
exports.caml_sys_is_directory = caml_sys_is_directory;
exports.caml_sys_file_exists = caml_sys_file_exists;
/* No side effect */


/***/ }),

/***/ "./node_modules/bs-platform/lib/js/camlinternalFormatBasics.js":
/*!*********************************************************************!*\
  !*** ./node_modules/bs-platform/lib/js/camlinternalFormatBasics.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";



function erase_rel(rest) {
  if (typeof rest === "number") {
    return /* End_of_fmtty */0;
  }
  switch (rest.TAG | 0) {
    case /* Char_ty */0 :
        return {
                TAG: /* Char_ty */0,
                _0: erase_rel(rest._0)
              };
    case /* String_ty */1 :
        return {
                TAG: /* String_ty */1,
                _0: erase_rel(rest._0)
              };
    case /* Int_ty */2 :
        return {
                TAG: /* Int_ty */2,
                _0: erase_rel(rest._0)
              };
    case /* Int32_ty */3 :
        return {
                TAG: /* Int32_ty */3,
                _0: erase_rel(rest._0)
              };
    case /* Nativeint_ty */4 :
        return {
                TAG: /* Nativeint_ty */4,
                _0: erase_rel(rest._0)
              };
    case /* Int64_ty */5 :
        return {
                TAG: /* Int64_ty */5,
                _0: erase_rel(rest._0)
              };
    case /* Float_ty */6 :
        return {
                TAG: /* Float_ty */6,
                _0: erase_rel(rest._0)
              };
    case /* Bool_ty */7 :
        return {
                TAG: /* Bool_ty */7,
                _0: erase_rel(rest._0)
              };
    case /* Format_arg_ty */8 :
        return {
                TAG: /* Format_arg_ty */8,
                _0: rest._0,
                _1: erase_rel(rest._1)
              };
    case /* Format_subst_ty */9 :
        var ty1 = rest._0;
        return {
                TAG: /* Format_subst_ty */9,
                _0: ty1,
                _1: ty1,
                _2: erase_rel(rest._2)
              };
    case /* Alpha_ty */10 :
        return {
                TAG: /* Alpha_ty */10,
                _0: erase_rel(rest._0)
              };
    case /* Theta_ty */11 :
        return {
                TAG: /* Theta_ty */11,
                _0: erase_rel(rest._0)
              };
    case /* Any_ty */12 :
        return {
                TAG: /* Any_ty */12,
                _0: erase_rel(rest._0)
              };
    case /* Reader_ty */13 :
        return {
                TAG: /* Reader_ty */13,
                _0: erase_rel(rest._0)
              };
    case /* Ignored_reader_ty */14 :
        return {
                TAG: /* Ignored_reader_ty */14,
                _0: erase_rel(rest._0)
              };
    
  }
}

function concat_fmtty(fmtty1, fmtty2) {
  if (typeof fmtty1 === "number") {
    return fmtty2;
  }
  switch (fmtty1.TAG | 0) {
    case /* Char_ty */0 :
        return {
                TAG: /* Char_ty */0,
                _0: concat_fmtty(fmtty1._0, fmtty2)
              };
    case /* String_ty */1 :
        return {
                TAG: /* String_ty */1,
                _0: concat_fmtty(fmtty1._0, fmtty2)
              };
    case /* Int_ty */2 :
        return {
                TAG: /* Int_ty */2,
                _0: concat_fmtty(fmtty1._0, fmtty2)
              };
    case /* Int32_ty */3 :
        return {
                TAG: /* Int32_ty */3,
                _0: concat_fmtty(fmtty1._0, fmtty2)
              };
    case /* Nativeint_ty */4 :
        return {
                TAG: /* Nativeint_ty */4,
                _0: concat_fmtty(fmtty1._0, fmtty2)
              };
    case /* Int64_ty */5 :
        return {
                TAG: /* Int64_ty */5,
                _0: concat_fmtty(fmtty1._0, fmtty2)
              };
    case /* Float_ty */6 :
        return {
                TAG: /* Float_ty */6,
                _0: concat_fmtty(fmtty1._0, fmtty2)
              };
    case /* Bool_ty */7 :
        return {
                TAG: /* Bool_ty */7,
                _0: concat_fmtty(fmtty1._0, fmtty2)
              };
    case /* Format_arg_ty */8 :
        return {
                TAG: /* Format_arg_ty */8,
                _0: fmtty1._0,
                _1: concat_fmtty(fmtty1._1, fmtty2)
              };
    case /* Format_subst_ty */9 :
        return {
                TAG: /* Format_subst_ty */9,
                _0: fmtty1._0,
                _1: fmtty1._1,
                _2: concat_fmtty(fmtty1._2, fmtty2)
              };
    case /* Alpha_ty */10 :
        return {
                TAG: /* Alpha_ty */10,
                _0: concat_fmtty(fmtty1._0, fmtty2)
              };
    case /* Theta_ty */11 :
        return {
                TAG: /* Theta_ty */11,
                _0: concat_fmtty(fmtty1._0, fmtty2)
              };
    case /* Any_ty */12 :
        return {
                TAG: /* Any_ty */12,
                _0: concat_fmtty(fmtty1._0, fmtty2)
              };
    case /* Reader_ty */13 :
        return {
                TAG: /* Reader_ty */13,
                _0: concat_fmtty(fmtty1._0, fmtty2)
              };
    case /* Ignored_reader_ty */14 :
        return {
                TAG: /* Ignored_reader_ty */14,
                _0: concat_fmtty(fmtty1._0, fmtty2)
              };
    
  }
}

function concat_fmt(fmt1, fmt2) {
  if (typeof fmt1 === "number") {
    return fmt2;
  }
  switch (fmt1.TAG | 0) {
    case /* Char */0 :
        return {
                TAG: /* Char */0,
                _0: concat_fmt(fmt1._0, fmt2)
              };
    case /* Caml_char */1 :
        return {
                TAG: /* Caml_char */1,
                _0: concat_fmt(fmt1._0, fmt2)
              };
    case /* String */2 :
        return {
                TAG: /* String */2,
                _0: fmt1._0,
                _1: concat_fmt(fmt1._1, fmt2)
              };
    case /* Caml_string */3 :
        return {
                TAG: /* Caml_string */3,
                _0: fmt1._0,
                _1: concat_fmt(fmt1._1, fmt2)
              };
    case /* Int */4 :
        return {
                TAG: /* Int */4,
                _0: fmt1._0,
                _1: fmt1._1,
                _2: fmt1._2,
                _3: concat_fmt(fmt1._3, fmt2)
              };
    case /* Int32 */5 :
        return {
                TAG: /* Int32 */5,
                _0: fmt1._0,
                _1: fmt1._1,
                _2: fmt1._2,
                _3: concat_fmt(fmt1._3, fmt2)
              };
    case /* Nativeint */6 :
        return {
                TAG: /* Nativeint */6,
                _0: fmt1._0,
                _1: fmt1._1,
                _2: fmt1._2,
                _3: concat_fmt(fmt1._3, fmt2)
              };
    case /* Int64 */7 :
        return {
                TAG: /* Int64 */7,
                _0: fmt1._0,
                _1: fmt1._1,
                _2: fmt1._2,
                _3: concat_fmt(fmt1._3, fmt2)
              };
    case /* Float */8 :
        return {
                TAG: /* Float */8,
                _0: fmt1._0,
                _1: fmt1._1,
                _2: fmt1._2,
                _3: concat_fmt(fmt1._3, fmt2)
              };
    case /* Bool */9 :
        return {
                TAG: /* Bool */9,
                _0: fmt1._0,
                _1: concat_fmt(fmt1._1, fmt2)
              };
    case /* Flush */10 :
        return {
                TAG: /* Flush */10,
                _0: concat_fmt(fmt1._0, fmt2)
              };
    case /* String_literal */11 :
        return {
                TAG: /* String_literal */11,
                _0: fmt1._0,
                _1: concat_fmt(fmt1._1, fmt2)
              };
    case /* Char_literal */12 :
        return {
                TAG: /* Char_literal */12,
                _0: fmt1._0,
                _1: concat_fmt(fmt1._1, fmt2)
              };
    case /* Format_arg */13 :
        return {
                TAG: /* Format_arg */13,
                _0: fmt1._0,
                _1: fmt1._1,
                _2: concat_fmt(fmt1._2, fmt2)
              };
    case /* Format_subst */14 :
        return {
                TAG: /* Format_subst */14,
                _0: fmt1._0,
                _1: fmt1._1,
                _2: concat_fmt(fmt1._2, fmt2)
              };
    case /* Alpha */15 :
        return {
                TAG: /* Alpha */15,
                _0: concat_fmt(fmt1._0, fmt2)
              };
    case /* Theta */16 :
        return {
                TAG: /* Theta */16,
                _0: concat_fmt(fmt1._0, fmt2)
              };
    case /* Formatting_lit */17 :
        return {
                TAG: /* Formatting_lit */17,
                _0: fmt1._0,
                _1: concat_fmt(fmt1._1, fmt2)
              };
    case /* Formatting_gen */18 :
        return {
                TAG: /* Formatting_gen */18,
                _0: fmt1._0,
                _1: concat_fmt(fmt1._1, fmt2)
              };
    case /* Reader */19 :
        return {
                TAG: /* Reader */19,
                _0: concat_fmt(fmt1._0, fmt2)
              };
    case /* Scan_char_set */20 :
        return {
                TAG: /* Scan_char_set */20,
                _0: fmt1._0,
                _1: fmt1._1,
                _2: concat_fmt(fmt1._2, fmt2)
              };
    case /* Scan_get_counter */21 :
        return {
                TAG: /* Scan_get_counter */21,
                _0: fmt1._0,
                _1: concat_fmt(fmt1._1, fmt2)
              };
    case /* Scan_next_char */22 :
        return {
                TAG: /* Scan_next_char */22,
                _0: concat_fmt(fmt1._0, fmt2)
              };
    case /* Ignored_param */23 :
        return {
                TAG: /* Ignored_param */23,
                _0: fmt1._0,
                _1: concat_fmt(fmt1._1, fmt2)
              };
    case /* Custom */24 :
        return {
                TAG: /* Custom */24,
                _0: fmt1._0,
                _1: fmt1._1,
                _2: concat_fmt(fmt1._2, fmt2)
              };
    
  }
}

exports.concat_fmtty = concat_fmtty;
exports.erase_rel = erase_rel;
exports.concat_fmt = concat_fmt;
/* No side effect */


/***/ }),

/***/ "./node_modules/bs-platform/lib/js/char.js":
/*!*************************************************!*\
  !*** ./node_modules/bs-platform/lib/js/char.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Caml_bytes = __webpack_require__(/*! ./caml_bytes.js */ "./node_modules/bs-platform/lib/js/caml_bytes.js");

function chr(n) {
  if (n < 0 || n > 255) {
    throw {
          RE_EXN_ID: "Invalid_argument",
          _1: "Char.chr",
          Error: new Error()
        };
  }
  return n;
}

function escaped(c) {
  var exit = 0;
  if (c >= 40) {
    if (c === 92) {
      return "\\\\";
    }
    exit = c >= 127 ? 1 : 2;
  } else if (c >= 32) {
    if (c >= 39) {
      return "\\'";
    }
    exit = 2;
  } else if (c >= 14) {
    exit = 1;
  } else {
    switch (c) {
      case 8 :
          return "\\b";
      case 9 :
          return "\\t";
      case 10 :
          return "\\n";
      case 0 :
      case 1 :
      case 2 :
      case 3 :
      case 4 :
      case 5 :
      case 6 :
      case 7 :
      case 11 :
      case 12 :
          exit = 1;
          break;
      case 13 :
          return "\\r";
      
    }
  }
  switch (exit) {
    case 1 :
        var s = [
          0,
          0,
          0,
          0
        ];
        s[0] = /* "\\" */92;
        s[1] = 48 + (c / 100 | 0) | 0;
        s[2] = 48 + (c / 10 | 0) % 10 | 0;
        s[3] = 48 + c % 10 | 0;
        return Caml_bytes.bytes_to_string(s);
    case 2 :
        var s$1 = [0];
        s$1[0] = c;
        return Caml_bytes.bytes_to_string(s$1);
    
  }
}

function lowercase(c) {
  if (c >= /* "A" */65 && c <= /* "Z" */90 || c >= /* "\192" */192 && c <= /* "\214" */214 || c >= /* "\216" */216 && c <= /* "\222" */222) {
    return c + 32 | 0;
  } else {
    return c;
  }
}

function uppercase(c) {
  if (c >= /* "a" */97 && c <= /* "z" */122 || c >= /* "\224" */224 && c <= /* "\246" */246 || c >= /* "\248" */248 && c <= /* "\254" */254) {
    return c - 32 | 0;
  } else {
    return c;
  }
}

function lowercase_ascii(c) {
  if (c >= /* "A" */65 && c <= /* "Z" */90) {
    return c + 32 | 0;
  } else {
    return c;
  }
}

function uppercase_ascii(c) {
  if (c >= /* "a" */97 && c <= /* "z" */122) {
    return c - 32 | 0;
  } else {
    return c;
  }
}

function compare(c1, c2) {
  return c1 - c2 | 0;
}

function equal(c1, c2) {
  return (c1 - c2 | 0) === 0;
}

exports.chr = chr;
exports.escaped = escaped;
exports.lowercase = lowercase;
exports.uppercase = uppercase;
exports.lowercase_ascii = lowercase_ascii;
exports.uppercase_ascii = uppercase_ascii;
exports.compare = compare;
exports.equal = equal;
/* No side effect */


/***/ }),

/***/ "./node_modules/bs-platform/lib/js/curry.js":
/*!**************************************************!*\
  !*** ./node_modules/bs-platform/lib/js/curry.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Caml_array = __webpack_require__(/*! ./caml_array.js */ "./node_modules/bs-platform/lib/js/caml_array.js");

function app(_f, _args) {
  while(true) {
    var args = _args;
    var f = _f;
    var init_arity = f.length;
    var arity = init_arity === 0 ? 1 : init_arity;
    var len = args.length;
    var d = arity - len | 0;
    if (d === 0) {
      return f.apply(null, args);
    }
    if (d >= 0) {
      return (function(f,args){
      return function (x) {
        return app(f, args.concat([x]));
      }
      }(f,args));
    }
    _args = Caml_array.caml_array_sub(args, arity, -d | 0);
    _f = f.apply(null, Caml_array.caml_array_sub(args, 0, arity));
    continue ;
  };
}

function _1(o, a0) {
  var arity = o.length;
  if (arity === 1) {
    return o(a0);
  } else {
    switch (arity) {
      case 1 :
          return o(a0);
      case 2 :
          return function (param) {
            return o(a0, param);
          };
      case 3 :
          return function (param, param$1) {
            return o(a0, param, param$1);
          };
      case 4 :
          return function (param, param$1, param$2) {
            return o(a0, param, param$1, param$2);
          };
      case 5 :
          return function (param, param$1, param$2, param$3) {
            return o(a0, param, param$1, param$2, param$3);
          };
      case 6 :
          return function (param, param$1, param$2, param$3, param$4) {
            return o(a0, param, param$1, param$2, param$3, param$4);
          };
      case 7 :
          return function (param, param$1, param$2, param$3, param$4, param$5) {
            return o(a0, param, param$1, param$2, param$3, param$4, param$5);
          };
      default:
        return app(o, [a0]);
    }
  }
}

function __1(o) {
  var arity = o.length;
  if (arity === 1) {
    return o;
  } else {
    return function (a0) {
      return _1(o, a0);
    };
  }
}

function _2(o, a0, a1) {
  var arity = o.length;
  if (arity === 2) {
    return o(a0, a1);
  } else {
    switch (arity) {
      case 1 :
          return app(o(a0), [a1]);
      case 2 :
          return o(a0, a1);
      case 3 :
          return function (param) {
            return o(a0, a1, param);
          };
      case 4 :
          return function (param, param$1) {
            return o(a0, a1, param, param$1);
          };
      case 5 :
          return function (param, param$1, param$2) {
            return o(a0, a1, param, param$1, param$2);
          };
      case 6 :
          return function (param, param$1, param$2, param$3) {
            return o(a0, a1, param, param$1, param$2, param$3);
          };
      case 7 :
          return function (param, param$1, param$2, param$3, param$4) {
            return o(a0, a1, param, param$1, param$2, param$3, param$4);
          };
      default:
        return app(o, [
                    a0,
                    a1
                  ]);
    }
  }
}

function __2(o) {
  var arity = o.length;
  if (arity === 2) {
    return o;
  } else {
    return function (a0, a1) {
      return _2(o, a0, a1);
    };
  }
}

function _3(o, a0, a1, a2) {
  var arity = o.length;
  if (arity === 3) {
    return o(a0, a1, a2);
  } else {
    switch (arity) {
      case 1 :
          return app(o(a0), [
                      a1,
                      a2
                    ]);
      case 2 :
          return app(o(a0, a1), [a2]);
      case 3 :
          return o(a0, a1, a2);
      case 4 :
          return function (param) {
            return o(a0, a1, a2, param);
          };
      case 5 :
          return function (param, param$1) {
            return o(a0, a1, a2, param, param$1);
          };
      case 6 :
          return function (param, param$1, param$2) {
            return o(a0, a1, a2, param, param$1, param$2);
          };
      case 7 :
          return function (param, param$1, param$2, param$3) {
            return o(a0, a1, a2, param, param$1, param$2, param$3);
          };
      default:
        return app(o, [
                    a0,
                    a1,
                    a2
                  ]);
    }
  }
}

function __3(o) {
  var arity = o.length;
  if (arity === 3) {
    return o;
  } else {
    return function (a0, a1, a2) {
      return _3(o, a0, a1, a2);
    };
  }
}

function _4(o, a0, a1, a2, a3) {
  var arity = o.length;
  if (arity === 4) {
    return o(a0, a1, a2, a3);
  } else {
    switch (arity) {
      case 1 :
          return app(o(a0), [
                      a1,
                      a2,
                      a3
                    ]);
      case 2 :
          return app(o(a0, a1), [
                      a2,
                      a3
                    ]);
      case 3 :
          return app(o(a0, a1, a2), [a3]);
      case 4 :
          return o(a0, a1, a2, a3);
      case 5 :
          return function (param) {
            return o(a0, a1, a2, a3, param);
          };
      case 6 :
          return function (param, param$1) {
            return o(a0, a1, a2, a3, param, param$1);
          };
      case 7 :
          return function (param, param$1, param$2) {
            return o(a0, a1, a2, a3, param, param$1, param$2);
          };
      default:
        return app(o, [
                    a0,
                    a1,
                    a2,
                    a3
                  ]);
    }
  }
}

function __4(o) {
  var arity = o.length;
  if (arity === 4) {
    return o;
  } else {
    return function (a0, a1, a2, a3) {
      return _4(o, a0, a1, a2, a3);
    };
  }
}

function _5(o, a0, a1, a2, a3, a4) {
  var arity = o.length;
  if (arity === 5) {
    return o(a0, a1, a2, a3, a4);
  } else {
    switch (arity) {
      case 1 :
          return app(o(a0), [
                      a1,
                      a2,
                      a3,
                      a4
                    ]);
      case 2 :
          return app(o(a0, a1), [
                      a2,
                      a3,
                      a4
                    ]);
      case 3 :
          return app(o(a0, a1, a2), [
                      a3,
                      a4
                    ]);
      case 4 :
          return app(o(a0, a1, a2, a3), [a4]);
      case 5 :
          return o(a0, a1, a2, a3, a4);
      case 6 :
          return function (param) {
            return o(a0, a1, a2, a3, a4, param);
          };
      case 7 :
          return function (param, param$1) {
            return o(a0, a1, a2, a3, a4, param, param$1);
          };
      default:
        return app(o, [
                    a0,
                    a1,
                    a2,
                    a3,
                    a4
                  ]);
    }
  }
}

function __5(o) {
  var arity = o.length;
  if (arity === 5) {
    return o;
  } else {
    return function (a0, a1, a2, a3, a4) {
      return _5(o, a0, a1, a2, a3, a4);
    };
  }
}

function _6(o, a0, a1, a2, a3, a4, a5) {
  var arity = o.length;
  if (arity === 6) {
    return o(a0, a1, a2, a3, a4, a5);
  } else {
    switch (arity) {
      case 1 :
          return app(o(a0), [
                      a1,
                      a2,
                      a3,
                      a4,
                      a5
                    ]);
      case 2 :
          return app(o(a0, a1), [
                      a2,
                      a3,
                      a4,
                      a5
                    ]);
      case 3 :
          return app(o(a0, a1, a2), [
                      a3,
                      a4,
                      a5
                    ]);
      case 4 :
          return app(o(a0, a1, a2, a3), [
                      a4,
                      a5
                    ]);
      case 5 :
          return app(o(a0, a1, a2, a3, a4), [a5]);
      case 6 :
          return o(a0, a1, a2, a3, a4, a5);
      case 7 :
          return function (param) {
            return o(a0, a1, a2, a3, a4, a5, param);
          };
      default:
        return app(o, [
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5
                  ]);
    }
  }
}

function __6(o) {
  var arity = o.length;
  if (arity === 6) {
    return o;
  } else {
    return function (a0, a1, a2, a3, a4, a5) {
      return _6(o, a0, a1, a2, a3, a4, a5);
    };
  }
}

function _7(o, a0, a1, a2, a3, a4, a5, a6) {
  var arity = o.length;
  if (arity === 7) {
    return o(a0, a1, a2, a3, a4, a5, a6);
  } else {
    switch (arity) {
      case 1 :
          return app(o(a0), [
                      a1,
                      a2,
                      a3,
                      a4,
                      a5,
                      a6
                    ]);
      case 2 :
          return app(o(a0, a1), [
                      a2,
                      a3,
                      a4,
                      a5,
                      a6
                    ]);
      case 3 :
          return app(o(a0, a1, a2), [
                      a3,
                      a4,
                      a5,
                      a6
                    ]);
      case 4 :
          return app(o(a0, a1, a2, a3), [
                      a4,
                      a5,
                      a6
                    ]);
      case 5 :
          return app(o(a0, a1, a2, a3, a4), [
                      a5,
                      a6
                    ]);
      case 6 :
          return app(o(a0, a1, a2, a3, a4, a5), [a6]);
      case 7 :
          return o(a0, a1, a2, a3, a4, a5, a6);
      default:
        return app(o, [
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                    a6
                  ]);
    }
  }
}

function __7(o) {
  var arity = o.length;
  if (arity === 7) {
    return o;
  } else {
    return function (a0, a1, a2, a3, a4, a5, a6) {
      return _7(o, a0, a1, a2, a3, a4, a5, a6);
    };
  }
}

function _8(o, a0, a1, a2, a3, a4, a5, a6, a7) {
  var arity = o.length;
  if (arity === 8) {
    return o(a0, a1, a2, a3, a4, a5, a6, a7);
  } else {
    switch (arity) {
      case 1 :
          return app(o(a0), [
                      a1,
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7
                    ]);
      case 2 :
          return app(o(a0, a1), [
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7
                    ]);
      case 3 :
          return app(o(a0, a1, a2), [
                      a3,
                      a4,
                      a5,
                      a6,
                      a7
                    ]);
      case 4 :
          return app(o(a0, a1, a2, a3), [
                      a4,
                      a5,
                      a6,
                      a7
                    ]);
      case 5 :
          return app(o(a0, a1, a2, a3, a4), [
                      a5,
                      a6,
                      a7
                    ]);
      case 6 :
          return app(o(a0, a1, a2, a3, a4, a5), [
                      a6,
                      a7
                    ]);
      case 7 :
          return app(o(a0, a1, a2, a3, a4, a5, a6), [a7]);
      default:
        return app(o, [
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                    a6,
                    a7
                  ]);
    }
  }
}

function __8(o) {
  var arity = o.length;
  if (arity === 8) {
    return o;
  } else {
    return function (a0, a1, a2, a3, a4, a5, a6, a7) {
      return _8(o, a0, a1, a2, a3, a4, a5, a6, a7);
    };
  }
}

exports.app = app;
exports._1 = _1;
exports.__1 = __1;
exports._2 = _2;
exports.__2 = __2;
exports._3 = _3;
exports.__3 = __3;
exports._4 = _4;
exports.__4 = __4;
exports._5 = _5;
exports.__5 = __5;
exports._6 = _6;
exports.__6 = __6;
exports._7 = _7;
exports.__7 = __7;
exports._8 = _8;
exports.__8 = __8;
/* No side effect */


/***/ }),

/***/ "./node_modules/bs-platform/lib/js/js_dict.js":
/*!****************************************************!*\
  !*** ./node_modules/bs-platform/lib/js/js_dict.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Caml_option = __webpack_require__(/*! ./caml_option.js */ "./node_modules/bs-platform/lib/js/caml_option.js");

function get(dict, k) {
  if ((k in dict)) {
    return Caml_option.some(dict[k]);
  }
  
}

var unsafeDeleteKey = (function (dict,key){
      delete dict[key];
     });

function entries(dict) {
  var keys = Object.keys(dict);
  var l = keys.length;
  var values = new Array(l);
  for(var i = 0; i < l; ++i){
    var key = keys[i];
    values[i] = [
      key,
      dict[key]
    ];
  }
  return values;
}

function values(dict) {
  var keys = Object.keys(dict);
  var l = keys.length;
  var values$1 = new Array(l);
  for(var i = 0; i < l; ++i){
    values$1[i] = dict[keys[i]];
  }
  return values$1;
}

function fromList(entries) {
  var dict = {};
  var _param = entries;
  while(true) {
    var param = _param;
    if (!param) {
      return dict;
    }
    var match = param.hd;
    dict[match[0]] = match[1];
    _param = param.tl;
    continue ;
  };
}

function fromArray(entries) {
  var dict = {};
  var l = entries.length;
  for(var i = 0; i < l; ++i){
    var match = entries[i];
    dict[match[0]] = match[1];
  }
  return dict;
}

function map(f, source) {
  var target = {};
  var keys = Object.keys(source);
  var l = keys.length;
  for(var i = 0; i < l; ++i){
    var key = keys[i];
    target[key] = f(source[key]);
  }
  return target;
}

exports.get = get;
exports.unsafeDeleteKey = unsafeDeleteKey;
exports.entries = entries;
exports.values = values;
exports.fromList = fromList;
exports.fromArray = fromArray;
exports.map = map;
/* No side effect */


/***/ }),

/***/ "./node_modules/bs-platform/lib/js/js_int.js":
/*!***************************************************!*\
  !*** ./node_modules/bs-platform/lib/js/js_int.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";



function equal(x, y) {
  return x === y;
}

var max = 2147483647;

var min = -2147483648;

exports.equal = equal;
exports.max = max;
exports.min = min;
/* No side effect */


/***/ }),

/***/ "./node_modules/bs-platform/lib/js/js_json.js":
/*!****************************************************!*\
  !*** ./node_modules/bs-platform/lib/js/js_json.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Caml_option = __webpack_require__(/*! ./caml_option.js */ "./node_modules/bs-platform/lib/js/caml_option.js");

function classify(x) {
  var ty = typeof x;
  if (ty === "string") {
    return {
            TAG: /* JSONString */0,
            _0: x
          };
  } else if (ty === "number") {
    return {
            TAG: /* JSONNumber */1,
            _0: x
          };
  } else if (ty === "boolean") {
    if (x === true) {
      return /* JSONTrue */1;
    } else {
      return /* JSONFalse */0;
    }
  } else if (x === null) {
    return /* JSONNull */2;
  } else if (Array.isArray(x)) {
    return {
            TAG: /* JSONArray */3,
            _0: x
          };
  } else {
    return {
            TAG: /* JSONObject */2,
            _0: x
          };
  }
}

function test(x, v) {
  switch (v) {
    case /* String */0 :
        return typeof x === "string";
    case /* Number */1 :
        return typeof x === "number";
    case /* Object */2 :
        if (x !== null && typeof x === "object") {
          return !Array.isArray(x);
        } else {
          return false;
        }
    case /* Array */3 :
        return Array.isArray(x);
    case /* Boolean */4 :
        return typeof x === "boolean";
    case /* Null */5 :
        return x === null;
    
  }
}

function decodeString(json) {
  if (typeof json === "string") {
    return json;
  }
  
}

function decodeNumber(json) {
  if (typeof json === "number") {
    return json;
  }
  
}

function decodeObject(json) {
  if (typeof json === "object" && !Array.isArray(json) && json !== null) {
    return Caml_option.some(json);
  }
  
}

function decodeArray(json) {
  if (Array.isArray(json)) {
    return json;
  }
  
}

function decodeBoolean(json) {
  if (typeof json === "boolean") {
    return json;
  }
  
}

function decodeNull(json) {
  if (json === null) {
    return null;
  }
  
}

var patch = (function (json) {
  var x = [json];
  var q = [{ kind: 0, i: 0, parent: x }];
  while (q.length !== 0) {
    // begin pop the stack
    var cur = q[q.length - 1];
    if (cur.kind === 0) {
      cur.val = cur.parent[cur.i]; // patch the undefined value for array
      if (++cur.i === cur.parent.length) {
        q.pop();
      }
    } else {
      q.pop();
    }
    // finish
    var task = cur.val;
    if (typeof task === "object") {
      if (Array.isArray(task) && task.length !== 0) {
        q.push({ kind: 0, i: 0, parent: task, val: undefined });
      } else {
        for (var k in task) {
          if (k === "RE_PRIVATE_NONE") {
            if (cur.kind === 0) {
              cur.parent[cur.i - 1] = undefined;
            } else {
              cur.parent[cur.i] = undefined;
            }
            continue;
          }
          q.push({ kind: 1, i: k, parent: task, val: task[k] });
        }
      }
    }
  }
  return x[0];
});

function serializeExn(x) {
  return (function(obj){
  var output= JSON.stringify(obj,function(_,value){
      if(value===undefined){
          return {RE_PRIVATE_NONE : true}
      }
    return value
  });
  
 if(output === undefined){
   // JSON.stringify will raise TypeError when it detects cylic objects
   throw new TypeError("output is undefined")
 }
 return output 
 })(x);
}

function deserializeUnsafe(s) {
  return patch(JSON.parse(s));
}

exports.classify = classify;
exports.test = test;
exports.decodeString = decodeString;
exports.decodeNumber = decodeNumber;
exports.decodeObject = decodeObject;
exports.decodeArray = decodeArray;
exports.decodeBoolean = decodeBoolean;
exports.decodeNull = decodeNull;
exports.deserializeUnsafe = deserializeUnsafe;
exports.serializeExn = serializeExn;
/* No side effect */


/***/ }),

/***/ "./node_modules/bs-platform/lib/js/js_math.js":
/*!****************************************************!*\
  !*** ./node_modules/bs-platform/lib/js/js_math.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Js_int = __webpack_require__(/*! ./js_int.js */ "./node_modules/bs-platform/lib/js/js_int.js");

function unsafe_ceil(prim) {
  return Math.ceil(prim);
}

function ceil_int(f) {
  if (f > Js_int.max) {
    return Js_int.max;
  } else if (f < Js_int.min) {
    return Js_int.min;
  } else {
    return Math.ceil(f);
  }
}

function unsafe_floor(prim) {
  return Math.floor(prim);
}

function floor_int(f) {
  if (f > Js_int.max) {
    return Js_int.max;
  } else if (f < Js_int.min) {
    return Js_int.min;
  } else {
    return Math.floor(f);
  }
}

function random_int(min, max) {
  return floor_int(Math.random() * (max - min | 0)) + min | 0;
}

var ceil = ceil_int;

var floor = floor_int;

exports.unsafe_ceil = unsafe_ceil;
exports.ceil_int = ceil_int;
exports.ceil = ceil;
exports.unsafe_floor = unsafe_floor;
exports.floor_int = floor_int;
exports.floor = floor;
exports.random_int = random_int;
/* No side effect */


/***/ }),

/***/ "./node_modules/bs-platform/lib/js/js_option.js":
/*!******************************************************!*\
  !*** ./node_modules/bs-platform/lib/js/js_option.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Caml_option = __webpack_require__(/*! ./caml_option.js */ "./node_modules/bs-platform/lib/js/caml_option.js");

function some(x) {
  return Caml_option.some(x);
}

function isSome(param) {
  return param !== undefined;
}

function isSomeValue(eq, v, x) {
  if (x !== undefined) {
    return eq(v, Caml_option.valFromOption(x));
  } else {
    return false;
  }
}

function isNone(param) {
  return param === undefined;
}

function getExn(x) {
  if (x !== undefined) {
    return Caml_option.valFromOption(x);
  }
  throw new Error("getExn");
}

function equal(eq, a, b) {
  if (a !== undefined) {
    if (b !== undefined) {
      return eq(Caml_option.valFromOption(a), Caml_option.valFromOption(b));
    } else {
      return false;
    }
  } else {
    return b === undefined;
  }
}

function andThen(f, x) {
  if (x !== undefined) {
    return f(Caml_option.valFromOption(x));
  }
  
}

function map(f, x) {
  if (x !== undefined) {
    return Caml_option.some(f(Caml_option.valFromOption(x)));
  }
  
}

function getWithDefault(a, x) {
  if (x !== undefined) {
    return Caml_option.valFromOption(x);
  } else {
    return a;
  }
}

function filter(f, x) {
  if (x === undefined) {
    return ;
  }
  var x$1 = Caml_option.valFromOption(x);
  if (f(x$1)) {
    return Caml_option.some(x$1);
  }
  
}

function firstSome(a, b) {
  if (a !== undefined) {
    return a;
  } else if (b !== undefined) {
    return b;
  } else {
    return ;
  }
}

var $$default = getWithDefault;

exports.some = some;
exports.isSome = isSome;
exports.isSomeValue = isSomeValue;
exports.isNone = isNone;
exports.getExn = getExn;
exports.equal = equal;
exports.andThen = andThen;
exports.map = map;
exports.getWithDefault = getWithDefault;
exports.$$default = $$default;
exports.default = $$default;
exports.__esModule = true;
exports.filter = filter;
exports.firstSome = firstSome;
/* No side effect */


/***/ }),

/***/ "./node_modules/bs-platform/lib/js/list.js":
/*!*************************************************!*\
  !*** ./node_modules/bs-platform/lib/js/list.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Curry = __webpack_require__(/*! ./curry.js */ "./node_modules/bs-platform/lib/js/curry.js");
var Caml_obj = __webpack_require__(/*! ./caml_obj.js */ "./node_modules/bs-platform/lib/js/caml_obj.js");
var Pervasives = __webpack_require__(/*! ./pervasives.js */ "./node_modules/bs-platform/lib/js/pervasives.js");
var Caml_option = __webpack_require__(/*! ./caml_option.js */ "./node_modules/bs-platform/lib/js/caml_option.js");

function length(l) {
  var _len = 0;
  var _param = l;
  while(true) {
    var param = _param;
    var len = _len;
    if (!param) {
      return len;
    }
    _param = param.tl;
    _len = len + 1 | 0;
    continue ;
  };
}

function cons(a, l) {
  return {
          hd: a,
          tl: l
        };
}

function hd(param) {
  if (param) {
    return param.hd;
  }
  throw {
        RE_EXN_ID: "Failure",
        _1: "hd",
        Error: new Error()
      };
}

function tl(param) {
  if (param) {
    return param.tl;
  }
  throw {
        RE_EXN_ID: "Failure",
        _1: "tl",
        Error: new Error()
      };
}

function nth(l, n) {
  if (n < 0) {
    throw {
          RE_EXN_ID: "Invalid_argument",
          _1: "List.nth",
          Error: new Error()
        };
  }
  var _l = l;
  var _n = n;
  while(true) {
    var n$1 = _n;
    var l$1 = _l;
    if (l$1) {
      if (n$1 === 0) {
        return l$1.hd;
      }
      _n = n$1 - 1 | 0;
      _l = l$1.tl;
      continue ;
    }
    throw {
          RE_EXN_ID: "Failure",
          _1: "nth",
          Error: new Error()
        };
  };
}

function nth_opt(l, n) {
  if (n < 0) {
    throw {
          RE_EXN_ID: "Invalid_argument",
          _1: "List.nth",
          Error: new Error()
        };
  }
  var _l = l;
  var _n = n;
  while(true) {
    var n$1 = _n;
    var l$1 = _l;
    if (!l$1) {
      return ;
    }
    if (n$1 === 0) {
      return Caml_option.some(l$1.hd);
    }
    _n = n$1 - 1 | 0;
    _l = l$1.tl;
    continue ;
  };
}

function rev_append(_l1, _l2) {
  while(true) {
    var l2 = _l2;
    var l1 = _l1;
    if (!l1) {
      return l2;
    }
    _l2 = {
      hd: l1.hd,
      tl: l2
    };
    _l1 = l1.tl;
    continue ;
  };
}

function rev(l) {
  return rev_append(l, /* [] */0);
}

function init_tailrec_aux(_acc, _i, n, f) {
  while(true) {
    var i = _i;
    var acc = _acc;
    if (i >= n) {
      return acc;
    }
    _i = i + 1 | 0;
    _acc = {
      hd: Curry._1(f, i),
      tl: acc
    };
    continue ;
  };
}

function init_aux(i, n, f) {
  if (i >= n) {
    return /* [] */0;
  }
  var r = Curry._1(f, i);
  return {
          hd: r,
          tl: init_aux(i + 1 | 0, n, f)
        };
}

function init(len, f) {
  if (len < 0) {
    throw {
          RE_EXN_ID: "Invalid_argument",
          _1: "List.init",
          Error: new Error()
        };
  }
  if (len > 10000) {
    return rev_append(init_tailrec_aux(/* [] */0, 0, len, f), /* [] */0);
  } else {
    return init_aux(0, len, f);
  }
}

function flatten(param) {
  if (param) {
    return Pervasives.$at(param.hd, flatten(param.tl));
  } else {
    return /* [] */0;
  }
}

function map(f, param) {
  if (!param) {
    return /* [] */0;
  }
  var r = Curry._1(f, param.hd);
  return {
          hd: r,
          tl: map(f, param.tl)
        };
}

function mapi(i, f, param) {
  if (!param) {
    return /* [] */0;
  }
  var r = Curry._2(f, i, param.hd);
  return {
          hd: r,
          tl: mapi(i + 1 | 0, f, param.tl)
        };
}

function mapi$1(f, l) {
  return mapi(0, f, l);
}

function rev_map(f, l) {
  var _accu = /* [] */0;
  var _param = l;
  while(true) {
    var param = _param;
    var accu = _accu;
    if (!param) {
      return accu;
    }
    _param = param.tl;
    _accu = {
      hd: Curry._1(f, param.hd),
      tl: accu
    };
    continue ;
  };
}

function iter(f, _param) {
  while(true) {
    var param = _param;
    if (!param) {
      return ;
    }
    Curry._1(f, param.hd);
    _param = param.tl;
    continue ;
  };
}

function iteri(f, l) {
  var _i = 0;
  var _param = l;
  while(true) {
    var param = _param;
    var i = _i;
    if (!param) {
      return ;
    }
    Curry._2(f, i, param.hd);
    _param = param.tl;
    _i = i + 1 | 0;
    continue ;
  };
}

function fold_left(f, _accu, _l) {
  while(true) {
    var l = _l;
    var accu = _accu;
    if (!l) {
      return accu;
    }
    _l = l.tl;
    _accu = Curry._2(f, accu, l.hd);
    continue ;
  };
}

function fold_right(f, l, accu) {
  if (l) {
    return Curry._2(f, l.hd, fold_right(f, l.tl, accu));
  } else {
    return accu;
  }
}

function map2(f, l1, l2) {
  if (l1) {
    if (l2) {
      var r = Curry._2(f, l1.hd, l2.hd);
      return {
              hd: r,
              tl: map2(f, l1.tl, l2.tl)
            };
    }
    throw {
          RE_EXN_ID: "Invalid_argument",
          _1: "List.map2",
          Error: new Error()
        };
  }
  if (!l2) {
    return /* [] */0;
  }
  throw {
        RE_EXN_ID: "Invalid_argument",
        _1: "List.map2",
        Error: new Error()
      };
}

function rev_map2(f, l1, l2) {
  var _accu = /* [] */0;
  var _l1 = l1;
  var _l2 = l2;
  while(true) {
    var l2$1 = _l2;
    var l1$1 = _l1;
    var accu = _accu;
    if (l1$1) {
      if (l2$1) {
        _l2 = l2$1.tl;
        _l1 = l1$1.tl;
        _accu = {
          hd: Curry._2(f, l1$1.hd, l2$1.hd),
          tl: accu
        };
        continue ;
      }
      throw {
            RE_EXN_ID: "Invalid_argument",
            _1: "List.rev_map2",
            Error: new Error()
          };
    }
    if (l2$1) {
      throw {
            RE_EXN_ID: "Invalid_argument",
            _1: "List.rev_map2",
            Error: new Error()
          };
    }
    return accu;
  };
}

function iter2(f, _l1, _l2) {
  while(true) {
    var l2 = _l2;
    var l1 = _l1;
    if (l1) {
      if (l2) {
        Curry._2(f, l1.hd, l2.hd);
        _l2 = l2.tl;
        _l1 = l1.tl;
        continue ;
      }
      throw {
            RE_EXN_ID: "Invalid_argument",
            _1: "List.iter2",
            Error: new Error()
          };
    }
    if (!l2) {
      return ;
    }
    throw {
          RE_EXN_ID: "Invalid_argument",
          _1: "List.iter2",
          Error: new Error()
        };
  };
}

function fold_left2(f, _accu, _l1, _l2) {
  while(true) {
    var l2 = _l2;
    var l1 = _l1;
    var accu = _accu;
    if (l1) {
      if (l2) {
        _l2 = l2.tl;
        _l1 = l1.tl;
        _accu = Curry._3(f, accu, l1.hd, l2.hd);
        continue ;
      }
      throw {
            RE_EXN_ID: "Invalid_argument",
            _1: "List.fold_left2",
            Error: new Error()
          };
    }
    if (l2) {
      throw {
            RE_EXN_ID: "Invalid_argument",
            _1: "List.fold_left2",
            Error: new Error()
          };
    }
    return accu;
  };
}

function fold_right2(f, l1, l2, accu) {
  if (l1) {
    if (l2) {
      return Curry._3(f, l1.hd, l2.hd, fold_right2(f, l1.tl, l2.tl, accu));
    }
    throw {
          RE_EXN_ID: "Invalid_argument",
          _1: "List.fold_right2",
          Error: new Error()
        };
  }
  if (l2) {
    throw {
          RE_EXN_ID: "Invalid_argument",
          _1: "List.fold_right2",
          Error: new Error()
        };
  }
  return accu;
}

function for_all(p, _param) {
  while(true) {
    var param = _param;
    if (!param) {
      return true;
    }
    if (!Curry._1(p, param.hd)) {
      return false;
    }
    _param = param.tl;
    continue ;
  };
}

function exists(p, _param) {
  while(true) {
    var param = _param;
    if (!param) {
      return false;
    }
    if (Curry._1(p, param.hd)) {
      return true;
    }
    _param = param.tl;
    continue ;
  };
}

function for_all2(p, _l1, _l2) {
  while(true) {
    var l2 = _l2;
    var l1 = _l1;
    if (l1) {
      if (l2) {
        if (!Curry._2(p, l1.hd, l2.hd)) {
          return false;
        }
        _l2 = l2.tl;
        _l1 = l1.tl;
        continue ;
      }
      throw {
            RE_EXN_ID: "Invalid_argument",
            _1: "List.for_all2",
            Error: new Error()
          };
    }
    if (!l2) {
      return true;
    }
    throw {
          RE_EXN_ID: "Invalid_argument",
          _1: "List.for_all2",
          Error: new Error()
        };
  };
}

function exists2(p, _l1, _l2) {
  while(true) {
    var l2 = _l2;
    var l1 = _l1;
    if (l1) {
      if (l2) {
        if (Curry._2(p, l1.hd, l2.hd)) {
          return true;
        }
        _l2 = l2.tl;
        _l1 = l1.tl;
        continue ;
      }
      throw {
            RE_EXN_ID: "Invalid_argument",
            _1: "List.exists2",
            Error: new Error()
          };
    }
    if (!l2) {
      return false;
    }
    throw {
          RE_EXN_ID: "Invalid_argument",
          _1: "List.exists2",
          Error: new Error()
        };
  };
}

function mem(x, _param) {
  while(true) {
    var param = _param;
    if (!param) {
      return false;
    }
    if (Caml_obj.caml_equal(param.hd, x)) {
      return true;
    }
    _param = param.tl;
    continue ;
  };
}

function memq(x, _param) {
  while(true) {
    var param = _param;
    if (!param) {
      return false;
    }
    if (param.hd === x) {
      return true;
    }
    _param = param.tl;
    continue ;
  };
}

function assoc(x, _param) {
  while(true) {
    var param = _param;
    if (param) {
      var match = param.hd;
      if (Caml_obj.caml_equal(match[0], x)) {
        return match[1];
      }
      _param = param.tl;
      continue ;
    }
    throw {
          RE_EXN_ID: "Not_found",
          Error: new Error()
        };
  };
}

function assoc_opt(x, _param) {
  while(true) {
    var param = _param;
    if (!param) {
      return ;
    }
    var match = param.hd;
    if (Caml_obj.caml_equal(match[0], x)) {
      return Caml_option.some(match[1]);
    }
    _param = param.tl;
    continue ;
  };
}

function assq(x, _param) {
  while(true) {
    var param = _param;
    if (param) {
      var match = param.hd;
      if (match[0] === x) {
        return match[1];
      }
      _param = param.tl;
      continue ;
    }
    throw {
          RE_EXN_ID: "Not_found",
          Error: new Error()
        };
  };
}

function assq_opt(x, _param) {
  while(true) {
    var param = _param;
    if (!param) {
      return ;
    }
    var match = param.hd;
    if (match[0] === x) {
      return Caml_option.some(match[1]);
    }
    _param = param.tl;
    continue ;
  };
}

function mem_assoc(x, _param) {
  while(true) {
    var param = _param;
    if (!param) {
      return false;
    }
    if (Caml_obj.caml_equal(param.hd[0], x)) {
      return true;
    }
    _param = param.tl;
    continue ;
  };
}

function mem_assq(x, _param) {
  while(true) {
    var param = _param;
    if (!param) {
      return false;
    }
    if (param.hd[0] === x) {
      return true;
    }
    _param = param.tl;
    continue ;
  };
}

function remove_assoc(x, param) {
  if (!param) {
    return /* [] */0;
  }
  var l = param.tl;
  var pair = param.hd;
  if (Caml_obj.caml_equal(pair[0], x)) {
    return l;
  } else {
    return {
            hd: pair,
            tl: remove_assoc(x, l)
          };
  }
}

function remove_assq(x, param) {
  if (!param) {
    return /* [] */0;
  }
  var l = param.tl;
  var pair = param.hd;
  if (pair[0] === x) {
    return l;
  } else {
    return {
            hd: pair,
            tl: remove_assq(x, l)
          };
  }
}

function find(p, _param) {
  while(true) {
    var param = _param;
    if (param) {
      var x = param.hd;
      if (Curry._1(p, x)) {
        return x;
      }
      _param = param.tl;
      continue ;
    }
    throw {
          RE_EXN_ID: "Not_found",
          Error: new Error()
        };
  };
}

function find_opt(p, _param) {
  while(true) {
    var param = _param;
    if (!param) {
      return ;
    }
    var x = param.hd;
    if (Curry._1(p, x)) {
      return Caml_option.some(x);
    }
    _param = param.tl;
    continue ;
  };
}

function find_all(p) {
  return function (param) {
    var _accu = /* [] */0;
    var _param = param;
    while(true) {
      var param$1 = _param;
      var accu = _accu;
      if (!param$1) {
        return rev_append(accu, /* [] */0);
      }
      var l = param$1.tl;
      var x = param$1.hd;
      if (Curry._1(p, x)) {
        _param = l;
        _accu = {
          hd: x,
          tl: accu
        };
        continue ;
      }
      _param = l;
      continue ;
    };
  };
}

function partition(p, l) {
  var _yes = /* [] */0;
  var _no = /* [] */0;
  var _param = l;
  while(true) {
    var param = _param;
    var no = _no;
    var yes = _yes;
    if (!param) {
      return [
              rev_append(yes, /* [] */0),
              rev_append(no, /* [] */0)
            ];
    }
    var l$1 = param.tl;
    var x = param.hd;
    if (Curry._1(p, x)) {
      _param = l$1;
      _yes = {
        hd: x,
        tl: yes
      };
      continue ;
    }
    _param = l$1;
    _no = {
      hd: x,
      tl: no
    };
    continue ;
  };
}

function split(param) {
  if (!param) {
    return [
            /* [] */0,
            /* [] */0
          ];
  }
  var match = param.hd;
  var match$1 = split(param.tl);
  return [
          {
            hd: match[0],
            tl: match$1[0]
          },
          {
            hd: match[1],
            tl: match$1[1]
          }
        ];
}

function combine(l1, l2) {
  if (l1) {
    if (l2) {
      return {
              hd: [
                l1.hd,
                l2.hd
              ],
              tl: combine(l1.tl, l2.tl)
            };
    }
    throw {
          RE_EXN_ID: "Invalid_argument",
          _1: "List.combine",
          Error: new Error()
        };
  }
  if (!l2) {
    return /* [] */0;
  }
  throw {
        RE_EXN_ID: "Invalid_argument",
        _1: "List.combine",
        Error: new Error()
      };
}

function merge(cmp, l1, l2) {
  if (!l1) {
    return l2;
  }
  if (!l2) {
    return l1;
  }
  var h2 = l2.hd;
  var h1 = l1.hd;
  if (Curry._2(cmp, h1, h2) <= 0) {
    return {
            hd: h1,
            tl: merge(cmp, l1.tl, l2)
          };
  } else {
    return {
            hd: h2,
            tl: merge(cmp, l1, l2.tl)
          };
  }
}

function chop(_k, _l) {
  while(true) {
    var l = _l;
    var k = _k;
    if (k === 0) {
      return l;
    }
    if (l) {
      _l = l.tl;
      _k = k - 1 | 0;
      continue ;
    }
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "list.ml",
            262,
            11
          ],
          Error: new Error()
        };
  };
}

function stable_sort(cmp, l) {
  var sort = function (n, l) {
    if (n !== 2) {
      if (n === 3 && l) {
        var match = l.tl;
        if (match) {
          var match$1 = match.tl;
          if (match$1) {
            var x3 = match$1.hd;
            var x2 = match.hd;
            var x1 = l.hd;
            if (Curry._2(cmp, x1, x2) <= 0) {
              if (Curry._2(cmp, x2, x3) <= 0) {
                return {
                        hd: x1,
                        tl: {
                          hd: x2,
                          tl: {
                            hd: x3,
                            tl: /* [] */0
                          }
                        }
                      };
              } else if (Curry._2(cmp, x1, x3) <= 0) {
                return {
                        hd: x1,
                        tl: {
                          hd: x3,
                          tl: {
                            hd: x2,
                            tl: /* [] */0
                          }
                        }
                      };
              } else {
                return {
                        hd: x3,
                        tl: {
                          hd: x1,
                          tl: {
                            hd: x2,
                            tl: /* [] */0
                          }
                        }
                      };
              }
            } else if (Curry._2(cmp, x1, x3) <= 0) {
              return {
                      hd: x2,
                      tl: {
                        hd: x1,
                        tl: {
                          hd: x3,
                          tl: /* [] */0
                        }
                      }
                    };
            } else if (Curry._2(cmp, x2, x3) <= 0) {
              return {
                      hd: x2,
                      tl: {
                        hd: x3,
                        tl: {
                          hd: x1,
                          tl: /* [] */0
                        }
                      }
                    };
            } else {
              return {
                      hd: x3,
                      tl: {
                        hd: x2,
                        tl: {
                          hd: x1,
                          tl: /* [] */0
                        }
                      }
                    };
            }
          }
          
        }
        
      }
      
    } else if (l) {
      var match$2 = l.tl;
      if (match$2) {
        var x2$1 = match$2.hd;
        var x1$1 = l.hd;
        if (Curry._2(cmp, x1$1, x2$1) <= 0) {
          return {
                  hd: x1$1,
                  tl: {
                    hd: x2$1,
                    tl: /* [] */0
                  }
                };
        } else {
          return {
                  hd: x2$1,
                  tl: {
                    hd: x1$1,
                    tl: /* [] */0
                  }
                };
        }
      }
      
    }
    var n1 = (n >> 1);
    var n2 = n - n1 | 0;
    var l2 = chop(n1, l);
    var s1 = rev_sort(n1, l);
    var s2 = rev_sort(n2, l2);
    var _l1 = s1;
    var _l2 = s2;
    var _accu = /* [] */0;
    while(true) {
      var accu = _accu;
      var l2$1 = _l2;
      var l1 = _l1;
      if (!l1) {
        return rev_append(l2$1, accu);
      }
      if (!l2$1) {
        return rev_append(l1, accu);
      }
      var h2 = l2$1.hd;
      var h1 = l1.hd;
      if (Curry._2(cmp, h1, h2) > 0) {
        _accu = {
          hd: h1,
          tl: accu
        };
        _l1 = l1.tl;
        continue ;
      }
      _accu = {
        hd: h2,
        tl: accu
      };
      _l2 = l2$1.tl;
      continue ;
    };
  };
  var rev_sort = function (n, l) {
    if (n !== 2) {
      if (n === 3 && l) {
        var match = l.tl;
        if (match) {
          var match$1 = match.tl;
          if (match$1) {
            var x3 = match$1.hd;
            var x2 = match.hd;
            var x1 = l.hd;
            if (Curry._2(cmp, x1, x2) > 0) {
              if (Curry._2(cmp, x2, x3) > 0) {
                return {
                        hd: x1,
                        tl: {
                          hd: x2,
                          tl: {
                            hd: x3,
                            tl: /* [] */0
                          }
                        }
                      };
              } else if (Curry._2(cmp, x1, x3) > 0) {
                return {
                        hd: x1,
                        tl: {
                          hd: x3,
                          tl: {
                            hd: x2,
                            tl: /* [] */0
                          }
                        }
                      };
              } else {
                return {
                        hd: x3,
                        tl: {
                          hd: x1,
                          tl: {
                            hd: x2,
                            tl: /* [] */0
                          }
                        }
                      };
              }
            } else if (Curry._2(cmp, x1, x3) > 0) {
              return {
                      hd: x2,
                      tl: {
                        hd: x1,
                        tl: {
                          hd: x3,
                          tl: /* [] */0
                        }
                      }
                    };
            } else if (Curry._2(cmp, x2, x3) > 0) {
              return {
                      hd: x2,
                      tl: {
                        hd: x3,
                        tl: {
                          hd: x1,
                          tl: /* [] */0
                        }
                      }
                    };
            } else {
              return {
                      hd: x3,
                      tl: {
                        hd: x2,
                        tl: {
                          hd: x1,
                          tl: /* [] */0
                        }
                      }
                    };
            }
          }
          
        }
        
      }
      
    } else if (l) {
      var match$2 = l.tl;
      if (match$2) {
        var x2$1 = match$2.hd;
        var x1$1 = l.hd;
        if (Curry._2(cmp, x1$1, x2$1) > 0) {
          return {
                  hd: x1$1,
                  tl: {
                    hd: x2$1,
                    tl: /* [] */0
                  }
                };
        } else {
          return {
                  hd: x2$1,
                  tl: {
                    hd: x1$1,
                    tl: /* [] */0
                  }
                };
        }
      }
      
    }
    var n1 = (n >> 1);
    var n2 = n - n1 | 0;
    var l2 = chop(n1, l);
    var s1 = sort(n1, l);
    var s2 = sort(n2, l2);
    var _l1 = s1;
    var _l2 = s2;
    var _accu = /* [] */0;
    while(true) {
      var accu = _accu;
      var l2$1 = _l2;
      var l1 = _l1;
      if (!l1) {
        return rev_append(l2$1, accu);
      }
      if (!l2$1) {
        return rev_append(l1, accu);
      }
      var h2 = l2$1.hd;
      var h1 = l1.hd;
      if (Curry._2(cmp, h1, h2) <= 0) {
        _accu = {
          hd: h1,
          tl: accu
        };
        _l1 = l1.tl;
        continue ;
      }
      _accu = {
        hd: h2,
        tl: accu
      };
      _l2 = l2$1.tl;
      continue ;
    };
  };
  var len = length(l);
  if (len < 2) {
    return l;
  } else {
    return sort(len, l);
  }
}

function sort_uniq(cmp, l) {
  var sort = function (n, l) {
    if (n !== 2) {
      if (n === 3 && l) {
        var match = l.tl;
        if (match) {
          var match$1 = match.tl;
          if (match$1) {
            var x3 = match$1.hd;
            var x2 = match.hd;
            var x1 = l.hd;
            var c = Curry._2(cmp, x1, x2);
            if (c === 0) {
              var c$1 = Curry._2(cmp, x2, x3);
              if (c$1 === 0) {
                return {
                        hd: x2,
                        tl: /* [] */0
                      };
              } else if (c$1 < 0) {
                return {
                        hd: x2,
                        tl: {
                          hd: x3,
                          tl: /* [] */0
                        }
                      };
              } else {
                return {
                        hd: x3,
                        tl: {
                          hd: x2,
                          tl: /* [] */0
                        }
                      };
              }
            }
            if (c < 0) {
              var c$2 = Curry._2(cmp, x2, x3);
              if (c$2 === 0) {
                return {
                        hd: x1,
                        tl: {
                          hd: x2,
                          tl: /* [] */0
                        }
                      };
              }
              if (c$2 < 0) {
                return {
                        hd: x1,
                        tl: {
                          hd: x2,
                          tl: {
                            hd: x3,
                            tl: /* [] */0
                          }
                        }
                      };
              }
              var c$3 = Curry._2(cmp, x1, x3);
              if (c$3 === 0) {
                return {
                        hd: x1,
                        tl: {
                          hd: x2,
                          tl: /* [] */0
                        }
                      };
              } else if (c$3 < 0) {
                return {
                        hd: x1,
                        tl: {
                          hd: x3,
                          tl: {
                            hd: x2,
                            tl: /* [] */0
                          }
                        }
                      };
              } else {
                return {
                        hd: x3,
                        tl: {
                          hd: x1,
                          tl: {
                            hd: x2,
                            tl: /* [] */0
                          }
                        }
                      };
              }
            }
            var c$4 = Curry._2(cmp, x1, x3);
            if (c$4 === 0) {
              return {
                      hd: x2,
                      tl: {
                        hd: x1,
                        tl: /* [] */0
                      }
                    };
            }
            if (c$4 < 0) {
              return {
                      hd: x2,
                      tl: {
                        hd: x1,
                        tl: {
                          hd: x3,
                          tl: /* [] */0
                        }
                      }
                    };
            }
            var c$5 = Curry._2(cmp, x2, x3);
            if (c$5 === 0) {
              return {
                      hd: x2,
                      tl: {
                        hd: x1,
                        tl: /* [] */0
                      }
                    };
            } else if (c$5 < 0) {
              return {
                      hd: x2,
                      tl: {
                        hd: x3,
                        tl: {
                          hd: x1,
                          tl: /* [] */0
                        }
                      }
                    };
            } else {
              return {
                      hd: x3,
                      tl: {
                        hd: x2,
                        tl: {
                          hd: x1,
                          tl: /* [] */0
                        }
                      }
                    };
            }
          }
          
        }
        
      }
      
    } else if (l) {
      var match$2 = l.tl;
      if (match$2) {
        var x2$1 = match$2.hd;
        var x1$1 = l.hd;
        var c$6 = Curry._2(cmp, x1$1, x2$1);
        if (c$6 === 0) {
          return {
                  hd: x1$1,
                  tl: /* [] */0
                };
        } else if (c$6 < 0) {
          return {
                  hd: x1$1,
                  tl: {
                    hd: x2$1,
                    tl: /* [] */0
                  }
                };
        } else {
          return {
                  hd: x2$1,
                  tl: {
                    hd: x1$1,
                    tl: /* [] */0
                  }
                };
        }
      }
      
    }
    var n1 = (n >> 1);
    var n2 = n - n1 | 0;
    var l2 = chop(n1, l);
    var s1 = rev_sort(n1, l);
    var s2 = rev_sort(n2, l2);
    var _l1 = s1;
    var _l2 = s2;
    var _accu = /* [] */0;
    while(true) {
      var accu = _accu;
      var l2$1 = _l2;
      var l1 = _l1;
      if (!l1) {
        return rev_append(l2$1, accu);
      }
      if (!l2$1) {
        return rev_append(l1, accu);
      }
      var t2 = l2$1.tl;
      var h2 = l2$1.hd;
      var t1 = l1.tl;
      var h1 = l1.hd;
      var c$7 = Curry._2(cmp, h1, h2);
      if (c$7 === 0) {
        _accu = {
          hd: h1,
          tl: accu
        };
        _l2 = t2;
        _l1 = t1;
        continue ;
      }
      if (c$7 > 0) {
        _accu = {
          hd: h1,
          tl: accu
        };
        _l1 = t1;
        continue ;
      }
      _accu = {
        hd: h2,
        tl: accu
      };
      _l2 = t2;
      continue ;
    };
  };
  var rev_sort = function (n, l) {
    if (n !== 2) {
      if (n === 3 && l) {
        var match = l.tl;
        if (match) {
          var match$1 = match.tl;
          if (match$1) {
            var x3 = match$1.hd;
            var x2 = match.hd;
            var x1 = l.hd;
            var c = Curry._2(cmp, x1, x2);
            if (c === 0) {
              var c$1 = Curry._2(cmp, x2, x3);
              if (c$1 === 0) {
                return {
                        hd: x2,
                        tl: /* [] */0
                      };
              } else if (c$1 > 0) {
                return {
                        hd: x2,
                        tl: {
                          hd: x3,
                          tl: /* [] */0
                        }
                      };
              } else {
                return {
                        hd: x3,
                        tl: {
                          hd: x2,
                          tl: /* [] */0
                        }
                      };
              }
            }
            if (c > 0) {
              var c$2 = Curry._2(cmp, x2, x3);
              if (c$2 === 0) {
                return {
                        hd: x1,
                        tl: {
                          hd: x2,
                          tl: /* [] */0
                        }
                      };
              }
              if (c$2 > 0) {
                return {
                        hd: x1,
                        tl: {
                          hd: x2,
                          tl: {
                            hd: x3,
                            tl: /* [] */0
                          }
                        }
                      };
              }
              var c$3 = Curry._2(cmp, x1, x3);
              if (c$3 === 0) {
                return {
                        hd: x1,
                        tl: {
                          hd: x2,
                          tl: /* [] */0
                        }
                      };
              } else if (c$3 > 0) {
                return {
                        hd: x1,
                        tl: {
                          hd: x3,
                          tl: {
                            hd: x2,
                            tl: /* [] */0
                          }
                        }
                      };
              } else {
                return {
                        hd: x3,
                        tl: {
                          hd: x1,
                          tl: {
                            hd: x2,
                            tl: /* [] */0
                          }
                        }
                      };
              }
            }
            var c$4 = Curry._2(cmp, x1, x3);
            if (c$4 === 0) {
              return {
                      hd: x2,
                      tl: {
                        hd: x1,
                        tl: /* [] */0
                      }
                    };
            }
            if (c$4 > 0) {
              return {
                      hd: x2,
                      tl: {
                        hd: x1,
                        tl: {
                          hd: x3,
                          tl: /* [] */0
                        }
                      }
                    };
            }
            var c$5 = Curry._2(cmp, x2, x3);
            if (c$5 === 0) {
              return {
                      hd: x2,
                      tl: {
                        hd: x1,
                        tl: /* [] */0
                      }
                    };
            } else if (c$5 > 0) {
              return {
                      hd: x2,
                      tl: {
                        hd: x3,
                        tl: {
                          hd: x1,
                          tl: /* [] */0
                        }
                      }
                    };
            } else {
              return {
                      hd: x3,
                      tl: {
                        hd: x2,
                        tl: {
                          hd: x1,
                          tl: /* [] */0
                        }
                      }
                    };
            }
          }
          
        }
        
      }
      
    } else if (l) {
      var match$2 = l.tl;
      if (match$2) {
        var x2$1 = match$2.hd;
        var x1$1 = l.hd;
        var c$6 = Curry._2(cmp, x1$1, x2$1);
        if (c$6 === 0) {
          return {
                  hd: x1$1,
                  tl: /* [] */0
                };
        } else if (c$6 > 0) {
          return {
                  hd: x1$1,
                  tl: {
                    hd: x2$1,
                    tl: /* [] */0
                  }
                };
        } else {
          return {
                  hd: x2$1,
                  tl: {
                    hd: x1$1,
                    tl: /* [] */0
                  }
                };
        }
      }
      
    }
    var n1 = (n >> 1);
    var n2 = n - n1 | 0;
    var l2 = chop(n1, l);
    var s1 = sort(n1, l);
    var s2 = sort(n2, l2);
    var _l1 = s1;
    var _l2 = s2;
    var _accu = /* [] */0;
    while(true) {
      var accu = _accu;
      var l2$1 = _l2;
      var l1 = _l1;
      if (!l1) {
        return rev_append(l2$1, accu);
      }
      if (!l2$1) {
        return rev_append(l1, accu);
      }
      var t2 = l2$1.tl;
      var h2 = l2$1.hd;
      var t1 = l1.tl;
      var h1 = l1.hd;
      var c$7 = Curry._2(cmp, h1, h2);
      if (c$7 === 0) {
        _accu = {
          hd: h1,
          tl: accu
        };
        _l2 = t2;
        _l1 = t1;
        continue ;
      }
      if (c$7 < 0) {
        _accu = {
          hd: h1,
          tl: accu
        };
        _l1 = t1;
        continue ;
      }
      _accu = {
        hd: h2,
        tl: accu
      };
      _l2 = t2;
      continue ;
    };
  };
  var len = length(l);
  if (len < 2) {
    return l;
  } else {
    return sort(len, l);
  }
}

function compare_lengths(_l1, _l2) {
  while(true) {
    var l2 = _l2;
    var l1 = _l1;
    if (!l1) {
      if (l2) {
        return -1;
      } else {
        return 0;
      }
    }
    if (!l2) {
      return 1;
    }
    _l2 = l2.tl;
    _l1 = l1.tl;
    continue ;
  };
}

function compare_length_with(_l, _n) {
  while(true) {
    var n = _n;
    var l = _l;
    if (!l) {
      if (n === 0) {
        return 0;
      } else if (n > 0) {
        return -1;
      } else {
        return 1;
      }
    }
    if (n <= 0) {
      return 1;
    }
    _n = n - 1 | 0;
    _l = l.tl;
    continue ;
  };
}

var append = Pervasives.$at;

var concat = flatten;

var filter = find_all;

var sort = stable_sort;

var fast_sort = stable_sort;

exports.length = length;
exports.compare_lengths = compare_lengths;
exports.compare_length_with = compare_length_with;
exports.cons = cons;
exports.hd = hd;
exports.tl = tl;
exports.nth = nth;
exports.nth_opt = nth_opt;
exports.rev = rev;
exports.init = init;
exports.append = append;
exports.rev_append = rev_append;
exports.concat = concat;
exports.flatten = flatten;
exports.iter = iter;
exports.iteri = iteri;
exports.map = map;
exports.mapi = mapi$1;
exports.rev_map = rev_map;
exports.fold_left = fold_left;
exports.fold_right = fold_right;
exports.iter2 = iter2;
exports.map2 = map2;
exports.rev_map2 = rev_map2;
exports.fold_left2 = fold_left2;
exports.fold_right2 = fold_right2;
exports.for_all = for_all;
exports.exists = exists;
exports.for_all2 = for_all2;
exports.exists2 = exists2;
exports.mem = mem;
exports.memq = memq;
exports.find = find;
exports.find_opt = find_opt;
exports.filter = filter;
exports.find_all = find_all;
exports.partition = partition;
exports.assoc = assoc;
exports.assoc_opt = assoc_opt;
exports.assq = assq;
exports.assq_opt = assq_opt;
exports.mem_assoc = mem_assoc;
exports.mem_assq = mem_assq;
exports.remove_assoc = remove_assoc;
exports.remove_assq = remove_assq;
exports.split = split;
exports.combine = combine;
exports.sort = sort;
exports.stable_sort = stable_sort;
exports.fast_sort = fast_sort;
exports.sort_uniq = sort_uniq;
exports.merge = merge;
/* No side effect */


/***/ }),

/***/ "./node_modules/bs-platform/lib/js/pervasives.js":
/*!*******************************************************!*\
  !*** ./node_modules/bs-platform/lib/js/pervasives.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Curry = __webpack_require__(/*! ./curry.js */ "./node_modules/bs-platform/lib/js/curry.js");
var Caml_io = __webpack_require__(/*! ./caml_io.js */ "./node_modules/bs-platform/lib/js/caml_io.js");
var Caml_sys = __webpack_require__(/*! ./caml_sys.js */ "./node_modules/bs-platform/lib/js/caml_sys.js");
var Caml_bytes = __webpack_require__(/*! ./caml_bytes.js */ "./node_modules/bs-platform/lib/js/caml_bytes.js");
var Caml_format = __webpack_require__(/*! ./caml_format.js */ "./node_modules/bs-platform/lib/js/caml_format.js");
var Caml_string = __webpack_require__(/*! ./caml_string.js */ "./node_modules/bs-platform/lib/js/caml_string.js");
var Caml_exceptions = __webpack_require__(/*! ./caml_exceptions.js */ "./node_modules/bs-platform/lib/js/caml_exceptions.js");
var Caml_js_exceptions = __webpack_require__(/*! ./caml_js_exceptions.js */ "./node_modules/bs-platform/lib/js/caml_js_exceptions.js");
var Caml_external_polyfill = __webpack_require__(/*! ./caml_external_polyfill.js */ "./node_modules/bs-platform/lib/js/caml_external_polyfill.js");
var CamlinternalFormatBasics = __webpack_require__(/*! ./camlinternalFormatBasics.js */ "./node_modules/bs-platform/lib/js/camlinternalFormatBasics.js");

function failwith(s) {
  throw {
        RE_EXN_ID: "Failure",
        _1: s,
        Error: new Error()
      };
}

function invalid_arg(s) {
  throw {
        RE_EXN_ID: "Invalid_argument",
        _1: s,
        Error: new Error()
      };
}

var Exit = Caml_exceptions.create("Pervasives.Exit");

function abs(x) {
  if (x >= 0) {
    return x;
  } else {
    return -x | 0;
  }
}

function lnot(x) {
  return x ^ -1;
}

var min_int = -2147483648;

function classify_float(x) {
  if (isFinite(x)) {
    if (Math.abs(x) >= 2.22507385850720138e-308) {
      return /* FP_normal */0;
    } else if (x !== 0) {
      return /* FP_subnormal */1;
    } else {
      return /* FP_zero */2;
    }
  } else if (isNaN(x)) {
    return /* FP_nan */4;
  } else {
    return /* FP_infinite */3;
  }
}

function char_of_int(n) {
  if (n < 0 || n > 255) {
    throw {
          RE_EXN_ID: "Invalid_argument",
          _1: "char_of_int",
          Error: new Error()
        };
  }
  return n;
}

function string_of_bool(b) {
  if (b) {
    return "true";
  } else {
    return "false";
  }
}

function bool_of_string(param) {
  switch (param) {
    case "false" :
        return false;
    case "true" :
        return true;
    default:
      throw {
            RE_EXN_ID: "Invalid_argument",
            _1: "bool_of_string",
            Error: new Error()
          };
  }
}

function bool_of_string_opt(param) {
  switch (param) {
    case "false" :
        return false;
    case "true" :
        return true;
    default:
      return ;
  }
}

function int_of_string_opt(s) {
  try {
    return Caml_format.caml_int_of_string(s);
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    if (exn.RE_EXN_ID === "Failure") {
      return ;
    }
    throw exn;
  }
}

function valid_float_lexem(s) {
  var l = s.length;
  var _i = 0;
  while(true) {
    var i = _i;
    if (i >= l) {
      return s + ".";
    }
    var match = Caml_string.get(s, i);
    if (match >= 48) {
      if (match >= 58) {
        return s;
      }
      _i = i + 1 | 0;
      continue ;
    }
    if (match !== 45) {
      return s;
    }
    _i = i + 1 | 0;
    continue ;
  };
}

function string_of_float(f) {
  return valid_float_lexem(Caml_format.caml_format_float("%.12g", f));
}

function float_of_string_opt(s) {
  try {
    return Caml_format.caml_float_of_string(s);
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    if (exn.RE_EXN_ID === "Failure") {
      return ;
    }
    throw exn;
  }
}

function $at(l1, l2) {
  if (l1) {
    return {
            hd: l1.hd,
            tl: $at(l1.tl, l2)
          };
  } else {
    return l2;
  }
}

var stdin = Caml_io.stdin;

var stdout = Caml_io.stdout;

var stderr = Caml_io.stderr;

function open_out_gen(mode, perm, name) {
  var c = Caml_external_polyfill.resolve("caml_ml_open_descriptor_out")(Caml_external_polyfill.resolve("caml_sys_open")(name, mode, perm));
  Caml_external_polyfill.resolve("caml_ml_set_channel_name")(c, name);
  return c;
}

function open_out(name) {
  return open_out_gen({
              hd: /* Open_wronly */1,
              tl: {
                hd: /* Open_creat */3,
                tl: {
                  hd: /* Open_trunc */4,
                  tl: {
                    hd: /* Open_text */7,
                    tl: /* [] */0
                  }
                }
              }
            }, 438, name);
}

function open_out_bin(name) {
  return open_out_gen({
              hd: /* Open_wronly */1,
              tl: {
                hd: /* Open_creat */3,
                tl: {
                  hd: /* Open_trunc */4,
                  tl: {
                    hd: /* Open_binary */6,
                    tl: /* [] */0
                  }
                }
              }
            }, 438, name);
}

function flush_all(param) {
  var _param = Caml_io.caml_ml_out_channels_list(undefined);
  while(true) {
    var param$1 = _param;
    if (!param$1) {
      return ;
    }
    try {
      Caml_io.caml_ml_flush(param$1.hd);
    }
    catch (raw_exn){
      var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
      if (exn.RE_EXN_ID !== "Sys_error") {
        throw exn;
      }
      
    }
    _param = param$1.tl;
    continue ;
  };
}

function output_bytes(oc, s) {
  return Caml_external_polyfill.resolve("caml_ml_output_bytes")(oc, s, 0, s.length);
}

function output_string(oc, s) {
  return Caml_io.caml_ml_output(oc, s, 0, s.length);
}

function output(oc, s, ofs, len) {
  if (ofs < 0 || len < 0 || ofs > (s.length - len | 0)) {
    throw {
          RE_EXN_ID: "Invalid_argument",
          _1: "output",
          Error: new Error()
        };
  }
  return Caml_external_polyfill.resolve("caml_ml_output_bytes")(oc, s, ofs, len);
}

function output_substring(oc, s, ofs, len) {
  if (ofs < 0 || len < 0 || ofs > (s.length - len | 0)) {
    throw {
          RE_EXN_ID: "Invalid_argument",
          _1: "output_substring",
          Error: new Error()
        };
  }
  return Caml_io.caml_ml_output(oc, s, ofs, len);
}

function output_value(chan, v) {
  return Caml_external_polyfill.resolve("caml_output_value")(chan, v, /* [] */0);
}

function close_out(oc) {
  Caml_io.caml_ml_flush(oc);
  return Caml_external_polyfill.resolve("caml_ml_close_channel")(oc);
}

function close_out_noerr(oc) {
  try {
    Caml_io.caml_ml_flush(oc);
  }
  catch (exn){
    
  }
  try {
    return Caml_external_polyfill.resolve("caml_ml_close_channel")(oc);
  }
  catch (exn$1){
    return ;
  }
}

function open_in_gen(mode, perm, name) {
  var c = Caml_external_polyfill.resolve("caml_ml_open_descriptor_in")(Caml_external_polyfill.resolve("caml_sys_open")(name, mode, perm));
  Caml_external_polyfill.resolve("caml_ml_set_channel_name")(c, name);
  return c;
}

function open_in(name) {
  return open_in_gen({
              hd: /* Open_rdonly */0,
              tl: {
                hd: /* Open_text */7,
                tl: /* [] */0
              }
            }, 0, name);
}

function open_in_bin(name) {
  return open_in_gen({
              hd: /* Open_rdonly */0,
              tl: {
                hd: /* Open_binary */6,
                tl: /* [] */0
              }
            }, 0, name);
}

function input(ic, s, ofs, len) {
  if (ofs < 0 || len < 0 || ofs > (s.length - len | 0)) {
    throw {
          RE_EXN_ID: "Invalid_argument",
          _1: "input",
          Error: new Error()
        };
  }
  return Caml_external_polyfill.resolve("caml_ml_input")(ic, s, ofs, len);
}

function unsafe_really_input(ic, s, _ofs, _len) {
  while(true) {
    var len = _len;
    var ofs = _ofs;
    if (len <= 0) {
      return ;
    }
    var r = Caml_external_polyfill.resolve("caml_ml_input")(ic, s, ofs, len);
    if (r === 0) {
      throw {
            RE_EXN_ID: "End_of_file",
            Error: new Error()
          };
    }
    _len = len - r | 0;
    _ofs = ofs + r | 0;
    continue ;
  };
}

function really_input(ic, s, ofs, len) {
  if (ofs < 0 || len < 0 || ofs > (s.length - len | 0)) {
    throw {
          RE_EXN_ID: "Invalid_argument",
          _1: "really_input",
          Error: new Error()
        };
  }
  return unsafe_really_input(ic, s, ofs, len);
}

function really_input_string(ic, len) {
  var s = Caml_bytes.caml_create_bytes(len);
  really_input(ic, s, 0, len);
  return Caml_bytes.bytes_to_string(s);
}

function input_line(chan) {
  var build_result = function (buf, _pos, _param) {
    while(true) {
      var param = _param;
      var pos = _pos;
      if (!param) {
        return buf;
      }
      var hd = param.hd;
      var len = hd.length;
      Caml_bytes.caml_blit_bytes(hd, 0, buf, pos - len | 0, len);
      _param = param.tl;
      _pos = pos - len | 0;
      continue ;
    };
  };
  var scan = function (_accu, _len) {
    while(true) {
      var len = _len;
      var accu = _accu;
      var n = Caml_external_polyfill.resolve("caml_ml_input_scan_line")(chan);
      if (n === 0) {
        if (accu) {
          return build_result(Caml_bytes.caml_create_bytes(len), len, accu);
        }
        throw {
              RE_EXN_ID: "End_of_file",
              Error: new Error()
            };
      }
      if (n > 0) {
        var res = Caml_bytes.caml_create_bytes(n - 1 | 0);
        Caml_external_polyfill.resolve("caml_ml_input")(chan, res, 0, n - 1 | 0);
        Caml_external_polyfill.resolve("caml_ml_input_char")(chan);
        if (!accu) {
          return res;
        }
        var len$1 = (len + n | 0) - 1 | 0;
        return build_result(Caml_bytes.caml_create_bytes(len$1), len$1, {
                    hd: res,
                    tl: accu
                  });
      }
      var beg = Caml_bytes.caml_create_bytes(-n | 0);
      Caml_external_polyfill.resolve("caml_ml_input")(chan, beg, 0, -n | 0);
      _len = len - n | 0;
      _accu = {
        hd: beg,
        tl: accu
      };
      continue ;
    };
  };
  return Caml_bytes.bytes_to_string(scan(/* [] */0, 0));
}

function close_in_noerr(ic) {
  try {
    return Caml_external_polyfill.resolve("caml_ml_close_channel")(ic);
  }
  catch (exn){
    return ;
  }
}

function print_char(c) {
  return Caml_io.caml_ml_output_char(stdout, c);
}

function print_string(s) {
  return output_string(stdout, s);
}

function print_bytes(s) {
  return output_bytes(stdout, s);
}

function print_int(i) {
  return output_string(stdout, String(i));
}

function print_float(f) {
  return output_string(stdout, valid_float_lexem(Caml_format.caml_format_float("%.12g", f)));
}

function print_newline(param) {
  Caml_io.caml_ml_output_char(stdout, /* "\n" */10);
  return Caml_io.caml_ml_flush(stdout);
}

function prerr_char(c) {
  return Caml_io.caml_ml_output_char(stderr, c);
}

function prerr_string(s) {
  return output_string(stderr, s);
}

function prerr_bytes(s) {
  return output_bytes(stderr, s);
}

function prerr_int(i) {
  return output_string(stderr, String(i));
}

function prerr_float(f) {
  return output_string(stderr, valid_float_lexem(Caml_format.caml_format_float("%.12g", f)));
}

function prerr_newline(param) {
  Caml_io.caml_ml_output_char(stderr, /* "\n" */10);
  return Caml_io.caml_ml_flush(stderr);
}

function read_line(param) {
  Caml_io.caml_ml_flush(stdout);
  return input_line(stdin);
}

function read_int(param) {
  return Caml_format.caml_int_of_string((Caml_io.caml_ml_flush(stdout), input_line(stdin)));
}

function read_int_opt(param) {
  return int_of_string_opt((Caml_io.caml_ml_flush(stdout), input_line(stdin)));
}

function read_float(param) {
  return Caml_format.caml_float_of_string((Caml_io.caml_ml_flush(stdout), input_line(stdin)));
}

function read_float_opt(param) {
  return float_of_string_opt((Caml_io.caml_ml_flush(stdout), input_line(stdin)));
}

function string_of_format(param) {
  return param._1;
}

function $caret$caret(param, param$1) {
  return /* Format */{
          _0: CamlinternalFormatBasics.concat_fmt(param._0, param$1._0),
          _1: param._1 + ("%," + param$1._1)
        };
}

var exit_function = {
  contents: flush_all
};

function at_exit(f) {
  var g = exit_function.contents;
  exit_function.contents = (function (param) {
      Curry._1(f, undefined);
      return Curry._1(g, undefined);
    });
  
}

function do_at_exit(param) {
  return Curry._1(exit_function.contents, undefined);
}

function exit(retcode) {
  do_at_exit(undefined);
  return Caml_sys.caml_sys_exit(retcode);
}

var max_int = 2147483647;

var infinity = Infinity;

var neg_infinity = -Infinity;

var max_float = 1.79769313486231571e+308;

var min_float = 2.22507385850720138e-308;

var epsilon_float = 2.22044604925031308e-16;

var flush = Caml_io.caml_ml_flush;

var output_char = Caml_io.caml_ml_output_char;

var output_byte = Caml_io.caml_ml_output_char;

function output_binary_int(prim, prim$1) {
  return Caml_external_polyfill.resolve("caml_ml_output_int")(prim, prim$1);
}

function seek_out(prim, prim$1) {
  return Caml_external_polyfill.resolve("caml_ml_seek_out")(prim, prim$1);
}

function pos_out(prim) {
  return Caml_external_polyfill.resolve("caml_ml_pos_out")(prim);
}

function out_channel_length(prim) {
  return Caml_external_polyfill.resolve("caml_ml_channel_size")(prim);
}

function set_binary_mode_out(prim, prim$1) {
  return Caml_external_polyfill.resolve("caml_ml_set_binary_mode")(prim, prim$1);
}

function input_char(prim) {
  return Caml_external_polyfill.resolve("caml_ml_input_char")(prim);
}

function input_byte(prim) {
  return Caml_external_polyfill.resolve("caml_ml_input_char")(prim);
}

function input_binary_int(prim) {
  return Caml_external_polyfill.resolve("caml_ml_input_int")(prim);
}

function input_value(prim) {
  return Caml_external_polyfill.resolve("caml_input_value")(prim);
}

function seek_in(prim, prim$1) {
  return Caml_external_polyfill.resolve("caml_ml_seek_in")(prim, prim$1);
}

function pos_in(prim) {
  return Caml_external_polyfill.resolve("caml_ml_pos_in")(prim);
}

function in_channel_length(prim) {
  return Caml_external_polyfill.resolve("caml_ml_channel_size")(prim);
}

function close_in(prim) {
  return Caml_external_polyfill.resolve("caml_ml_close_channel")(prim);
}

function set_binary_mode_in(prim, prim$1) {
  return Caml_external_polyfill.resolve("caml_ml_set_binary_mode")(prim, prim$1);
}

function LargeFile_seek_out(prim, prim$1) {
  return Caml_external_polyfill.resolve("caml_ml_seek_out_64")(prim, prim$1);
}

function LargeFile_pos_out(prim) {
  return Caml_external_polyfill.resolve("caml_ml_pos_out_64")(prim);
}

function LargeFile_out_channel_length(prim) {
  return Caml_external_polyfill.resolve("caml_ml_channel_size_64")(prim);
}

function LargeFile_seek_in(prim, prim$1) {
  return Caml_external_polyfill.resolve("caml_ml_seek_in_64")(prim, prim$1);
}

function LargeFile_pos_in(prim) {
  return Caml_external_polyfill.resolve("caml_ml_pos_in_64")(prim);
}

function LargeFile_in_channel_length(prim) {
  return Caml_external_polyfill.resolve("caml_ml_channel_size_64")(prim);
}

var LargeFile = {
  seek_out: LargeFile_seek_out,
  pos_out: LargeFile_pos_out,
  out_channel_length: LargeFile_out_channel_length,
  seek_in: LargeFile_seek_in,
  pos_in: LargeFile_pos_in,
  in_channel_length: LargeFile_in_channel_length
};

exports.invalid_arg = invalid_arg;
exports.failwith = failwith;
exports.Exit = Exit;
exports.abs = abs;
exports.max_int = max_int;
exports.min_int = min_int;
exports.lnot = lnot;
exports.infinity = infinity;
exports.neg_infinity = neg_infinity;
exports.max_float = max_float;
exports.min_float = min_float;
exports.epsilon_float = epsilon_float;
exports.classify_float = classify_float;
exports.char_of_int = char_of_int;
exports.string_of_bool = string_of_bool;
exports.bool_of_string = bool_of_string;
exports.bool_of_string_opt = bool_of_string_opt;
exports.int_of_string_opt = int_of_string_opt;
exports.string_of_float = string_of_float;
exports.float_of_string_opt = float_of_string_opt;
exports.$at = $at;
exports.stdin = stdin;
exports.stdout = stdout;
exports.stderr = stderr;
exports.print_char = print_char;
exports.print_string = print_string;
exports.print_bytes = print_bytes;
exports.print_int = print_int;
exports.print_float = print_float;
exports.print_newline = print_newline;
exports.prerr_char = prerr_char;
exports.prerr_string = prerr_string;
exports.prerr_bytes = prerr_bytes;
exports.prerr_int = prerr_int;
exports.prerr_float = prerr_float;
exports.prerr_newline = prerr_newline;
exports.read_line = read_line;
exports.read_int = read_int;
exports.read_int_opt = read_int_opt;
exports.read_float = read_float;
exports.read_float_opt = read_float_opt;
exports.open_out = open_out;
exports.open_out_bin = open_out_bin;
exports.open_out_gen = open_out_gen;
exports.flush = flush;
exports.flush_all = flush_all;
exports.output_char = output_char;
exports.output_string = output_string;
exports.output_bytes = output_bytes;
exports.output = output;
exports.output_substring = output_substring;
exports.output_byte = output_byte;
exports.output_binary_int = output_binary_int;
exports.output_value = output_value;
exports.seek_out = seek_out;
exports.pos_out = pos_out;
exports.out_channel_length = out_channel_length;
exports.close_out = close_out;
exports.close_out_noerr = close_out_noerr;
exports.set_binary_mode_out = set_binary_mode_out;
exports.open_in = open_in;
exports.open_in_bin = open_in_bin;
exports.open_in_gen = open_in_gen;
exports.input_char = input_char;
exports.input_line = input_line;
exports.input = input;
exports.really_input = really_input;
exports.really_input_string = really_input_string;
exports.input_byte = input_byte;
exports.input_binary_int = input_binary_int;
exports.input_value = input_value;
exports.seek_in = seek_in;
exports.pos_in = pos_in;
exports.in_channel_length = in_channel_length;
exports.close_in = close_in;
exports.close_in_noerr = close_in_noerr;
exports.set_binary_mode_in = set_binary_mode_in;
exports.LargeFile = LargeFile;
exports.string_of_format = string_of_format;
exports.$caret$caret = $caret$caret;
exports.exit = exit;
exports.at_exit = at_exit;
exports.valid_float_lexem = valid_float_lexem;
exports.unsafe_really_input = unsafe_really_input;
exports.do_at_exit = do_at_exit;
/* No side effect */


/***/ }),

/***/ "./node_modules/bs-platform/lib/js/string.js":
/*!***************************************************!*\
  !*** ./node_modules/bs-platform/lib/js/string.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Bytes = __webpack_require__(/*! ./bytes.js */ "./node_modules/bs-platform/lib/js/bytes.js");
var Curry = __webpack_require__(/*! ./curry.js */ "./node_modules/bs-platform/lib/js/curry.js");
var Caml_bytes = __webpack_require__(/*! ./caml_bytes.js */ "./node_modules/bs-platform/lib/js/caml_bytes.js");
var Caml_string = __webpack_require__(/*! ./caml_string.js */ "./node_modules/bs-platform/lib/js/caml_string.js");
var Caml_primitive = __webpack_require__(/*! ./caml_primitive.js */ "./node_modules/bs-platform/lib/js/caml_primitive.js");
var Caml_js_exceptions = __webpack_require__(/*! ./caml_js_exceptions.js */ "./node_modules/bs-platform/lib/js/caml_js_exceptions.js");

function init(n, f) {
  return Caml_bytes.bytes_to_string(Bytes.init(n, f));
}

function copy(s) {
  return Caml_bytes.bytes_to_string(Bytes.copy(Caml_bytes.bytes_of_string(s)));
}

function sub(s, ofs, len) {
  return Caml_bytes.bytes_to_string(Bytes.sub(Caml_bytes.bytes_of_string(s), ofs, len));
}

function ensure_ge(x, y) {
  if (x >= y) {
    return x;
  }
  throw {
        RE_EXN_ID: "Invalid_argument",
        _1: "String.concat",
        Error: new Error()
      };
}

function sum_lengths(_acc, seplen, _param) {
  while(true) {
    var param = _param;
    var acc = _acc;
    if (!param) {
      return acc;
    }
    var tl = param.tl;
    var hd = param.hd;
    if (!tl) {
      return hd.length + acc | 0;
    }
    _param = tl;
    _acc = ensure_ge((hd.length + seplen | 0) + acc | 0, acc);
    continue ;
  };
}

function unsafe_blits(dst, _pos, sep, seplen, _param) {
  while(true) {
    var param = _param;
    var pos = _pos;
    if (!param) {
      return dst;
    }
    var tl = param.tl;
    var hd = param.hd;
    if (tl) {
      Caml_bytes.caml_blit_string(hd, 0, dst, pos, hd.length);
      Caml_bytes.caml_blit_string(sep, 0, dst, pos + hd.length | 0, seplen);
      _param = tl;
      _pos = (pos + hd.length | 0) + seplen | 0;
      continue ;
    }
    Caml_bytes.caml_blit_string(hd, 0, dst, pos, hd.length);
    return dst;
  };
}

function concat(sep, l) {
  if (!l) {
    return "";
  }
  var seplen = sep.length;
  return Caml_bytes.bytes_to_string(unsafe_blits(Caml_bytes.caml_create_bytes(sum_lengths(0, seplen, l)), 0, sep, seplen, l));
}

function iter(f, s) {
  for(var i = 0 ,i_finish = s.length; i < i_finish; ++i){
    Curry._1(f, s.charCodeAt(i));
  }
  
}

function iteri(f, s) {
  for(var i = 0 ,i_finish = s.length; i < i_finish; ++i){
    Curry._2(f, i, s.charCodeAt(i));
  }
  
}

function map(f, s) {
  return Caml_bytes.bytes_to_string(Bytes.map(f, Caml_bytes.bytes_of_string(s)));
}

function mapi(f, s) {
  return Caml_bytes.bytes_to_string(Bytes.mapi(f, Caml_bytes.bytes_of_string(s)));
}

function is_space(param) {
  var switcher = param - 9 | 0;
  if (switcher > 4 || switcher < 0) {
    return switcher === 23;
  } else {
    return switcher !== 2;
  }
}

function trim(s) {
  if (s === "" || !(is_space(s.charCodeAt(0)) || is_space(s.charCodeAt(s.length - 1 | 0)))) {
    return s;
  } else {
    return Caml_bytes.bytes_to_string(Bytes.trim(Caml_bytes.bytes_of_string(s)));
  }
}

function escaped(s) {
  var needs_escape = function (_i) {
    while(true) {
      var i = _i;
      if (i >= s.length) {
        return false;
      }
      var match = s.charCodeAt(i);
      if (match < 32) {
        return true;
      }
      var switcher = match - 34 | 0;
      if (switcher > 58 || switcher < 0) {
        if (switcher >= 93) {
          return true;
        }
        _i = i + 1 | 0;
        continue ;
      }
      if (switcher > 57 || switcher < 1) {
        return true;
      }
      _i = i + 1 | 0;
      continue ;
    };
  };
  if (needs_escape(0)) {
    return Caml_bytes.bytes_to_string(Bytes.escaped(Caml_bytes.bytes_of_string(s)));
  } else {
    return s;
  }
}

function index_rec(s, lim, _i, c) {
  while(true) {
    var i = _i;
    if (i >= lim) {
      throw {
            RE_EXN_ID: "Not_found",
            Error: new Error()
          };
    }
    if (s.charCodeAt(i) === c) {
      return i;
    }
    _i = i + 1 | 0;
    continue ;
  };
}

function index(s, c) {
  return index_rec(s, s.length, 0, c);
}

function index_rec_opt(s, lim, _i, c) {
  while(true) {
    var i = _i;
    if (i >= lim) {
      return ;
    }
    if (s.charCodeAt(i) === c) {
      return i;
    }
    _i = i + 1 | 0;
    continue ;
  };
}

function index_opt(s, c) {
  return index_rec_opt(s, s.length, 0, c);
}

function index_from(s, i, c) {
  var l = s.length;
  if (i < 0 || i > l) {
    throw {
          RE_EXN_ID: "Invalid_argument",
          _1: "String.index_from / Bytes.index_from",
          Error: new Error()
        };
  }
  return index_rec(s, l, i, c);
}

function index_from_opt(s, i, c) {
  var l = s.length;
  if (i < 0 || i > l) {
    throw {
          RE_EXN_ID: "Invalid_argument",
          _1: "String.index_from_opt / Bytes.index_from_opt",
          Error: new Error()
        };
  }
  return index_rec_opt(s, l, i, c);
}

function rindex_rec(s, _i, c) {
  while(true) {
    var i = _i;
    if (i < 0) {
      throw {
            RE_EXN_ID: "Not_found",
            Error: new Error()
          };
    }
    if (s.charCodeAt(i) === c) {
      return i;
    }
    _i = i - 1 | 0;
    continue ;
  };
}

function rindex(s, c) {
  return rindex_rec(s, s.length - 1 | 0, c);
}

function rindex_from(s, i, c) {
  if (i < -1 || i >= s.length) {
    throw {
          RE_EXN_ID: "Invalid_argument",
          _1: "String.rindex_from / Bytes.rindex_from",
          Error: new Error()
        };
  }
  return rindex_rec(s, i, c);
}

function rindex_rec_opt(s, _i, c) {
  while(true) {
    var i = _i;
    if (i < 0) {
      return ;
    }
    if (s.charCodeAt(i) === c) {
      return i;
    }
    _i = i - 1 | 0;
    continue ;
  };
}

function rindex_opt(s, c) {
  return rindex_rec_opt(s, s.length - 1 | 0, c);
}

function rindex_from_opt(s, i, c) {
  if (i < -1 || i >= s.length) {
    throw {
          RE_EXN_ID: "Invalid_argument",
          _1: "String.rindex_from_opt / Bytes.rindex_from_opt",
          Error: new Error()
        };
  }
  return rindex_rec_opt(s, i, c);
}

function contains_from(s, i, c) {
  var l = s.length;
  if (i < 0 || i > l) {
    throw {
          RE_EXN_ID: "Invalid_argument",
          _1: "String.contains_from / Bytes.contains_from",
          Error: new Error()
        };
  }
  try {
    index_rec(s, l, i, c);
    return true;
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    if (exn.RE_EXN_ID === "Not_found") {
      return false;
    }
    throw exn;
  }
}

function contains(s, c) {
  return contains_from(s, 0, c);
}

function rcontains_from(s, i, c) {
  if (i < 0 || i >= s.length) {
    throw {
          RE_EXN_ID: "Invalid_argument",
          _1: "String.rcontains_from / Bytes.rcontains_from",
          Error: new Error()
        };
  }
  try {
    rindex_rec(s, i, c);
    return true;
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    if (exn.RE_EXN_ID === "Not_found") {
      return false;
    }
    throw exn;
  }
}

function uppercase_ascii(s) {
  return Caml_bytes.bytes_to_string(Bytes.uppercase_ascii(Caml_bytes.bytes_of_string(s)));
}

function lowercase_ascii(s) {
  return Caml_bytes.bytes_to_string(Bytes.lowercase_ascii(Caml_bytes.bytes_of_string(s)));
}

function capitalize_ascii(s) {
  return Caml_bytes.bytes_to_string(Bytes.capitalize_ascii(Caml_bytes.bytes_of_string(s)));
}

function uncapitalize_ascii(s) {
  return Caml_bytes.bytes_to_string(Bytes.uncapitalize_ascii(Caml_bytes.bytes_of_string(s)));
}

var compare = Caml_primitive.caml_string_compare;

function split_on_char(sep, s) {
  var r = /* [] */0;
  var j = s.length;
  for(var i = s.length - 1 | 0; i >= 0; --i){
    if (s.charCodeAt(i) === sep) {
      r = {
        hd: sub(s, i + 1 | 0, (j - i | 0) - 1 | 0),
        tl: r
      };
      j = i;
    }
    
  }
  return {
          hd: sub(s, 0, j),
          tl: r
        };
}

function uppercase(s) {
  return Caml_bytes.bytes_to_string(Bytes.uppercase(Caml_bytes.bytes_of_string(s)));
}

function lowercase(s) {
  return Caml_bytes.bytes_to_string(Bytes.lowercase(Caml_bytes.bytes_of_string(s)));
}

function capitalize(s) {
  return Caml_bytes.bytes_to_string(Bytes.capitalize(Caml_bytes.bytes_of_string(s)));
}

function uncapitalize(s) {
  return Caml_bytes.bytes_to_string(Bytes.uncapitalize(Caml_bytes.bytes_of_string(s)));
}

var make = Caml_string.make;

var fill = Bytes.fill;

var blit = Bytes.blit_string;

function equal(prim, prim$1) {
  return prim === prim$1;
}

exports.make = make;
exports.init = init;
exports.copy = copy;
exports.sub = sub;
exports.fill = fill;
exports.blit = blit;
exports.concat = concat;
exports.iter = iter;
exports.iteri = iteri;
exports.map = map;
exports.mapi = mapi;
exports.trim = trim;
exports.escaped = escaped;
exports.index = index;
exports.index_opt = index_opt;
exports.rindex = rindex;
exports.rindex_opt = rindex_opt;
exports.index_from = index_from;
exports.index_from_opt = index_from_opt;
exports.rindex_from = rindex_from;
exports.rindex_from_opt = rindex_from_opt;
exports.contains = contains;
exports.contains_from = contains_from;
exports.rcontains_from = rcontains_from;
exports.uppercase = uppercase;
exports.lowercase = lowercase;
exports.capitalize = capitalize;
exports.uncapitalize = uncapitalize;
exports.uppercase_ascii = uppercase_ascii;
exports.lowercase_ascii = lowercase_ascii;
exports.capitalize_ascii = capitalize_ascii;
exports.uncapitalize_ascii = uncapitalize_ascii;
exports.compare = compare;
exports.equal = equal;
exports.split_on_char = split_on_char;
/* No side effect */


/***/ }),

/***/ "./node_modules/create-emotion/dist/create-emotion.esm.js":
/*!****************************************************************!*\
  !*** ./node_modules/create-emotion/dist/create-emotion.esm.js ***!
  \****************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _emotion_cache__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @emotion/cache */ "./node_modules/@emotion/cache/dist/cache.esm.js");
/* harmony import */ var _emotion_serialize__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @emotion/serialize */ "./node_modules/@emotion/serialize/dist/serialize.esm.js");
/* harmony import */ var _emotion_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @emotion/utils */ "./node_modules/@emotion/utils/dist/utils.esm.js");




function insertWithoutScoping(cache, serialized) {
  if (cache.inserted[serialized.name] === undefined) {
    return cache.insert('', serialized, cache.sheet, true);
  }
}

function merge(registered, css, className) {
  var registeredStyles = [];
  var rawClassName = Object(_emotion_utils__WEBPACK_IMPORTED_MODULE_2__["getRegisteredStyles"])(registered, registeredStyles, className);

  if (registeredStyles.length < 2) {
    return className;
  }

  return rawClassName + css(registeredStyles);
}

var createEmotion = function createEmotion(options) {
  var cache = Object(_emotion_cache__WEBPACK_IMPORTED_MODULE_0__["default"])(options); // $FlowFixMe

  cache.sheet.speedy = function (value) {
    if ( true && this.ctr !== 0) {
      throw new Error('speedy must be changed before any rules are inserted');
    }

    this.isSpeedy = value;
  };

  cache.compat = true;

  var css = function css() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var serialized = Object(_emotion_serialize__WEBPACK_IMPORTED_MODULE_1__["serializeStyles"])(args, cache.registered, undefined);
    Object(_emotion_utils__WEBPACK_IMPORTED_MODULE_2__["insertStyles"])(cache, serialized, false);
    return cache.key + "-" + serialized.name;
  };

  var keyframes = function keyframes() {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    var serialized = Object(_emotion_serialize__WEBPACK_IMPORTED_MODULE_1__["serializeStyles"])(args, cache.registered);
    var animation = "animation-" + serialized.name;
    insertWithoutScoping(cache, {
      name: serialized.name,
      styles: "@keyframes " + animation + "{" + serialized.styles + "}"
    });
    return animation;
  };

  var injectGlobal = function injectGlobal() {
    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      args[_key3] = arguments[_key3];
    }

    var serialized = Object(_emotion_serialize__WEBPACK_IMPORTED_MODULE_1__["serializeStyles"])(args, cache.registered);
    insertWithoutScoping(cache, serialized);
  };

  var cx = function cx() {
    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
      args[_key4] = arguments[_key4];
    }

    return merge(cache.registered, css, classnames(args));
  };

  return {
    css: css,
    cx: cx,
    injectGlobal: injectGlobal,
    keyframes: keyframes,
    hydrate: function hydrate(ids) {
      ids.forEach(function (key) {
        cache.inserted[key] = true;
      });
    },
    flush: function flush() {
      cache.registered = {};
      cache.inserted = {};
      cache.sheet.flush();
    },
    // $FlowFixMe
    sheet: cache.sheet,
    cache: cache,
    getRegisteredStyles: _emotion_utils__WEBPACK_IMPORTED_MODULE_2__["getRegisteredStyles"].bind(null, cache.registered),
    merge: merge.bind(null, cache.registered, css)
  };
};

var classnames = function classnames(args) {
  var cls = '';

  for (var i = 0; i < args.length; i++) {
    var arg = args[i];
    if (arg == null) continue;
    var toAdd = void 0;

    switch (typeof arg) {
      case 'boolean':
        break;

      case 'object':
        {
          if (Array.isArray(arg)) {
            toAdd = classnames(arg);
          } else {
            toAdd = '';

            for (var k in arg) {
              if (arg[k] && k) {
                toAdd && (toAdd += ' ');
                toAdd += k;
              }
            }
          }

          break;
        }

      default:
        {
          toAdd = arg;
        }
    }

    if (toAdd) {
      cls && (cls += ' ');
      cls += toAdd;
    }
  }

  return cls;
};

/* harmony default export */ __webpack_exports__["default"] = (createEmotion);


/***/ }),

/***/ "./node_modules/reason-react/src/ReasonReactRouter.bs.js":
/*!***************************************************************!*\
  !*** ./node_modules/reason-react/src/ReasonReactRouter.bs.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Curry = __webpack_require__(/*! bs-platform/lib/js/curry.js */ "./node_modules/bs-platform/lib/js/curry.js");
var React = __webpack_require__(/*! react */ "react");

function safeMakeEvent(eventName) {
  if (typeof Event === "function") {
    return new Event(eventName);
  }
  var $$event = document.createEvent("Event");
  $$event.initEvent(eventName, true, true);
  return $$event;
}

function path(param) {
  var $$window = typeof window === "undefined" ? undefined : window;
  if ($$window === undefined) {
    return /* [] */0;
  }
  var raw = $$window.location.pathname;
  switch (raw) {
    case "" :
    case "/" :
        return /* [] */0;
    default:
      var raw$1 = raw.slice(1);
      var match = raw$1[raw$1.length - 1 | 0];
      var raw$2 = match === "/" ? raw$1.slice(0, -1) : raw$1;
      var a = raw$2.split("/");
      var _i = a.length - 1 | 0;
      var _res = /* [] */0;
      while(true) {
        var res = _res;
        var i = _i;
        if (i < 0) {
          return res;
        }
        _res = {
          hd: a[i],
          tl: res
        };
        _i = i - 1 | 0;
        continue ;
      };
  }
}

function hash(param) {
  var $$window = typeof window === "undefined" ? undefined : window;
  if ($$window === undefined) {
    return "";
  }
  var raw = $$window.location.hash;
  switch (raw) {
    case "" :
    case "#" :
        return "";
    default:
      return raw.slice(1);
  }
}

function search(param) {
  var $$window = typeof window === "undefined" ? undefined : window;
  if ($$window === undefined) {
    return "";
  }
  var raw = $$window.location.search;
  switch (raw) {
    case "" :
    case "?" :
        return "";
    default:
      return raw.slice(1);
  }
}

function push(path) {
  var match = typeof history === "undefined" ? undefined : history;
  var match$1 = typeof window === "undefined" ? undefined : window;
  if (match !== undefined && match$1 !== undefined) {
    match.pushState(null, "", path);
    match$1.dispatchEvent(safeMakeEvent("popstate"));
    return ;
  }
  
}

function replace(path) {
  var match = typeof history === "undefined" ? undefined : history;
  var match$1 = typeof window === "undefined" ? undefined : window;
  if (match !== undefined && match$1 !== undefined) {
    match.replaceState(null, "", path);
    match$1.dispatchEvent(safeMakeEvent("popstate"));
    return ;
  }
  
}

function urlNotEqual(a, b) {
  if (a.hash !== b.hash || a.search !== b.search) {
    return true;
  } else {
    var _aList = a.path;
    var _bList = b.path;
    while(true) {
      var bList = _bList;
      var aList = _aList;
      if (!aList) {
        if (bList) {
          return true;
        } else {
          return false;
        }
      }
      if (!bList) {
        return true;
      }
      if (aList.hd !== bList.hd) {
        return true;
      }
      _bList = bList.tl;
      _aList = aList.tl;
      continue ;
    };
  }
}

function url(param) {
  return {
          path: path(undefined),
          hash: hash(undefined),
          search: search(undefined)
        };
}

function watchUrl(callback) {
  var $$window = typeof window === "undefined" ? undefined : window;
  if ($$window === undefined) {
    return function (param) {
      
    };
  }
  var watcherID = function (param) {
    return Curry._1(callback, url(undefined));
  };
  $$window.addEventListener("popstate", watcherID);
  return watcherID;
}

function unwatchUrl(watcherID) {
  var $$window = typeof window === "undefined" ? undefined : window;
  if ($$window !== undefined) {
    $$window.removeEventListener("popstate", watcherID);
    return ;
  }
  
}

function useUrl(serverUrl, param) {
  var match = React.useState(function () {
        if (serverUrl !== undefined) {
          return serverUrl;
        } else {
          return url(undefined);
        }
      });
  var setUrl = match[1];
  var url$1 = match[0];
  React.useEffect((function () {
          var watcherId = watchUrl(function (url) {
                return Curry._1(setUrl, (function (param) {
                              return url;
                            }));
              });
          var newUrl = url(undefined);
          if (urlNotEqual(newUrl, url$1)) {
            Curry._1(setUrl, (function (param) {
                    return newUrl;
                  }));
          }
          return (function (param) {
                    return unwatchUrl(watcherId);
                  });
        }), []);
  return url$1;
}

var dangerouslyGetInitialUrl = url;

exports.push = push;
exports.replace = replace;
exports.watchUrl = watchUrl;
exports.unwatchUrl = unwatchUrl;
exports.dangerouslyGetInitialUrl = dangerouslyGetInitialUrl;
exports.useUrl = useUrl;
/* react Not a pure module */


/***/ }),

/***/ "./node_modules/rescript-future/src/Future.bs.js":
/*!*******************************************************!*\
  !*** ./node_modules/rescript-future/src/Future.bs.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Generated by ReScript, PLEASE EDIT WITH CARE


var Curry = __webpack_require__(/*! bs-platform/lib/js/curry.js */ "./node_modules/bs-platform/lib/js/curry.js");
var Belt_Array = __webpack_require__(/*! bs-platform/lib/js/belt_Array.js */ "./node_modules/bs-platform/lib/js/belt_Array.js");
var Caml_option = __webpack_require__(/*! bs-platform/lib/js/caml_option.js */ "./node_modules/bs-platform/lib/js/caml_option.js");
var Belt_MutableQueue = __webpack_require__(/*! bs-platform/lib/js/belt_MutableQueue.js */ "./node_modules/bs-platform/lib/js/belt_MutableQueue.js");

function isPending(future) {
  var match = future.status;
  if (typeof match === "string") {
    return false;
  } else {
    return match.NAME === "Pending";
  }
}

function isCancelled(future) {
  var match = future.status;
  if (typeof match === "string") {
    return true;
  } else {
    return false;
  }
}

function isResolved(future) {
  var match = future.status;
  if (typeof match === "string") {
    return false;
  } else {
    return match.NAME !== "Pending";
  }
}

function value(value$1) {
  return {
          status: {
            NAME: "Resolved",
            VAL: value$1
          }
        };
}

function run(callbacks, value) {
  while(true) {
    var callback = Belt_MutableQueue.pop(callbacks);
    if (callback === undefined) {
      return ;
    }
    Curry._1(callback, value);
    continue ;
  };
}

function make(init) {
  var pendingPayload = {
    resolveCallbacks: undefined,
    cancelCallbacks: undefined,
    cancel: undefined
  };
  var future = {
    status: {
      NAME: "Pending",
      VAL: pendingPayload
    }
  };
  var resolver = function (value) {
    var match = future.status;
    if (typeof match === "string") {
      return ;
    }
    if (match.NAME !== "Pending") {
      return ;
    }
    future.status = {
      NAME: "Resolved",
      VAL: value
    };
    var resolveCallbacks = match.VAL.resolveCallbacks;
    if (resolveCallbacks !== undefined) {
      return run(Caml_option.valFromOption(resolveCallbacks), value);
    }
    
  };
  pendingPayload.cancel = Curry._1(init, resolver);
  return future;
}

function makePure(init) {
  return make(function (resolve) {
              Curry._1(init, resolve);
              
            });
}

function get(future, func) {
  var match = future.status;
  if (typeof match === "string") {
    return ;
  }
  if (match.NAME !== "Pending") {
    return Curry._1(func, match.VAL);
  }
  var pendingPayload = match.VAL;
  var resolveCallbacks = pendingPayload.resolveCallbacks;
  if (resolveCallbacks !== undefined) {
    return Belt_MutableQueue.add(Caml_option.valFromOption(resolveCallbacks), func);
  }
  var resolveCallbacks$1 = Belt_MutableQueue.make(undefined);
  Belt_MutableQueue.add(resolveCallbacks$1, func);
  pendingPayload.resolveCallbacks = Caml_option.some(resolveCallbacks$1);
  
}

function onCancel(future, func) {
  var match = future.status;
  if (typeof match === "string") {
    return Curry._1(func, undefined);
  }
  if (match.NAME !== "Pending") {
    return ;
  }
  var pendingPayload = match.VAL;
  var cancelCallbacks = pendingPayload.cancelCallbacks;
  if (cancelCallbacks !== undefined) {
    return Belt_MutableQueue.add(Caml_option.valFromOption(cancelCallbacks), func);
  }
  var cancelCallbacks$1 = Belt_MutableQueue.make(undefined);
  Belt_MutableQueue.add(cancelCallbacks$1, func);
  pendingPayload.cancelCallbacks = Caml_option.some(cancelCallbacks$1);
  
}

function cancel(future) {
  var match = future.status;
  if (typeof match === "string") {
    return ;
  }
  if (match.NAME !== "Pending") {
    return ;
  }
  var pendingPayload = match.VAL;
  future.status = "Cancelled";
  var cancel$1 = pendingPayload.cancel;
  if (cancel$1 !== undefined) {
    Curry._1(cancel$1, undefined);
  }
  var cancelCallbacks = pendingPayload.cancelCallbacks;
  if (cancelCallbacks !== undefined) {
    return run(Caml_option.valFromOption(cancelCallbacks), undefined);
  }
  
}

function map(source, propagateCancelOpt, f) {
  var propagateCancel = propagateCancelOpt !== undefined ? propagateCancelOpt : false;
  var future = make(function (resolve) {
        get(source, (function (value) {
                return Curry._1(resolve, Curry._1(f, value));
              }));
        if (propagateCancel) {
          return (function (param) {
                    return cancel(source);
                  });
        }
        
      });
  onCancel(source, (function (param) {
          cancel(future);
          
        }));
  return future;
}

function flatMap(source, propagateCancelOpt, f) {
  var propagateCancel = propagateCancelOpt !== undefined ? propagateCancelOpt : false;
  var pendingPayload = {
    resolveCallbacks: undefined,
    cancelCallbacks: undefined,
    cancel: undefined
  };
  var future = {
    status: {
      NAME: "Pending",
      VAL: pendingPayload
    }
  };
  get(source, (function (value) {
          var source$prime = Curry._1(f, value);
          get(source$prime, (function (value) {
                  future.status = {
                    NAME: "Resolved",
                    VAL: value
                  };
                  var resolveCallbacks = pendingPayload.resolveCallbacks;
                  if (resolveCallbacks !== undefined) {
                    return run(Caml_option.valFromOption(resolveCallbacks), value);
                  }
                  
                }));
          return onCancel(source$prime, (function (param) {
                        return cancel(future);
                      }));
        }));
  if (propagateCancel) {
    pendingPayload.cancel = (function (param) {
        return cancel(source);
      });
  }
  onCancel(source, (function (param) {
          return cancel(future);
        }));
  return future;
}

function tap(future, f) {
  get(future, f);
  return future;
}

function tapOk(future, f) {
  get(future, (function (result) {
          if (result.TAG) {
            return ;
          } else {
            return Curry._1(f, result._0);
          }
        }));
  return future;
}

function tapError(future, f) {
  get(future, (function (result) {
          if (result.TAG) {
            return Curry._1(f, result._0);
          }
          
        }));
  return future;
}

function mapResult(future, propagateCancel, f) {
  return map(future, propagateCancel, (function (result) {
                if (result.TAG) {
                  return {
                          TAG: /* Error */1,
                          _0: result._0
                        };
                } else {
                  return Curry._1(f, result._0);
                }
              }));
}

function mapOk(future, propagateCancel, f) {
  return map(future, propagateCancel, (function (result) {
                if (result.TAG) {
                  return {
                          TAG: /* Error */1,
                          _0: result._0
                        };
                } else {
                  return {
                          TAG: /* Ok */0,
                          _0: Curry._1(f, result._0)
                        };
                }
              }));
}

function mapError(future, propagateCancel, f) {
  return map(future, propagateCancel, (function (result) {
                if (result.TAG) {
                  return {
                          TAG: /* Error */1,
                          _0: Curry._1(f, result._0)
                        };
                } else {
                  return {
                          TAG: /* Ok */0,
                          _0: result._0
                        };
                }
              }));
}

function flatMapOk(future, propagateCancel, f) {
  return flatMap(future, propagateCancel, (function (result) {
                if (result.TAG) {
                  return {
                          status: {
                            NAME: "Resolved",
                            VAL: {
                              TAG: /* Error */1,
                              _0: result._0
                            }
                          }
                        };
                } else {
                  return Curry._1(f, result._0);
                }
              }));
}

function flatMapError(future, propagateCancel, f) {
  return flatMap(future, propagateCancel, (function (result) {
                if (result.TAG) {
                  return Curry._1(f, result._0);
                } else {
                  return {
                          status: {
                            NAME: "Resolved",
                            VAL: {
                              TAG: /* Ok */0,
                              _0: result._0
                            }
                          }
                        };
                }
              }));
}

function all2(param) {
  var b = param[1];
  var a = param[0];
  var init = function (resolve) {
    return get(a, (function (a$prime) {
                  return get(b, (function (b$prime) {
                                return Curry._1(resolve, [
                                            a$prime,
                                            b$prime
                                          ]);
                              }));
                }));
  };
  return make(function (resolve) {
              init(resolve);
              
            });
}

function all3(param) {
  var c = param[2];
  var b = param[1];
  var a = param[0];
  var init = function (resolve) {
    return get(all2([
                    a,
                    b
                  ]), (function (param) {
                  var b$prime = param[1];
                  var a$prime = param[0];
                  return get(c, (function (c$prime) {
                                return Curry._1(resolve, [
                                            a$prime,
                                            b$prime,
                                            c$prime
                                          ]);
                              }));
                }));
  };
  return make(function (resolve) {
              init(resolve);
              
            });
}

function all4(param) {
  var d = param[3];
  var c = param[2];
  var b = param[1];
  var a = param[0];
  var init = function (resolve) {
    return get(all3([
                    a,
                    b,
                    c
                  ]), (function (param) {
                  var c$prime = param[2];
                  var b$prime = param[1];
                  var a$prime = param[0];
                  return get(d, (function (d$prime) {
                                return Curry._1(resolve, [
                                            a$prime,
                                            b$prime,
                                            c$prime,
                                            d$prime
                                          ]);
                              }));
                }));
  };
  return make(function (resolve) {
              init(resolve);
              
            });
}

function all5(param) {
  var e = param[4];
  var d = param[3];
  var c = param[2];
  var b = param[1];
  var a = param[0];
  var init = function (resolve) {
    return get(all4([
                    a,
                    b,
                    c,
                    d
                  ]), (function (param) {
                  var d$prime = param[3];
                  var c$prime = param[2];
                  var b$prime = param[1];
                  var a$prime = param[0];
                  return get(e, (function (e$prime) {
                                return Curry._1(resolve, [
                                            a$prime,
                                            b$prime,
                                            c$prime,
                                            d$prime,
                                            e$prime
                                          ]);
                              }));
                }));
  };
  return make(function (resolve) {
              init(resolve);
              
            });
}

function all6(param) {
  var f = param[5];
  var e = param[4];
  var d = param[3];
  var c = param[2];
  var b = param[1];
  var a = param[0];
  var init = function (resolve) {
    return get(all5([
                    a,
                    b,
                    c,
                    d,
                    e
                  ]), (function (param) {
                  var e$prime = param[4];
                  var d$prime = param[3];
                  var c$prime = param[2];
                  var b$prime = param[1];
                  var a$prime = param[0];
                  return get(f, (function (f$prime) {
                                return Curry._1(resolve, [
                                            a$prime,
                                            b$prime,
                                            c$prime,
                                            d$prime,
                                            e$prime,
                                            f$prime
                                          ]);
                              }));
                }));
  };
  return make(function (resolve) {
              init(resolve);
              
            });
}

function all(futures) {
  var value = [];
  return Belt_Array.reduce(futures, {
              status: {
                NAME: "Resolved",
                VAL: value
              }
            }, (function (acc, future) {
                return flatMap(future, undefined, (function (value) {
                              return map(acc, undefined, (function (xs) {
                                            return Belt_Array.concat(xs, [value]);
                                          }));
                            }));
              }));
}

exports.isPending = isPending;
exports.isCancelled = isCancelled;
exports.isResolved = isResolved;
exports.value = value;
exports.make = make;
exports.makePure = makePure;
exports.get = get;
exports.cancel = cancel;
exports.map = map;
exports.flatMap = flatMap;
exports.tap = tap;
exports.mapResult = mapResult;
exports.mapOk = mapOk;
exports.mapError = mapError;
exports.flatMapOk = flatMapOk;
exports.flatMapError = flatMapError;
exports.tapOk = tapOk;
exports.tapError = tapError;
exports.all2 = all2;
exports.all3 = all3;
exports.all4 = all4;
exports.all5 = all5;
exports.all6 = all6;
exports.all = all;
/* No side effect */


/***/ }),

/***/ "./node_modules/rescript-request/src/Request.bs.js":
/*!*********************************************************!*\
  !*** ./node_modules/rescript-request/src/Request.bs.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Generated by ReScript, PLEASE EDIT WITH CARE


var Curry = __webpack_require__(/*! bs-platform/lib/js/curry.js */ "./node_modules/bs-platform/lib/js/curry.js");
var Future = __webpack_require__(/*! rescript-future/src/Future.bs.js */ "./node_modules/rescript-future/src/Future.bs.js");
var Js_dict = __webpack_require__(/*! bs-platform/lib/js/js_dict.js */ "./node_modules/bs-platform/lib/js/js_dict.js");
var Caml_option = __webpack_require__(/*! bs-platform/lib/js/caml_option.js */ "./node_modules/bs-platform/lib/js/caml_option.js");

function make(url, methodOpt, responseType, body, headers, withCredentialsOpt, onLoadStart, onProgress, timeout, param) {
  var method = methodOpt !== undefined ? methodOpt : "GET";
  var withCredentials = withCredentialsOpt !== undefined ? withCredentialsOpt : false;
  return Future.make(function (resolve) {
              var xhr = new XMLHttpRequest();
              var tmp;
              switch (responseType) {
                case /* Text */0 :
                    tmp = "";
                    break;
                case /* ArrayBuffer */1 :
                    tmp = "arraybuffer";
                    break;
                case /* Document */2 :
                    tmp = "document";
                    break;
                case /* Blob */3 :
                    tmp = "blob";
                    break;
                case /* Json */4 :
                case /* JsonAsAny */5 :
                    tmp = "json";
                    break;
                
              }
              xhr.responseType = tmp;
              if (timeout !== undefined) {
                xhr.timeout = timeout;
              }
              xhr.withCredentials = withCredentials;
              xhr.open(method, url, true);
              if (headers !== undefined) {
                Js_dict.entries(Caml_option.valFromOption(headers)).forEach(function (param) {
                      xhr.setRequestHeader(param[0], param[1]);
                      
                    });
              }
              var errorListener = function (param) {
                cleanupEvents(undefined);
                return Curry._1(resolve, {
                            TAG: /* Error */1,
                            _0: "NetworkRequestFailed"
                          });
              };
              var timeoutListener = function (param) {
                cleanupEvents(undefined);
                return Curry._1(resolve, {
                            TAG: /* Error */1,
                            _0: "Timeout"
                          });
              };
              var loadStartListener = function ($$event) {
                if (onLoadStart !== undefined) {
                  return Curry._1(onLoadStart, $$event);
                }
                
              };
              var progressListener = function ($$event) {
                if (onProgress !== undefined) {
                  return Curry._1(onProgress, $$event);
                }
                
              };
              var loadListener = function (param) {
                cleanupEvents(undefined);
                var status = xhr.status;
                var response = xhr.response;
                var response$1 = (response == null) ? undefined : Caml_option.some(response);
                var response$2;
                if (responseType !== 4) {
                  if (responseType >= 5 && !((response == null) || typeof response !== "string")) {
                    try {
                      response$2 = Caml_option.some(JSON.parse(xhr.responseText));
                    }
                    catch (exn){
                      response$2 = undefined;
                    }
                  } else {
                    response$2 = response$1;
                  }
                } else if ((response == null) || typeof response !== "string") {
                  response$2 = response$1;
                } else {
                  try {
                    response$2 = Caml_option.some(JSON.parse(xhr.responseText));
                  }
                  catch (exn$1){
                    response$2 = undefined;
                  }
                }
                return Curry._1(resolve, {
                            TAG: /* Ok */0,
                            _0: {
                              status: status,
                              ok: status >= 200 && status < 300,
                              response: response$2
                            }
                          });
              };
              var cleanupEvents = function (param) {
                xhr.removeEventListener("error", errorListener);
                xhr.removeEventListener("load", loadListener);
                xhr.removeEventListener("timeout", timeoutListener);
                xhr.removeEventListener("loadstart", loadStartListener);
                xhr.removeEventListener("progress", progressListener);
                
              };
              xhr.addEventListener("load", loadListener);
              xhr.addEventListener("error", errorListener);
              xhr.addEventListener("timeout", timeoutListener);
              xhr.addEventListener("loadstart", loadStartListener);
              xhr.addEventListener("progress", progressListener);
              xhr.send(body);
              return (function (param) {
                        cleanupEvents(undefined);
                        xhr.abort();
                        
                      });
            });
}

exports.make = make;
/* No side effect */


/***/ }),

/***/ "./src/Pages.bs.js":
/*!*************************!*\
  !*** ./src/Pages.bs.js ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Generated by ReScript, PLEASE EDIT WITH CARE


var CssJs = __webpack_require__(/*! bs-css-emotion/src/CssJs.bs.js */ "./node_modules/bs-css-emotion/src/CssJs.bs.js");
var Curry = __webpack_require__(/*! bs-platform/lib/js/curry.js */ "./node_modules/bs-platform/lib/js/curry.js");
var React = __webpack_require__(/*! react */ "react");
var Future = __webpack_require__(/*! rescript-future/src/Future.bs.js */ "./node_modules/rescript-future/src/Future.bs.js");
var $$String = __webpack_require__(/*! bs-platform/lib/js/string.js */ "./node_modules/bs-platform/lib/js/string.js");
var Js_json = __webpack_require__(/*! bs-platform/lib/js/js_json.js */ "./node_modules/bs-platform/lib/js/js_json.js");
var $$Request = __webpack_require__(/*! rescript-request/src/Request.bs.js */ "./node_modules/rescript-request/src/Request.bs.js");
var Emotion = __webpack_require__(/*! emotion */ "./src/emotion.js");
var Belt_List = __webpack_require__(/*! bs-platform/lib/js/belt_List.js */ "./node_modules/bs-platform/lib/js/belt_List.js");
var ReactDom = __webpack_require__(/*! react-dom */ "react-dom");
var Belt_Array = __webpack_require__(/*! bs-platform/lib/js/belt_Array.js */ "./node_modules/bs-platform/lib/js/belt_Array.js");
var Belt_MapInt = __webpack_require__(/*! bs-platform/lib/js/belt_MapInt.js */ "./node_modules/bs-platform/lib/js/belt_MapInt.js");
var Belt_Option = __webpack_require__(/*! bs-platform/lib/js/belt_Option.js */ "./node_modules/bs-platform/lib/js/belt_Option.js");
var Belt_SetInt = __webpack_require__(/*! bs-platform/lib/js/belt_SetInt.js */ "./node_modules/bs-platform/lib/js/belt_SetInt.js");
var Caml_option = __webpack_require__(/*! bs-platform/lib/js/caml_option.js */ "./node_modules/bs-platform/lib/js/caml_option.js");
var ReactHelmet = __webpack_require__(/*! react-helmet */ "react-helmet");
var Belt_MapString = __webpack_require__(/*! bs-platform/lib/js/belt_MapString.js */ "./node_modules/bs-platform/lib/js/belt_MapString.js");
var Belt_SetString = __webpack_require__(/*! bs-platform/lib/js/belt_SetString.js */ "./node_modules/bs-platform/lib/js/belt_SetString.js");
var ReasonReactRouter = __webpack_require__(/*! reason-react/src/ReasonReactRouter.bs.js */ "./node_modules/reason-react/src/ReasonReactRouter.bs.js");
var Belt_MutableMapString = __webpack_require__(/*! bs-platform/lib/js/belt_MutableMapString.js */ "./node_modules/bs-platform/lib/js/belt_MutableMapString.js");

function mapError(error) {
  if (error === "Timeout") {
    return /* Timeout */1;
  } else {
    return /* NetworkRequestFailed */2;
  }
}

var context = React.createContext(undefined);

var make = context.Provider;

function pathParse(str) {
  switch (str) {
    case "" :
    case "/" :
        return /* [] */0;
    default:
      var raw = str.slice(1);
      var match = raw[raw.length - 1 | 0];
      var raw$1 = match === "/" ? raw.slice(0, -1) : raw;
      var match$1 = raw$1.split("?", 2);
      var raw$2 = match$1.length !== 2 ? raw$1 : match$1[0];
      return Belt_List.fromArray(raw$2.split("/").filter(function (item) {
                      return item.length !== 0;
                    }));
  }
}

function stripInitialPath(_path, _sourcePath) {
  while(true) {
    var sourcePath = _sourcePath;
    var path = _path;
    if (!path) {
      return path;
    }
    if (!sourcePath) {
      return path;
    }
    if (path.hd !== sourcePath.hd) {
      return path;
    }
    _sourcePath = sourcePath.tl;
    _path = path.tl;
    continue ;
  };
}

function useUrl(param) {
  var serverUrl = React.useContext(context);
  var url = ReasonReactRouter.useUrl(serverUrl, undefined);
  return {
          path: stripInitialPath(url.path, pathParse("/en")),
          hash: url.hash,
          search: url.search
        };
}

function join(s1, s2) {
  return (s1 + "/" + s2).replace(/\/+/g, "/");
}

function Pages$Link(Props) {
  var href = Props.href;
  var className = Props.className;
  var style = Props.style;
  var activeClassName = Props.activeClassName;
  var activeStyle = Props.activeStyle;
  var matchSubroutesOpt = Props.matchSubroutes;
  var children = Props.children;
  var matchSubroutes = matchSubroutesOpt !== undefined ? matchSubroutesOpt : false;
  var url = useUrl(undefined);
  var path = "/" + $$String.concat("/", url.path);
  var isActive = matchSubroutes ? (path + "/").startsWith(href) || path.startsWith(href) : path === href || path + "/" === href;
  var match = isActive ? activeStyle : undefined;
  var tmp;
  if (style !== undefined) {
    var a = Caml_option.valFromOption(style);
    tmp = match !== undefined ? Caml_option.some(Object.assign({}, a, Caml_option.valFromOption(match))) : Caml_option.some(a);
  } else {
    tmp = match !== undefined ? Caml_option.some(Caml_option.valFromOption(match)) : undefined;
  }
  var tmp$1 = {
    className: CssJs.merge(Belt_Array.keepMap([
              className,
              isActive ? activeClassName : undefined
            ], (function (x) {
                return x;
              }))),
    href: join("/en", href),
    onClick: (function ($$event) {
        $$event.preventDefault();
        return ReasonReactRouter.push(href);
      })
  };
  if (tmp !== undefined) {
    tmp$1.style = Caml_option.valFromOption(tmp);
  }
  return React.createElement("a", tmp$1, children);
}

var Link = {
  make: Pages$Link
};

var $$default = {
  lists: undefined,
  items: undefined,
  listsRequests: Belt_MutableMapString.make(undefined),
  itemsRequests: Belt_MutableMapString.make(undefined)
};

function defaultSetState(param) {
  
}

var context$1 = React.createContext([
      $$default,
      defaultSetState
    ]);

var make$1 = context$1.Provider;

function Pages$Context(Props) {
  var value = Props.value;
  var serverUrl = Props.serverUrl;
  var config = Props.config;
  var children = Props.children;
  var match = React.useState(function () {
        return Belt_Option.getWithDefault(value, $$default);
      });
  return React.createElement(make, {
              value: serverUrl,
              children: null
            }, React.createElement(ReactHelmet.Helmet, {
                  children: null
                }, React.createElement("meta", {
                      charSet: "UTF-8"
                    }), React.createElement("title", undefined, config.siteTitle), React.createElement("meta", {
                      name: "description",
                      value: config.siteDescription
                    })), React.createElement(make$1, {
                  value: [
                    match[0],
                    match[1]
                  ],
                  children: children
                }));
}

function useCollection(pageOpt, directionOpt, collection) {
  var page = pageOpt !== undefined ? pageOpt : 0;
  var direction = directionOpt !== undefined ? directionOpt : "desc";
  var match = React.useContext(context$1);
  var match$1 = match[0];
  var lists = match$1.lists;
  var listsRequests = match$1.listsRequests;
  var setContext = match[1];
  Belt_MutableMapString.update(listsRequests, collection, (function (collection) {
          return Caml_option.some(Belt_MapString.update(Belt_Option.getWithDefault(collection, undefined), direction, (function (requests) {
                            return Caml_option.some(Belt_SetInt.add(Belt_Option.getWithDefault(requests, undefined), page));
                          })));
        }));
  React.useEffect((function () {
          var match = Belt_Option.flatMap(Belt_Option.flatMap(Belt_MapString.get(lists, collection), (function (collection) {
                      return Belt_MapString.get(collection, direction);
                    })), (function (sortedCollection) {
                  return Belt_MapInt.get(sortedCollection, page);
                }));
          if (match !== undefined) {
            return ;
          }
          Curry._1(setContext, (function (context) {
                  return {
                          lists: Belt_MapString.update(context.lists, collection, (function (collection) {
                                  return Caml_option.some(Belt_MapString.update(Belt_Option.getWithDefault(collection, undefined), direction, (function (sortedCollection) {
                                                    return Caml_option.some(Belt_MapInt.set(Belt_Option.getWithDefault(sortedCollection, undefined), page, /* Loading */1));
                                                  })));
                                })),
                          items: context.items,
                          listsRequests: context.listsRequests,
                          itemsRequests: context.itemsRequests
                        };
                }));
          var url = join("/en", "api/" + collection + "/pages/" + direction + "/" + String(page) + ".json");
          var future = Future.mapResult(Future.mapError($$Request.make(url, undefined, /* Text */0, undefined, undefined, undefined, undefined, undefined, undefined, undefined), true, mapError), true, (function (response) {
                  if (!response.ok) {
                    return {
                            TAG: /* Error */1,
                            _0: /* EmptyResponse */0
                          };
                  }
                  var value = response.response;
                  if (value !== undefined) {
                    return {
                            TAG: /* Ok */0,
                            _0: Js_json.deserializeUnsafe(value)
                          };
                  } else {
                    return {
                            TAG: /* Error */1,
                            _0: /* EmptyResponse */0
                          };
                  }
                }));
          Future.get(future, (function (result) {
                  return Curry._1(setContext, (function (context) {
                                return {
                                        lists: Belt_MapString.update(context.lists, collection, (function (collection) {
                                                return Caml_option.some(Belt_MapString.update(Belt_Option.getWithDefault(collection, undefined), direction, (function (sortedCollection) {
                                                                  return Caml_option.some(Belt_MapInt.set(Belt_Option.getWithDefault(sortedCollection, undefined), page, /* Done */{
                                                                                  _0: result
                                                                                }));
                                                                })));
                                              })),
                                        items: context.items,
                                        listsRequests: context.listsRequests,
                                        itemsRequests: context.itemsRequests
                                      };
                              }));
                }));
          return (function (param) {
                    return Future.cancel(future);
                  });
        }), [page]);
  return Belt_Option.getWithDefault(Belt_Option.flatMap(Belt_Option.flatMap(Belt_MapString.get(lists, collection), (function (collection) {
                        return Belt_MapString.get(collection, direction);
                      })), (function (collection) {
                    return Belt_MapInt.get(collection, page);
                  })), /* NotAsked */0);
}

function useItem(collection, id) {
  var match = React.useContext(context$1);
  var match$1 = match[0];
  var items = match$1.items;
  var itemsRequests = match$1.itemsRequests;
  var setContext = match[1];
  Belt_MutableMapString.update(itemsRequests, collection, (function (items) {
          return Caml_option.some(Belt_SetString.add(Belt_Option.getWithDefault(items, undefined), id));
        }));
  React.useEffect((function () {
          var match = Belt_Option.flatMap(Belt_MapString.get(items, collection), (function (collection) {
                  return Belt_MapString.get(collection, id);
                }));
          if (match !== undefined) {
            return ;
          }
          Curry._1(setContext, (function (context) {
                  return {
                          lists: context.lists,
                          items: Belt_MapString.update(context.items, collection, (function (collection) {
                                  return Caml_option.some(Belt_MapString.set(Belt_Option.getWithDefault(collection, undefined), id, /* Loading */1));
                                })),
                          listsRequests: context.listsRequests,
                          itemsRequests: context.itemsRequests
                        };
                }));
          var url = join("/en", "/api/" + collection + "/items/" + id + ".json");
          var future = Future.mapResult(Future.mapError($$Request.make(url, undefined, /* Text */0, undefined, undefined, undefined, undefined, undefined, undefined, undefined), true, mapError), true, (function (response) {
                  if (!response.ok) {
                    return {
                            TAG: /* Error */1,
                            _0: /* EmptyResponse */0
                          };
                  }
                  var value = response.response;
                  if (value !== undefined) {
                    return {
                            TAG: /* Ok */0,
                            _0: Js_json.deserializeUnsafe(value)
                          };
                  } else {
                    return {
                            TAG: /* Error */1,
                            _0: /* EmptyResponse */0
                          };
                  }
                }));
          Future.get(future, (function (result) {
                  return Curry._1(setContext, (function (context) {
                                return {
                                        lists: context.lists,
                                        items: Belt_MapString.update(context.items, collection, (function (collection) {
                                                return Caml_option.some(Belt_MapString.set(Belt_Option.getWithDefault(collection, undefined), id, /* Done */{
                                                                _0: result
                                                              }));
                                              })),
                                        listsRequests: context.listsRequests,
                                        itemsRequests: context.itemsRequests
                                      };
                              }));
                }));
          return (function (param) {
                    return Future.cancel(future);
                  });
        }), [id]);
  return Belt_Option.getWithDefault(Belt_Option.flatMap(Belt_MapString.get(items, collection), (function (collection) {
                    return Belt_MapString.get(collection, id);
                  })), /* NotAsked */0);
}

function Pages$App(Props) {
  var config = Props.config;
  var app = Props.app;
  var url = useUrl(undefined);
  return React.createElement(app, {
              url: url,
              config: config
            });
}

var App = {
  make: Pages$App
};

function start(app, config) {
  var root = document.querySelector("#root");
  var initialData = Belt_Option.map(Belt_Option.map(Caml_option.nullable_to_opt(document.querySelector("#initialData")), (function (prim) {
              return prim.textContent;
            })), Js_json.deserializeUnsafe);
  if (root == null) {
    console.error("Can\'t find the app\'s root container");
  } else if (initialData !== undefined) {
    ReactDom.hydrate(React.createElement(Pages$Context, {
              value: Caml_option.valFromOption(initialData),
              config: config,
              children: React.createElement(Pages$App, {
                    config: config,
                    app: app
                  })
            }), root);
  } else {
    ReactDom.render(React.createElement(Pages$Context, {
              config: config,
              children: React.createElement(Pages$App, {
                    config: config,
                    app: app
                  })
            }), root);
  }
  
}

function make$2(app, config) {
  if (typeof window !== "undefined") {
    start(app, config);
  }
  return {
          app: app,
          container: Pages$App,
          config: config,
          provider: Pages$Context,
          emotion: Emotion
        };
}

var Context = {};

var Head = {
  make: ReactHelmet.Helmet
};

exports.join = join;
exports.Context = Context;
exports.Link = Link;
exports.Head = Head;
exports.useCollection = useCollection;
exports.useItem = useItem;
exports.App = App;
exports.make = make$2;
/* context Not a pure module */


/***/ }),

/***/ "./src/emotion.js":
/*!************************!*\
  !*** ./src/emotion.js ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

let createEmotion =
  __webpack_require__(/*! create-emotion */ "./node_modules/create-emotion/dist/create-emotion.esm.js").default || __webpack_require__(/*! create-emotion */ "./node_modules/create-emotion/dist/create-emotion.esm.js");

module.exports = createEmotion({ key: "rpcss" });


/***/ }),

/***/ "react":
/*!************************!*\
  !*** external "react" ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("react");

/***/ }),

/***/ "react-dom":
/*!****************************!*\
  !*** external "react-dom" ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("react-dom");

/***/ }),

/***/ "react-helmet":
/*!*******************************!*\
  !*** external "react-helmet" ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("react-helmet");

/***/ })

/******/ });